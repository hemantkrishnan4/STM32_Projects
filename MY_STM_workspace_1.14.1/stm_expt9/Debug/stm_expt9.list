
stm_expt9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08005fc0  08005fc0  00015fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006198  08006198  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006198  08006198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061a0  080061a0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061a0  080061a0  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061a4  080061a4  000161a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080061a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f08  20000078  08006220  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f80  08006220  00020f80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000087  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e699  00000000  00000000  0002012f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000207b  00000000  00000000  0002e7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de8  00000000  00000000  00030848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ade  00000000  00000000  00031630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001862e  00000000  00000000  0003210e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fc9a  00000000  00000000  0004a73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bdc5  00000000  00000000  0005a3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047ac  00000000  00000000  000f619c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000fa948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005fa8 	.word	0x08005fa8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005fa8 	.word	0x08005fa8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b970 	b.w	8000f14 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9e08      	ldr	r6, [sp, #32]
 8000c52:	460d      	mov	r5, r1
 8000c54:	4604      	mov	r4, r0
 8000c56:	460f      	mov	r7, r1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d14a      	bne.n	8000cf2 <__udivmoddi4+0xa6>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4694      	mov	ip, r2
 8000c60:	d965      	bls.n	8000d2e <__udivmoddi4+0xe2>
 8000c62:	fab2 f382 	clz	r3, r2
 8000c66:	b143      	cbz	r3, 8000c7a <__udivmoddi4+0x2e>
 8000c68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c6c:	f1c3 0220 	rsb	r2, r3, #32
 8000c70:	409f      	lsls	r7, r3
 8000c72:	fa20 f202 	lsr.w	r2, r0, r2
 8000c76:	4317      	orrs	r7, r2
 8000c78:	409c      	lsls	r4, r3
 8000c7a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c7e:	fa1f f58c 	uxth.w	r5, ip
 8000c82:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c86:	0c22      	lsrs	r2, r4, #16
 8000c88:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c8c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c90:	fb01 f005 	mul.w	r0, r1, r5
 8000c94:	4290      	cmp	r0, r2
 8000c96:	d90a      	bls.n	8000cae <__udivmoddi4+0x62>
 8000c98:	eb1c 0202 	adds.w	r2, ip, r2
 8000c9c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ca0:	f080 811c 	bcs.w	8000edc <__udivmoddi4+0x290>
 8000ca4:	4290      	cmp	r0, r2
 8000ca6:	f240 8119 	bls.w	8000edc <__udivmoddi4+0x290>
 8000caa:	3902      	subs	r1, #2
 8000cac:	4462      	add	r2, ip
 8000cae:	1a12      	subs	r2, r2, r0
 8000cb0:	b2a4      	uxth	r4, r4
 8000cb2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cbe:	fb00 f505 	mul.w	r5, r0, r5
 8000cc2:	42a5      	cmp	r5, r4
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x90>
 8000cc6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cca:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cce:	f080 8107 	bcs.w	8000ee0 <__udivmoddi4+0x294>
 8000cd2:	42a5      	cmp	r5, r4
 8000cd4:	f240 8104 	bls.w	8000ee0 <__udivmoddi4+0x294>
 8000cd8:	4464      	add	r4, ip
 8000cda:	3802      	subs	r0, #2
 8000cdc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ce0:	1b64      	subs	r4, r4, r5
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	b11e      	cbz	r6, 8000cee <__udivmoddi4+0xa2>
 8000ce6:	40dc      	lsrs	r4, r3
 8000ce8:	2300      	movs	r3, #0
 8000cea:	e9c6 4300 	strd	r4, r3, [r6]
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0xbc>
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	f000 80ed 	beq.w	8000ed6 <__udivmoddi4+0x28a>
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	e9c6 0500 	strd	r0, r5, [r6]
 8000d02:	4608      	mov	r0, r1
 8000d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d08:	fab3 f183 	clz	r1, r3
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	d149      	bne.n	8000da4 <__udivmoddi4+0x158>
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	d302      	bcc.n	8000d1a <__udivmoddi4+0xce>
 8000d14:	4282      	cmp	r2, r0
 8000d16:	f200 80f8 	bhi.w	8000f0a <__udivmoddi4+0x2be>
 8000d1a:	1a84      	subs	r4, r0, r2
 8000d1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d20:	2001      	movs	r0, #1
 8000d22:	4617      	mov	r7, r2
 8000d24:	2e00      	cmp	r6, #0
 8000d26:	d0e2      	beq.n	8000cee <__udivmoddi4+0xa2>
 8000d28:	e9c6 4700 	strd	r4, r7, [r6]
 8000d2c:	e7df      	b.n	8000cee <__udivmoddi4+0xa2>
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xe6>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f382 	clz	r3, r2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f040 8090 	bne.w	8000e5c <__udivmoddi4+0x210>
 8000d3c:	1a8a      	subs	r2, r1, r2
 8000d3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d42:	fa1f fe8c 	uxth.w	lr, ip
 8000d46:	2101      	movs	r1, #1
 8000d48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d50:	0c22      	lsrs	r2, r4, #16
 8000d52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d56:	fb0e f005 	mul.w	r0, lr, r5
 8000d5a:	4290      	cmp	r0, r2
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x124>
 8000d5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x122>
 8000d68:	4290      	cmp	r0, r2
 8000d6a:	f200 80cb 	bhi.w	8000f04 <__udivmoddi4+0x2b8>
 8000d6e:	4645      	mov	r5, r8
 8000d70:	1a12      	subs	r2, r2, r0
 8000d72:	b2a4      	uxth	r4, r4
 8000d74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d78:	fb07 2210 	mls	r2, r7, r0, r2
 8000d7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d80:	fb0e fe00 	mul.w	lr, lr, r0
 8000d84:	45a6      	cmp	lr, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x14e>
 8000d88:	eb1c 0404 	adds.w	r4, ip, r4
 8000d8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d90:	d202      	bcs.n	8000d98 <__udivmoddi4+0x14c>
 8000d92:	45a6      	cmp	lr, r4
 8000d94:	f200 80bb 	bhi.w	8000f0e <__udivmoddi4+0x2c2>
 8000d98:	4610      	mov	r0, r2
 8000d9a:	eba4 040e 	sub.w	r4, r4, lr
 8000d9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000da2:	e79f      	b.n	8000ce4 <__udivmoddi4+0x98>
 8000da4:	f1c1 0720 	rsb	r7, r1, #32
 8000da8:	408b      	lsls	r3, r1
 8000daa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db2:	fa05 f401 	lsl.w	r4, r5, r1
 8000db6:	fa20 f307 	lsr.w	r3, r0, r7
 8000dba:	40fd      	lsrs	r5, r7
 8000dbc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc0:	4323      	orrs	r3, r4
 8000dc2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	fb09 5518 	mls	r5, r9, r8, r5
 8000dce:	0c1c      	lsrs	r4, r3, #16
 8000dd0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dd4:	fb08 f50e 	mul.w	r5, r8, lr
 8000dd8:	42a5      	cmp	r5, r4
 8000dda:	fa02 f201 	lsl.w	r2, r2, r1
 8000dde:	fa00 f001 	lsl.w	r0, r0, r1
 8000de2:	d90b      	bls.n	8000dfc <__udivmoddi4+0x1b0>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dec:	f080 8088 	bcs.w	8000f00 <__udivmoddi4+0x2b4>
 8000df0:	42a5      	cmp	r5, r4
 8000df2:	f240 8085 	bls.w	8000f00 <__udivmoddi4+0x2b4>
 8000df6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfa:	4464      	add	r4, ip
 8000dfc:	1b64      	subs	r4, r4, r5
 8000dfe:	b29d      	uxth	r5, r3
 8000e00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e04:	fb09 4413 	mls	r4, r9, r3, r4
 8000e08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x1da>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e1c:	d26c      	bcs.n	8000ef8 <__udivmoddi4+0x2ac>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	d96a      	bls.n	8000ef8 <__udivmoddi4+0x2ac>
 8000e22:	3b02      	subs	r3, #2
 8000e24:	4464      	add	r4, ip
 8000e26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	42ac      	cmp	r4, r5
 8000e34:	46c8      	mov	r8, r9
 8000e36:	46ae      	mov	lr, r5
 8000e38:	d356      	bcc.n	8000ee8 <__udivmoddi4+0x29c>
 8000e3a:	d053      	beq.n	8000ee4 <__udivmoddi4+0x298>
 8000e3c:	b156      	cbz	r6, 8000e54 <__udivmoddi4+0x208>
 8000e3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e42:	eb64 040e 	sbc.w	r4, r4, lr
 8000e46:	fa04 f707 	lsl.w	r7, r4, r7
 8000e4a:	40ca      	lsrs	r2, r1
 8000e4c:	40cc      	lsrs	r4, r1
 8000e4e:	4317      	orrs	r7, r2
 8000e50:	e9c6 7400 	strd	r7, r4, [r6]
 8000e54:	4618      	mov	r0, r3
 8000e56:	2100      	movs	r1, #0
 8000e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5c:	f1c3 0120 	rsb	r1, r3, #32
 8000e60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e64:	fa20 f201 	lsr.w	r2, r0, r1
 8000e68:	fa25 f101 	lsr.w	r1, r5, r1
 8000e6c:	409d      	lsls	r5, r3
 8000e6e:	432a      	orrs	r2, r5
 8000e70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e74:	fa1f fe8c 	uxth.w	lr, ip
 8000e78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e80:	0c11      	lsrs	r1, r2, #16
 8000e82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e86:	fb00 f50e 	mul.w	r5, r0, lr
 8000e8a:	428d      	cmp	r5, r1
 8000e8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x258>
 8000e92:	eb1c 0101 	adds.w	r1, ip, r1
 8000e96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9a:	d22f      	bcs.n	8000efc <__udivmoddi4+0x2b0>
 8000e9c:	428d      	cmp	r5, r1
 8000e9e:	d92d      	bls.n	8000efc <__udivmoddi4+0x2b0>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	4461      	add	r1, ip
 8000ea4:	1b49      	subs	r1, r1, r5
 8000ea6:	b292      	uxth	r2, r2
 8000ea8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eac:	fb07 1115 	mls	r1, r7, r5, r1
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	fb05 f10e 	mul.w	r1, r5, lr
 8000eb8:	4291      	cmp	r1, r2
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x282>
 8000ebc:	eb1c 0202 	adds.w	r2, ip, r2
 8000ec0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ec4:	d216      	bcs.n	8000ef4 <__udivmoddi4+0x2a8>
 8000ec6:	4291      	cmp	r1, r2
 8000ec8:	d914      	bls.n	8000ef4 <__udivmoddi4+0x2a8>
 8000eca:	3d02      	subs	r5, #2
 8000ecc:	4462      	add	r2, ip
 8000ece:	1a52      	subs	r2, r2, r1
 8000ed0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ed4:	e738      	b.n	8000d48 <__udivmoddi4+0xfc>
 8000ed6:	4631      	mov	r1, r6
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e708      	b.n	8000cee <__udivmoddi4+0xa2>
 8000edc:	4639      	mov	r1, r7
 8000ede:	e6e6      	b.n	8000cae <__udivmoddi4+0x62>
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	e6fb      	b.n	8000cdc <__udivmoddi4+0x90>
 8000ee4:	4548      	cmp	r0, r9
 8000ee6:	d2a9      	bcs.n	8000e3c <__udivmoddi4+0x1f0>
 8000ee8:	ebb9 0802 	subs.w	r8, r9, r2
 8000eec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	e7a3      	b.n	8000e3c <__udivmoddi4+0x1f0>
 8000ef4:	4645      	mov	r5, r8
 8000ef6:	e7ea      	b.n	8000ece <__udivmoddi4+0x282>
 8000ef8:	462b      	mov	r3, r5
 8000efa:	e794      	b.n	8000e26 <__udivmoddi4+0x1da>
 8000efc:	4640      	mov	r0, r8
 8000efe:	e7d1      	b.n	8000ea4 <__udivmoddi4+0x258>
 8000f00:	46d0      	mov	r8, sl
 8000f02:	e77b      	b.n	8000dfc <__udivmoddi4+0x1b0>
 8000f04:	3d02      	subs	r5, #2
 8000f06:	4462      	add	r2, ip
 8000f08:	e732      	b.n	8000d70 <__udivmoddi4+0x124>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e70a      	b.n	8000d24 <__udivmoddi4+0xd8>
 8000f0e:	4464      	add	r4, ip
 8000f10:	3802      	subs	r0, #2
 8000f12:	e742      	b.n	8000d9a <__udivmoddi4+0x14e>

08000f14 <__aeabi_idiv0>:
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <HAL_ADC_ConvCpltCallback>:
void Inference();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	mic = HAL_ADC_GetValue(&hadc1);
 8000f20:	4806      	ldr	r0, [pc, #24]	; (8000f3c <HAL_ADC_ConvCpltCallback+0x24>)
 8000f22:	f000 fefd 	bl	8001d20 <HAL_ADC_GetValue>
 8000f26:	ee07 0a90 	vmov	s15, r0
 8000f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <HAL_ADC_ConvCpltCallback+0x28>)
 8000f30:	edc3 7a00 	vstr	s15, [r3]
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000094 	.word	0x20000094
 8000f40:	2000016c 	.word	0x2000016c

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4a:	f000 fc41 	bl	80017d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  enum neai_state error_code = neai_classification_init(knowledge);
 8000f4e:	4810      	ldr	r0, [pc, #64]	; (8000f90 <main+0x4c>)
 8000f50:	f002 ffd6 	bl	8003f00 <neai_classification_init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	71fb      	strb	r3, [r7, #7]
  if(error_code!=NEAI_OK)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d008      	beq.n	8000f70 <main+0x2c>
	  {
	  printf("Knowledge initialization ERROR;");
 8000f5e:	480d      	ldr	r0, [pc, #52]	; (8000f94 <main+0x50>)
 8000f60:	f003 fdc6 	bl	8004af0 <iprintf>
	  printf("%d", error_code);
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	4619      	mov	r1, r3
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <main+0x54>)
 8000f6a:	f003 fdc1 	bl	8004af0 <iprintf>
 8000f6e:	e002      	b.n	8000f76 <main+0x32>
	  }
  else
  {
	  printf("Knowledge initialization DONE;");
 8000f70:	480a      	ldr	r0, [pc, #40]	; (8000f9c <main+0x58>)
 8000f72:	f003 fdbd 	bl	8004af0 <iprintf>
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f76:	f000 f813 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7a:	f000 f945 	bl	8001208 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f7e:	f000 f919 	bl	80011b4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f82:	f000 f877 	bl	8001074 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f86:	f000 f8c9 	bl	800111c <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Inference();
 8000f8a:	f000 f9e1 	bl	8001350 <Inference>
 8000f8e:	e7fc      	b.n	8000f8a <main+0x46>
 8000f90:	0800603c 	.word	0x0800603c
 8000f94:	08005fe4 	.word	0x08005fe4
 8000f98:	08006004 	.word	0x08006004
 8000f9c:	08006008 	.word	0x08006008

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	; 0x50
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	2230      	movs	r2, #48	; 0x30
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 feec 	bl	8004d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	4b28      	ldr	r3, [pc, #160]	; (800106c <SystemClock_Config+0xcc>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	4a27      	ldr	r2, [pc, #156]	; (800106c <SystemClock_Config+0xcc>)
 8000fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd4:	4b25      	ldr	r3, [pc, #148]	; (800106c <SystemClock_Config+0xcc>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	4b22      	ldr	r3, [pc, #136]	; (8001070 <SystemClock_Config+0xd0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a21      	ldr	r2, [pc, #132]	; (8001070 <SystemClock_Config+0xd0>)
 8000fea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <SystemClock_Config+0xd0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001000:	2301      	movs	r3, #1
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001004:	2310      	movs	r3, #16
 8001006:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001008:	2302      	movs	r3, #2
 800100a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800100c:	2300      	movs	r3, #0
 800100e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001010:	2310      	movs	r3, #16
 8001012:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001014:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001018:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800101a:	2304      	movs	r3, #4
 800101c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800101e:	2304      	movs	r3, #4
 8001020:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001022:	f107 0320 	add.w	r3, r7, #32
 8001026:	4618      	mov	r0, r3
 8001028:	f001 fb84 	bl	8002734 <HAL_RCC_OscConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001032:	f000 f9d7 	bl	80013e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001036:	230f      	movs	r3, #15
 8001038:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103a:	2302      	movs	r3, #2
 800103c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001046:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2102      	movs	r1, #2
 8001052:	4618      	mov	r0, r3
 8001054:	f001 fde6 	bl	8002c24 <HAL_RCC_ClockConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800105e:	f000 f9c1 	bl	80013e4 <Error_Handler>
  }
}
 8001062:	bf00      	nop
 8001064:	3750      	adds	r7, #80	; 0x50
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40007000 	.word	0x40007000

08001074 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800107a:	463b      	mov	r3, r7
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001086:	4b23      	ldr	r3, [pc, #140]	; (8001114 <MX_ADC1_Init+0xa0>)
 8001088:	4a23      	ldr	r2, [pc, #140]	; (8001118 <MX_ADC1_Init+0xa4>)
 800108a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800108c:	4b21      	ldr	r3, [pc, #132]	; (8001114 <MX_ADC1_Init+0xa0>)
 800108e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001092:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001094:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <MX_ADC1_Init+0xa0>)
 8001096:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800109a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <MX_ADC1_Init+0xa0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <MX_ADC1_Init+0xa0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_ADC1_Init+0xa0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <MX_ADC1_Init+0xa0>)
 80010b2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <MX_ADC1_Init+0xa0>)
 80010ba:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_ADC1_Init+0xa0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_ADC1_Init+0xa0>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_ADC1_Init+0xa0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_ADC1_Init+0xa0>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <MX_ADC1_Init+0xa0>)
 80010dc:	f000 fc0e 	bl	80018fc <HAL_ADC_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80010e6:	f000 f97d 	bl	80013e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f6:	463b      	mov	r3, r7
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	; (8001114 <MX_ADC1_Init+0xa0>)
 80010fc:	f000 fe32 	bl	8001d64 <HAL_ADC_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001106:	f000 f96d 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000094 	.word	0x20000094
 8001118:	40012000 	.word	0x40012000

0800111c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	463b      	mov	r3, r7
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <MX_TIM2_Init+0x94>)
 800113a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MX_TIM2_Init+0x94>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_TIM2_Init+0x94>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_TIM2_Init+0x94>)
 800114e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001152:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <MX_TIM2_Init+0x94>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <MX_TIM2_Init+0x94>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001160:	4813      	ldr	r0, [pc, #76]	; (80011b0 <MX_TIM2_Init+0x94>)
 8001162:	f001 ff7f 	bl	8003064 <HAL_TIM_Base_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800116c:	f000 f93a 	bl	80013e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001174:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	4619      	mov	r1, r3
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <MX_TIM2_Init+0x94>)
 800117e:	f001 ffc0 	bl	8003102 <HAL_TIM_ConfigClockSource>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001188:	f000 f92c 	bl	80013e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800118c:	2320      	movs	r3, #32
 800118e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001194:	463b      	mov	r3, r7
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_TIM2_Init+0x94>)
 800119a:	f002 f99f 	bl	80034dc <HAL_TIMEx_MasterConfigSynchronization>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011a4:	f000 f91e 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200000dc 	.word	0x200000dc

080011b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <MX_USART2_UART_Init+0x50>)
 80011bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ec:	f002 f9e4 	bl	80035b8 <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011f6:	f000 f8f5 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000124 	.word	0x20000124
 8001204:	40004400 	.word	0x40004400

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <MX_GPIO_Init+0xd0>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a2c      	ldr	r2, [pc, #176]	; (80012d8 <MX_GPIO_Init+0xd0>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <MX_GPIO_Init+0xd0>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <MX_GPIO_Init+0xd0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a25      	ldr	r2, [pc, #148]	; (80012d8 <MX_GPIO_Init+0xd0>)
 8001244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <MX_GPIO_Init+0xd0>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <MX_GPIO_Init+0xd0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a1e      	ldr	r2, [pc, #120]	; (80012d8 <MX_GPIO_Init+0xd0>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <MX_GPIO_Init+0xd0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <MX_GPIO_Init+0xd0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <MX_GPIO_Init+0xd0>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_GPIO_Init+0xd0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2120      	movs	r1, #32
 8001292:	4812      	ldr	r0, [pc, #72]	; (80012dc <MX_GPIO_Init+0xd4>)
 8001294:	f001 fa34 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800129e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	480c      	ldr	r0, [pc, #48]	; (80012e0 <MX_GPIO_Init+0xd8>)
 80012b0:	f001 f8a2 	bl	80023f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012b4:	2320      	movs	r3, #32
 80012b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	4804      	ldr	r0, [pc, #16]	; (80012dc <MX_GPIO_Init+0xd4>)
 80012cc:	f001 f894 	bl	80023f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012d0:	bf00      	nop
 80012d2:	3728      	adds	r7, #40	; 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020800 	.word	0x40020800

080012e4 <fill_mic_buffer>:

/* USER CODE BEGIN 4 */
void fill_mic_buffer(){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	for (int i=0; i< DATA_INPUT_USER; i++){
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	e00f      	b.n	8001310 <fill_mic_buffer+0x2c>
		HAL_ADC_Start_IT(&hadc1);
 80012f0:	480b      	ldr	r0, [pc, #44]	; (8001320 <fill_mic_buffer+0x3c>)
 80012f2:	f000 fb47 	bl	8001984 <HAL_ADC_Start_IT>
		mic_buffer[AXIS_NUMBER * i] = mic;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <fill_mic_buffer+0x40>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	490b      	ldr	r1, [pc, #44]	; (8001328 <fill_mic_buffer+0x44>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	601a      	str	r2, [r3, #0]
		HAL_Delay(3);
 8001304:	2003      	movs	r0, #3
 8001306:	f000 fad5 	bl	80018b4 <HAL_Delay>
	for (int i=0; i< DATA_INPUT_USER; i++){
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3301      	adds	r3, #1
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2bff      	cmp	r3, #255	; 0xff
 8001314:	ddec      	ble.n	80012f0 <fill_mic_buffer+0xc>
	}
}
 8001316:	bf00      	nop
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000094 	.word	0x20000094
 8001324:	2000016c 	.word	0x2000016c
 8001328:	20000170 	.word	0x20000170

0800132c <__io_putchar>:

int __io_putchar(int ch){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001334:	1d39      	adds	r1, r7, #4
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	2201      	movs	r2, #1
 800133c:	4803      	ldr	r0, [pc, #12]	; (800134c <__io_putchar+0x20>)
 800133e:	f002 f98b 	bl	8003658 <HAL_UART_Transmit>
	return ch;
 8001342:	687b      	ldr	r3, [r7, #4]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000124 	.word	0x20000124

08001350 <Inference>:

void Inference()
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
	uint16_t i, id_class_t0, id_class_tn;
	fill_mic_buffer();
 8001356:	f7ff ffc5 	bl	80012e4 <fill_mic_buffer>
	neai_classification(mic_buffer,output_class_buffer, &id_class_t0);
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	461a      	mov	r2, r3
 800135e:	491c      	ldr	r1, [pc, #112]	; (80013d0 <Inference+0x80>)
 8001360:	481c      	ldr	r0, [pc, #112]	; (80013d4 <Inference+0x84>)
 8001362:	f002 fe77 	bl	8004054 <neai_classification>
	for (i=0;i<CONFIRMATIONS_NB-1;i++)
 8001366:	2300      	movs	r3, #0
 8001368:	80fb      	strh	r3, [r7, #6]
 800136a:	e00e      	b.n	800138a <Inference+0x3a>
	{
		fill_mic_buffer();
 800136c:	f7ff ffba 	bl	80012e4 <fill_mic_buffer>
		neai_classification(mic_buffer,output_class_buffer,&id_class_tn);
 8001370:	1cbb      	adds	r3, r7, #2
 8001372:	461a      	mov	r2, r3
 8001374:	4916      	ldr	r1, [pc, #88]	; (80013d0 <Inference+0x80>)
 8001376:	4817      	ldr	r0, [pc, #92]	; (80013d4 <Inference+0x84>)
 8001378:	f002 fe6c 	bl	8004054 <neai_classification>
		if (id_class_t0 != id_class_tn) { break; }
 800137c:	88ba      	ldrh	r2, [r7, #4]
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	429a      	cmp	r2, r3
 8001382:	d106      	bne.n	8001392 <Inference+0x42>
	for (i=0;i<CONFIRMATIONS_NB-1;i++)
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	3301      	adds	r3, #1
 8001388:	80fb      	strh	r3, [r7, #6]
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d9ed      	bls.n	800136c <Inference+0x1c>
 8001390:	e000      	b.n	8001394 <Inference+0x44>
		if (id_class_t0 != id_class_tn) { break; }
 8001392:	bf00      	nop
	}
	if (id_class_t0 == id_class_tn)
 8001394:	88ba      	ldrh	r2, [r7, #4]
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	429a      	cmp	r2, r3
 800139a:	d10e      	bne.n	80013ba <Inference+0x6a>
	{
		printf("Detected Class:");
 800139c:	480e      	ldr	r0, [pc, #56]	; (80013d8 <Inference+0x88>)
 800139e:	f003 fba7 	bl	8004af0 <iprintf>
		printf(id2class[id_class_t0]);
 80013a2:	88bb      	ldrh	r3, [r7, #4]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <Inference+0x8c>)
 80013a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 fb9f 	bl	8004af0 <iprintf>
		printf("\r\n");
 80013b2:	480b      	ldr	r0, [pc, #44]	; (80013e0 <Inference+0x90>)
 80013b4:	f003 fc0a 	bl	8004bcc <puts>
	else
	{
		printf("?");
		printf("\r\n");
	}
}
 80013b8:	e005      	b.n	80013c6 <Inference+0x76>
		printf("?");
 80013ba:	203f      	movs	r0, #63	; 0x3f
 80013bc:	f003 fbaa 	bl	8004b14 <putchar>
		printf("\r\n");
 80013c0:	4807      	ldr	r0, [pc, #28]	; (80013e0 <Inference+0x90>)
 80013c2:	f003 fc03 	bl	8004bcc <puts>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000570 	.word	0x20000570
 80013d4:	20000170 	.word	0x20000170
 80013d8:	08006028 	.word	0x08006028
 80013dc:	20000000 	.word	0x20000000
 80013e0:	08006038 	.word	0x08006038

080013e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e8:	b672      	cpsid	i
}
 80013ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ec:	e7fe      	b.n	80013ec <Error_Handler+0x8>
	...

080013f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <HAL_MspInit+0x4c>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	4a0f      	ldr	r2, [pc, #60]	; (800143c <HAL_MspInit+0x4c>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001404:	6453      	str	r3, [r2, #68]	; 0x44
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <HAL_MspInit+0x4c>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_MspInit+0x4c>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_MspInit+0x4c>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_MspInit+0x4c>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800142e:	2007      	movs	r0, #7
 8001430:	f000 ffa0 	bl	8002374 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800

08001440 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a1b      	ldr	r2, [pc, #108]	; (80014cc <HAL_ADC_MspInit+0x8c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d12f      	bne.n	80014c2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <HAL_ADC_MspInit+0x90>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <HAL_ADC_MspInit+0x90>)
 800146c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <HAL_ADC_MspInit+0x90>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <HAL_ADC_MspInit+0x90>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <HAL_ADC_MspInit+0x90>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <HAL_ADC_MspInit+0x90>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800149a:	2301      	movs	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149e:	2303      	movs	r3, #3
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	4809      	ldr	r0, [pc, #36]	; (80014d4 <HAL_ADC_MspInit+0x94>)
 80014ae:	f000 ffa3 	bl	80023f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	2012      	movs	r0, #18
 80014b8:	f000 ff67 	bl	800238a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80014bc:	2012      	movs	r0, #18
 80014be:	f000 ff80 	bl	80023c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014c2:	bf00      	nop
 80014c4:	3728      	adds	r7, #40	; 0x28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40012000 	.word	0x40012000
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020000 	.word	0x40020000

080014d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e8:	d10d      	bne.n	8001506 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_TIM_Base_MspInit+0x3c>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a08      	ldr	r2, [pc, #32]	; (8001514 <HAL_TIM_Base_MspInit+0x3c>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_TIM_Base_MspInit+0x3c>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001506:	bf00      	nop
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800

08001518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a19      	ldr	r2, [pc, #100]	; (800159c <HAL_UART_MspInit+0x84>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d12b      	bne.n	8001592 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_UART_MspInit+0x88>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <HAL_UART_MspInit+0x88>)
 8001544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_UART_MspInit+0x88>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_UART_MspInit+0x88>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a10      	ldr	r2, [pc, #64]	; (80015a0 <HAL_UART_MspInit+0x88>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_UART_MspInit+0x88>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001572:	230c      	movs	r3, #12
 8001574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001582:	2307      	movs	r3, #7
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <HAL_UART_MspInit+0x8c>)
 800158e:	f000 ff33 	bl	80023f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40004400 	.word	0x40004400
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020000 	.word	0x40020000

080015a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015ac:	e7fe      	b.n	80015ac <NMI_Handler+0x4>

080015ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <HardFault_Handler+0x4>

080015b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <MemManage_Handler+0x4>

080015ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <BusFault_Handler+0x4>

080015c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <UsageFault_Handler+0x4>

080015c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f4:	f000 f93e 	bl	8001874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}

080015fc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <ADC_IRQHandler+0x10>)
 8001602:	f000 fa7d 	bl	8001b00 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000094 	.word	0x20000094

08001610 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e00a      	b.n	8001638 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001622:	f3af 8000 	nop.w
 8001626:	4601      	mov	r1, r0
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	60ba      	str	r2, [r7, #8]
 800162e:	b2ca      	uxtb	r2, r1
 8001630:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbf0      	blt.n	8001622 <_read+0x12>
  }

  return len;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e009      	b.n	8001670 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	60ba      	str	r2, [r7, #8]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fe61 	bl	800132c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	dbf1      	blt.n	800165c <_write+0x12>
  }
  return len;
 8001678:	687b      	ldr	r3, [r7, #4]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_close>:

int _close(int file)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016aa:	605a      	str	r2, [r3, #4]
  return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <_isatty>:

int _isatty(int file)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <_sbrk+0x5c>)
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <_sbrk+0x60>)
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <_sbrk+0x64>)
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <_sbrk+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	429a      	cmp	r2, r3
 800171a:	d207      	bcs.n	800172c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800171c:	f003 fb84 	bl	8004e28 <__errno>
 8001720:	4603      	mov	r3, r0
 8001722:	220c      	movs	r2, #12
 8001724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	e009      	b.n	8001740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <_sbrk+0x64>)
 800173c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20020000 	.word	0x20020000
 800174c:	00000400 	.word	0x00000400
 8001750:	2000057c 	.word	0x2000057c
 8001754:	20000f80 	.word	0x20000f80

08001758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <SystemInit+0x20>)
 800175e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <SystemInit+0x20>)
 8001764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800177c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001780:	f7ff ffea 	bl	8001758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001784:	480c      	ldr	r0, [pc, #48]	; (80017b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001786:	490d      	ldr	r1, [pc, #52]	; (80017bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800178c:	e002      	b.n	8001794 <LoopCopyDataInit>

0800178e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001792:	3304      	adds	r3, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001798:	d3f9      	bcc.n	800178e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800179c:	4c0a      	ldr	r4, [pc, #40]	; (80017c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a0:	e001      	b.n	80017a6 <LoopFillZerobss>

080017a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a4:	3204      	adds	r2, #4

080017a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a8:	d3fb      	bcc.n	80017a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017aa:	f003 fb43 	bl	8004e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ae:	f7ff fbc9 	bl	8000f44 <main>
  bx  lr    
 80017b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017bc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80017c0:	080061a8 	.word	0x080061a8
  ldr r2, =_sbss
 80017c4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80017c8:	20000f80 	.word	0x20000f80

080017cc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017cc:	e7fe      	b.n	80017cc <DMA1_Stream0_IRQHandler>
	...

080017d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_Init+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0d      	ldr	r2, [pc, #52]	; (8001810 <HAL_Init+0x40>)
 80017da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_Init+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <HAL_Init+0x40>)
 80017e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <HAL_Init+0x40>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a07      	ldr	r2, [pc, #28]	; (8001810 <HAL_Init+0x40>)
 80017f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f8:	2003      	movs	r0, #3
 80017fa:	f000 fdbb 	bl	8002374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fe:	2000      	movs	r0, #0
 8001800:	f000 f808 	bl	8001814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001804:	f7ff fdf4 	bl	80013f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40023c00 	.word	0x40023c00

08001814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_InitTick+0x54>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_InitTick+0x58>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4619      	mov	r1, r3
 8001826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182a:	fbb3 f3f1 	udiv	r3, r3, r1
 800182e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fdd3 	bl	80023de <HAL_SYSTICK_Config>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e00e      	b.n	8001860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b0f      	cmp	r3, #15
 8001846:	d80a      	bhi.n	800185e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001848:	2200      	movs	r2, #0
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f000 fd9b 	bl	800238a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001854:	4a06      	ldr	r2, [pc, #24]	; (8001870 <HAL_InitTick+0x5c>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e000      	b.n	8001860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000010 	.word	0x20000010
 800186c:	20000018 	.word	0x20000018
 8001870:	20000014 	.word	0x20000014

08001874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x20>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x24>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4413      	add	r3, r2
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <HAL_IncTick+0x24>)
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000018 	.word	0x20000018
 8001898:	20000580 	.word	0x20000580

0800189c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_GetTick+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000580 	.word	0x20000580

080018b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff ffee 	bl	800189c <HAL_GetTick>
 80018c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d005      	beq.n	80018da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_Delay+0x44>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018da:	bf00      	nop
 80018dc:	f7ff ffde 	bl	800189c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d8f7      	bhi.n	80018dc <HAL_Delay+0x28>
  {
  }
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000018 	.word	0x20000018

080018fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e033      	b.n	800197a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff fd90 	bl	8001440 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	2b00      	cmp	r3, #0
 8001938:	d118      	bne.n	800196c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001942:	f023 0302 	bic.w	r3, r3, #2
 8001946:	f043 0202 	orr.w	r2, r3, #2
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 fb3a 	bl	8001fc8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f023 0303 	bic.w	r3, r3, #3
 8001962:	f043 0201 	orr.w	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
 800196a:	e001      	b.n	8001970 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_ADC_Start_IT+0x1a>
 800199a:	2302      	movs	r3, #2
 800199c:	e0a1      	b.n	8001ae2 <HAL_ADC_Start_IT+0x15e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d018      	beq.n	80019e6 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0201 	orr.w	r2, r2, #1
 80019c2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019c4:	4b4a      	ldr	r3, [pc, #296]	; (8001af0 <HAL_ADC_Start_IT+0x16c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a4a      	ldr	r2, [pc, #296]	; (8001af4 <HAL_ADC_Start_IT+0x170>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	0c9a      	lsrs	r2, r3, #18
 80019d0:	4613      	mov	r3, r2
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	4413      	add	r3, r2
 80019d6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80019d8:	e002      	b.n	80019e0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	3b01      	subs	r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f9      	bne.n	80019da <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d169      	bne.n	8001ac8 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a32:	d106      	bne.n	8001a42 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	f023 0206 	bic.w	r2, r3, #6
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	645a      	str	r2, [r3, #68]	; 0x44
 8001a40:	e002      	b.n	8001a48 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a50:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <HAL_ADC_Start_IT+0x174>)
 8001a52:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a5c:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a6c:	f043 0320 	orr.w	r3, r3, #32
 8001a70:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 031f 	and.w	r3, r3, #31
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10f      	bne.n	8001a9e <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d129      	bne.n	8001ae0 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	e020      	b.n	8001ae0 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a16      	ldr	r2, [pc, #88]	; (8001afc <HAL_ADC_Start_IT+0x178>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d11b      	bne.n	8001ae0 <HAL_ADC_Start_IT+0x15c>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d114      	bne.n	8001ae0 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	e00b      	b.n	8001ae0 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f043 0210 	orr.w	r2, r3, #16
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad8:	f043 0201 	orr.w	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20000010 	.word	0x20000010
 8001af4:	431bde83 	.word	0x431bde83
 8001af8:	40012300 	.word	0x40012300
 8001afc:	40012000 	.word	0x40012000

08001b00 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f003 0320 	and.w	r3, r3, #32
 8001b2e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d049      	beq.n	8001bca <HAL_ADC_IRQHandler+0xca>
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d046      	beq.n	8001bca <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d105      	bne.n	8001b54 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d12b      	bne.n	8001bba <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d127      	bne.n	8001bba <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d006      	beq.n	8001b86 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d119      	bne.n	8001bba <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0220 	bic.w	r2, r2, #32
 8001b94:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d105      	bne.n	8001bba <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f043 0201 	orr.w	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff f9ac 	bl	8000f18 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f06f 0212 	mvn.w	r2, #18
 8001bc8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d057      	beq.n	8001c90 <HAL_ADC_IRQHandler+0x190>
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d054      	beq.n	8001c90 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d105      	bne.n	8001bfe <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d139      	bne.n	8001c80 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c12:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d006      	beq.n	8001c28 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d12b      	bne.n	8001c80 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d124      	bne.n	8001c80 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d11d      	bne.n	8001c80 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d119      	bne.n	8001c80 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c5a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d105      	bne.n	8001c80 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f043 0201 	orr.w	r2, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 fa9d 	bl	80021c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f06f 020c 	mvn.w	r2, #12
 8001c8e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d017      	beq.n	8001cd6 <HAL_ADC_IRQHandler+0x1d6>
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d014      	beq.n	8001cd6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d10d      	bne.n	8001cd6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f837 	bl	8001d3a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0201 	mvn.w	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ce4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d015      	beq.n	8001d18 <HAL_ADC_IRQHandler+0x218>
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d012      	beq.n	8001d18 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f043 0202 	orr.w	r2, r3, #2
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f06f 0220 	mvn.w	r2, #32
 8001d06:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f820 	bl	8001d4e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f06f 0220 	mvn.w	r2, #32
 8001d16:	601a      	str	r2, [r3, #0]
  }
}
 8001d18:	bf00      	nop
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x1c>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e113      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x244>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b09      	cmp	r3, #9
 8001d8e:	d925      	bls.n	8001ddc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68d9      	ldr	r1, [r3, #12]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	3b1e      	subs	r3, #30
 8001da6:	2207      	movs	r2, #7
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43da      	mvns	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	400a      	ands	r2, r1
 8001db4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68d9      	ldr	r1, [r3, #12]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	4603      	mov	r3, r0
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4403      	add	r3, r0
 8001dce:	3b1e      	subs	r3, #30
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	e022      	b.n	8001e22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6919      	ldr	r1, [r3, #16]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	461a      	mov	r2, r3
 8001dea:	4613      	mov	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	2207      	movs	r2, #7
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6919      	ldr	r1, [r3, #16]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	4618      	mov	r0, r3
 8001e12:	4603      	mov	r3, r0
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4403      	add	r3, r0
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d824      	bhi.n	8001e74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	3b05      	subs	r3, #5
 8001e3c:	221f      	movs	r2, #31
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	400a      	ands	r2, r1
 8001e4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	4618      	mov	r0, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	3b05      	subs	r3, #5
 8001e66:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	635a      	str	r2, [r3, #52]	; 0x34
 8001e72:	e04c      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b0c      	cmp	r3, #12
 8001e7a:	d824      	bhi.n	8001ec6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3b23      	subs	r3, #35	; 0x23
 8001e8e:	221f      	movs	r2, #31
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43da      	mvns	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	400a      	ands	r2, r1
 8001e9c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3b23      	subs	r3, #35	; 0x23
 8001eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ec4:	e023      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b41      	subs	r3, #65	; 0x41
 8001ed8:	221f      	movs	r2, #31
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	3b41      	subs	r3, #65	; 0x41
 8001f02:	fa00 f203 	lsl.w	r2, r0, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f0e:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <HAL_ADC_ConfigChannel+0x250>)
 8001f10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a28      	ldr	r2, [pc, #160]	; (8001fb8 <HAL_ADC_ConfigChannel+0x254>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d10f      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x1d8>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b12      	cmp	r3, #18
 8001f22:	d10b      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1d      	ldr	r2, [pc, #116]	; (8001fb8 <HAL_ADC_ConfigChannel+0x254>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d12b      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x23a>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1c      	ldr	r2, [pc, #112]	; (8001fbc <HAL_ADC_ConfigChannel+0x258>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d003      	beq.n	8001f58 <HAL_ADC_ConfigChannel+0x1f4>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b11      	cmp	r3, #17
 8001f56:	d122      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <HAL_ADC_ConfigChannel+0x258>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d111      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_ADC_ConfigChannel+0x25c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a11      	ldr	r2, [pc, #68]	; (8001fc4 <HAL_ADC_ConfigChannel+0x260>)
 8001f80:	fba2 2303 	umull	r2, r3, r2, r3
 8001f84:	0c9a      	lsrs	r2, r3, #18
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f90:	e002      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f9      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40012300 	.word	0x40012300
 8001fb8:	40012000 	.word	0x40012000
 8001fbc:	10000012 	.word	0x10000012
 8001fc0:	20000010 	.word	0x20000010
 8001fc4:	431bde83 	.word	0x431bde83

08001fc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd0:	4b79      	ldr	r3, [pc, #484]	; (80021b8 <ADC_Init+0x1f0>)
 8001fd2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ffc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	021a      	lsls	r2, r3, #8
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6899      	ldr	r1, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	4a58      	ldr	r2, [pc, #352]	; (80021bc <ADC_Init+0x1f4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d022      	beq.n	80020a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800206e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6899      	ldr	r1, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002090:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6899      	ldr	r1, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	e00f      	b.n	80020c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0202 	bic.w	r2, r2, #2
 80020d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6899      	ldr	r1, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7e1b      	ldrb	r3, [r3, #24]
 80020e0:	005a      	lsls	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01b      	beq.n	800212c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002102:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002112:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	3b01      	subs	r3, #1
 8002120:	035a      	lsls	r2, r3, #13
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	e007      	b.n	800213c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800213a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	3b01      	subs	r3, #1
 8002158:	051a      	lsls	r2, r3, #20
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002170:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6899      	ldr	r1, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800217e:	025a      	lsls	r2, r3, #9
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002196:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6899      	ldr	r1, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	029a      	lsls	r2, r3, #10
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	609a      	str	r2, [r3, #8]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	40012300 	.word	0x40012300
 80021bc:	0f000001 	.word	0x0f000001

080021c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <__NVIC_SetPriorityGrouping+0x44>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021f0:	4013      	ands	r3, r2
 80021f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002206:	4a04      	ldr	r2, [pc, #16]	; (8002218 <__NVIC_SetPriorityGrouping+0x44>)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	60d3      	str	r3, [r2, #12]
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002220:	4b04      	ldr	r3, [pc, #16]	; (8002234 <__NVIC_GetPriorityGrouping+0x18>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	f003 0307 	and.w	r3, r3, #7
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	2b00      	cmp	r3, #0
 8002248:	db0b      	blt.n	8002262 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	f003 021f 	and.w	r2, r3, #31
 8002250:	4907      	ldr	r1, [pc, #28]	; (8002270 <__NVIC_EnableIRQ+0x38>)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	2001      	movs	r0, #1
 800225a:	fa00 f202 	lsl.w	r2, r0, r2
 800225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000e100 	.word	0xe000e100

08002274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	6039      	str	r1, [r7, #0]
 800227e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002284:	2b00      	cmp	r3, #0
 8002286:	db0a      	blt.n	800229e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	b2da      	uxtb	r2, r3
 800228c:	490c      	ldr	r1, [pc, #48]	; (80022c0 <__NVIC_SetPriority+0x4c>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	0112      	lsls	r2, r2, #4
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	440b      	add	r3, r1
 8002298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800229c:	e00a      	b.n	80022b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4908      	ldr	r1, [pc, #32]	; (80022c4 <__NVIC_SetPriority+0x50>)
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	3b04      	subs	r3, #4
 80022ac:	0112      	lsls	r2, r2, #4
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	440b      	add	r3, r1
 80022b2:	761a      	strb	r2, [r3, #24]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000e100 	.word	0xe000e100
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b089      	sub	sp, #36	; 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f1c3 0307 	rsb	r3, r3, #7
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	bf28      	it	cs
 80022e6:	2304      	movcs	r3, #4
 80022e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3304      	adds	r3, #4
 80022ee:	2b06      	cmp	r3, #6
 80022f0:	d902      	bls.n	80022f8 <NVIC_EncodePriority+0x30>
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3b03      	subs	r3, #3
 80022f6:	e000      	b.n	80022fa <NVIC_EncodePriority+0x32>
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43da      	mvns	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	401a      	ands	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002310:	f04f 31ff 	mov.w	r1, #4294967295
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	43d9      	mvns	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	4313      	orrs	r3, r2
         );
}
 8002322:	4618      	mov	r0, r3
 8002324:	3724      	adds	r7, #36	; 0x24
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3b01      	subs	r3, #1
 800233c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002340:	d301      	bcc.n	8002346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002342:	2301      	movs	r3, #1
 8002344:	e00f      	b.n	8002366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002346:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <SysTick_Config+0x40>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800234e:	210f      	movs	r1, #15
 8002350:	f04f 30ff 	mov.w	r0, #4294967295
 8002354:	f7ff ff8e 	bl	8002274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <SysTick_Config+0x40>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235e:	4b04      	ldr	r3, [pc, #16]	; (8002370 <SysTick_Config+0x40>)
 8002360:	2207      	movs	r2, #7
 8002362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	e000e010 	.word	0xe000e010

08002374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff29 	bl	80021d4 <__NVIC_SetPriorityGrouping>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800238a:	b580      	push	{r7, lr}
 800238c:	b086      	sub	sp, #24
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800239c:	f7ff ff3e 	bl	800221c <__NVIC_GetPriorityGrouping>
 80023a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	6978      	ldr	r0, [r7, #20]
 80023a8:	f7ff ff8e 	bl	80022c8 <NVIC_EncodePriority>
 80023ac:	4602      	mov	r2, r0
 80023ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff5d 	bl	8002274 <__NVIC_SetPriority>
}
 80023ba:	bf00      	nop
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff31 	bl	8002238 <__NVIC_EnableIRQ>
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff ffa2 	bl	8002330 <SysTick_Config>
 80023ec:	4603      	mov	r3, r0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	e159      	b.n	80026c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002414:	2201      	movs	r2, #1
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	429a      	cmp	r2, r3
 800242e:	f040 8148 	bne.w	80026c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d005      	beq.n	800244a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002446:	2b02      	cmp	r3, #2
 8002448:	d130      	bne.n	80024ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	2203      	movs	r2, #3
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002480:	2201      	movs	r2, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 0201 	and.w	r2, r3, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d017      	beq.n	80024e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d123      	bne.n	800253c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	08da      	lsrs	r2, r3, #3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3208      	adds	r2, #8
 80024fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	220f      	movs	r2, #15
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	08da      	lsrs	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3208      	adds	r2, #8
 8002536:	69b9      	ldr	r1, [r7, #24]
 8002538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0203 	and.w	r2, r3, #3
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80a2 	beq.w	80026c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	4b57      	ldr	r3, [pc, #348]	; (80026e0 <HAL_GPIO_Init+0x2e8>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	4a56      	ldr	r2, [pc, #344]	; (80026e0 <HAL_GPIO_Init+0x2e8>)
 8002588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800258c:	6453      	str	r3, [r2, #68]	; 0x44
 800258e:	4b54      	ldr	r3, [pc, #336]	; (80026e0 <HAL_GPIO_Init+0x2e8>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800259a:	4a52      	ldr	r2, [pc, #328]	; (80026e4 <HAL_GPIO_Init+0x2ec>)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	3302      	adds	r3, #2
 80025a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	220f      	movs	r2, #15
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a49      	ldr	r2, [pc, #292]	; (80026e8 <HAL_GPIO_Init+0x2f0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d019      	beq.n	80025fa <HAL_GPIO_Init+0x202>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a48      	ldr	r2, [pc, #288]	; (80026ec <HAL_GPIO_Init+0x2f4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <HAL_GPIO_Init+0x1fe>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a47      	ldr	r2, [pc, #284]	; (80026f0 <HAL_GPIO_Init+0x2f8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00d      	beq.n	80025f2 <HAL_GPIO_Init+0x1fa>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a46      	ldr	r2, [pc, #280]	; (80026f4 <HAL_GPIO_Init+0x2fc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d007      	beq.n	80025ee <HAL_GPIO_Init+0x1f6>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a45      	ldr	r2, [pc, #276]	; (80026f8 <HAL_GPIO_Init+0x300>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d101      	bne.n	80025ea <HAL_GPIO_Init+0x1f2>
 80025e6:	2304      	movs	r3, #4
 80025e8:	e008      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025ea:	2307      	movs	r3, #7
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025ee:	2303      	movs	r3, #3
 80025f0:	e004      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e002      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025fa:	2300      	movs	r3, #0
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	f002 0203 	and.w	r2, r2, #3
 8002602:	0092      	lsls	r2, r2, #2
 8002604:	4093      	lsls	r3, r2
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800260c:	4935      	ldr	r1, [pc, #212]	; (80026e4 <HAL_GPIO_Init+0x2ec>)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	3302      	adds	r3, #2
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261a:	4b38      	ldr	r3, [pc, #224]	; (80026fc <HAL_GPIO_Init+0x304>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800263e:	4a2f      	ldr	r2, [pc, #188]	; (80026fc <HAL_GPIO_Init+0x304>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002644:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <HAL_GPIO_Init+0x304>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002668:	4a24      	ldr	r2, [pc, #144]	; (80026fc <HAL_GPIO_Init+0x304>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800266e:	4b23      	ldr	r3, [pc, #140]	; (80026fc <HAL_GPIO_Init+0x304>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002692:	4a1a      	ldr	r2, [pc, #104]	; (80026fc <HAL_GPIO_Init+0x304>)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002698:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_GPIO_Init+0x304>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026bc:	4a0f      	ldr	r2, [pc, #60]	; (80026fc <HAL_GPIO_Init+0x304>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3301      	adds	r3, #1
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	2b0f      	cmp	r3, #15
 80026cc:	f67f aea2 	bls.w	8002414 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3724      	adds	r7, #36	; 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40013800 	.word	0x40013800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40020800 	.word	0x40020800
 80026f4:	40020c00 	.word	0x40020c00
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40013c00 	.word	0x40013c00

08002700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
 800270c:	4613      	mov	r3, r2
 800270e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002710:	787b      	ldrb	r3, [r7, #1]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800271c:	e003      	b.n	8002726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800271e:	887b      	ldrh	r3, [r7, #2]
 8002720:	041a      	lsls	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	619a      	str	r2, [r3, #24]
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e267      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d075      	beq.n	800283e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002752:	4b88      	ldr	r3, [pc, #544]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b04      	cmp	r3, #4
 800275c:	d00c      	beq.n	8002778 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275e:	4b85      	ldr	r3, [pc, #532]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002766:	2b08      	cmp	r3, #8
 8002768:	d112      	bne.n	8002790 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276a:	4b82      	ldr	r3, [pc, #520]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002776:	d10b      	bne.n	8002790 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	4b7e      	ldr	r3, [pc, #504]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d05b      	beq.n	800283c <HAL_RCC_OscConfig+0x108>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d157      	bne.n	800283c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e242      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002798:	d106      	bne.n	80027a8 <HAL_RCC_OscConfig+0x74>
 800279a:	4b76      	ldr	r3, [pc, #472]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a75      	ldr	r2, [pc, #468]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	e01d      	b.n	80027e4 <HAL_RCC_OscConfig+0xb0>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x98>
 80027b2:	4b70      	ldr	r3, [pc, #448]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6f      	ldr	r2, [pc, #444]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b6d      	ldr	r3, [pc, #436]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a6c      	ldr	r2, [pc, #432]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e00b      	b.n	80027e4 <HAL_RCC_OscConfig+0xb0>
 80027cc:	4b69      	ldr	r3, [pc, #420]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a68      	ldr	r2, [pc, #416]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	4b66      	ldr	r3, [pc, #408]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a65      	ldr	r2, [pc, #404]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d013      	beq.n	8002814 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7ff f856 	bl	800189c <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f4:	f7ff f852 	bl	800189c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	; 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e207      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	4b5b      	ldr	r3, [pc, #364]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0xc0>
 8002812:	e014      	b.n	800283e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7ff f842 	bl	800189c <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800281c:	f7ff f83e 	bl	800189c <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	; 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e1f3      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282e:	4b51      	ldr	r3, [pc, #324]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0xe8>
 800283a:	e000      	b.n	800283e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d063      	beq.n	8002912 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800284a:	4b4a      	ldr	r3, [pc, #296]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002856:	4b47      	ldr	r3, [pc, #284]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800285e:	2b08      	cmp	r3, #8
 8002860:	d11c      	bne.n	800289c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002862:	4b44      	ldr	r3, [pc, #272]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d116      	bne.n	800289c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286e:	4b41      	ldr	r3, [pc, #260]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_RCC_OscConfig+0x152>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d001      	beq.n	8002886 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e1c7      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002886:	4b3b      	ldr	r3, [pc, #236]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4937      	ldr	r1, [pc, #220]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289a:	e03a      	b.n	8002912 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d020      	beq.n	80028e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a4:	4b34      	ldr	r3, [pc, #208]	; (8002978 <HAL_RCC_OscConfig+0x244>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7fe fff7 	bl	800189c <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b2:	f7fe fff3 	bl	800189c <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e1a8      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c4:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d0:	4b28      	ldr	r3, [pc, #160]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4925      	ldr	r1, [pc, #148]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	600b      	str	r3, [r1, #0]
 80028e4:	e015      	b.n	8002912 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e6:	4b24      	ldr	r3, [pc, #144]	; (8002978 <HAL_RCC_OscConfig+0x244>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe ffd6 	bl	800189c <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f4:	f7fe ffd2 	bl	800189c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e187      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002906:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d036      	beq.n	800298c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d016      	beq.n	8002954 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_RCC_OscConfig+0x248>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7fe ffb6 	bl	800189c <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002934:	f7fe ffb2 	bl	800189c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e167      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002946:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x200>
 8002952:	e01b      	b.n	800298c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <HAL_RCC_OscConfig+0x248>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295a:	f7fe ff9f 	bl	800189c <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	e00e      	b.n	8002980 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002962:	f7fe ff9b 	bl	800189c <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d907      	bls.n	8002980 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e150      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
 8002974:	40023800 	.word	0x40023800
 8002978:	42470000 	.word	0x42470000
 800297c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002980:	4b88      	ldr	r3, [pc, #544]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ea      	bne.n	8002962 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8097 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299e:	4b81      	ldr	r3, [pc, #516]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10f      	bne.n	80029ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	4b7d      	ldr	r3, [pc, #500]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	4a7c      	ldr	r2, [pc, #496]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ba:	4b7a      	ldr	r3, [pc, #488]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ca:	4b77      	ldr	r3, [pc, #476]	; (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d118      	bne.n	8002a08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d6:	4b74      	ldr	r3, [pc, #464]	; (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a73      	ldr	r2, [pc, #460]	; (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e2:	f7fe ff5b 	bl	800189c <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ea:	f7fe ff57 	bl	800189c <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e10c      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	4b6a      	ldr	r3, [pc, #424]	; (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_OscConfig+0x2ea>
 8002a10:	4b64      	ldr	r3, [pc, #400]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	4a63      	ldr	r2, [pc, #396]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1c:	e01c      	b.n	8002a58 <HAL_RCC_OscConfig+0x324>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b05      	cmp	r3, #5
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x30c>
 8002a26:	4b5f      	ldr	r3, [pc, #380]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	4a5e      	ldr	r2, [pc, #376]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	f043 0304 	orr.w	r3, r3, #4
 8002a30:	6713      	str	r3, [r2, #112]	; 0x70
 8002a32:	4b5c      	ldr	r3, [pc, #368]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	4a5b      	ldr	r2, [pc, #364]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0x324>
 8002a40:	4b58      	ldr	r3, [pc, #352]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	4a57      	ldr	r2, [pc, #348]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4c:	4b55      	ldr	r3, [pc, #340]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	4a54      	ldr	r2, [pc, #336]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a52:	f023 0304 	bic.w	r3, r3, #4
 8002a56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d015      	beq.n	8002a8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7fe ff1c 	bl	800189c <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a68:	f7fe ff18 	bl	800189c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e0cb      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7e:	4b49      	ldr	r3, [pc, #292]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0ee      	beq.n	8002a68 <HAL_RCC_OscConfig+0x334>
 8002a8a:	e014      	b.n	8002ab6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8c:	f7fe ff06 	bl	800189c <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a94:	f7fe ff02 	bl	800189c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e0b5      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aaa:	4b3e      	ldr	r3, [pc, #248]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1ee      	bne.n	8002a94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ab6:	7dfb      	ldrb	r3, [r7, #23]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d105      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002abc:	4b39      	ldr	r3, [pc, #228]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	4a38      	ldr	r2, [pc, #224]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80a1 	beq.w	8002c14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ad2:	4b34      	ldr	r3, [pc, #208]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d05c      	beq.n	8002b98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d141      	bne.n	8002b6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae6:	4b31      	ldr	r3, [pc, #196]	; (8002bac <HAL_RCC_OscConfig+0x478>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fe fed6 	bl	800189c <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fe fed2 	bl	800189c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e087      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b06:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	019b      	lsls	r3, r3, #6
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	085b      	lsrs	r3, r3, #1
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	061b      	lsls	r3, r3, #24
 8002b36:	491b      	ldr	r1, [pc, #108]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_RCC_OscConfig+0x478>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7fe feab 	bl	800189c <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7fe fea7 	bl	800189c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e05c      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x416>
 8002b68:	e054      	b.n	8002c14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <HAL_RCC_OscConfig+0x478>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe fe94 	bl	800189c <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fe90 	bl	800189c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e045      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x444>
 8002b96:	e03d      	b.n	8002c14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e038      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <HAL_RCC_OscConfig+0x4ec>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d028      	beq.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d121      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d11a      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002be0:	4013      	ands	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002be6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d111      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	085b      	lsrs	r3, r3, #1
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800

08002c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0cc      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c38:	4b68      	ldr	r3, [pc, #416]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d90c      	bls.n	8002c60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c46:	4b65      	ldr	r3, [pc, #404]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b63      	ldr	r3, [pc, #396]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0b8      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d020      	beq.n	8002cae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c78:	4b59      	ldr	r3, [pc, #356]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4a58      	ldr	r2, [pc, #352]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c90:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4a52      	ldr	r2, [pc, #328]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c9c:	4b50      	ldr	r3, [pc, #320]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	494d      	ldr	r1, [pc, #308]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d044      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	4b47      	ldr	r3, [pc, #284]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d119      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e07f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce2:	4b3f      	ldr	r3, [pc, #252]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e06f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf2:	4b3b      	ldr	r3, [pc, #236]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e067      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d02:	4b37      	ldr	r3, [pc, #220]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f023 0203 	bic.w	r2, r3, #3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4934      	ldr	r1, [pc, #208]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d14:	f7fe fdc2 	bl	800189c <HAL_GetTick>
 8002d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1a:	e00a      	b.n	8002d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1c:	f7fe fdbe 	bl	800189c <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e04f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 020c 	and.w	r2, r3, #12
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d1eb      	bne.n	8002d1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d44:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d20c      	bcs.n	8002d6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e032      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d78:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4916      	ldr	r1, [pc, #88]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d96:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	490e      	ldr	r1, [pc, #56]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002daa:	f000 f821 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8002dae:	4602      	mov	r2, r0
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	490a      	ldr	r1, [pc, #40]	; (8002de4 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	5ccb      	ldrb	r3, [r1, r3]
 8002dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc2:	4a09      	ldr	r2, [pc, #36]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <HAL_RCC_ClockConfig+0x1c8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe fd22 	bl	8001814 <HAL_InitTick>

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023c00 	.word	0x40023c00
 8002de0:	40023800 	.word	0x40023800
 8002de4:	0800611c 	.word	0x0800611c
 8002de8:	20000010 	.word	0x20000010
 8002dec:	20000014 	.word	0x20000014

08002df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df4:	b094      	sub	sp, #80	; 0x50
 8002df6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e00:	2300      	movs	r3, #0
 8002e02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e08:	4b79      	ldr	r3, [pc, #484]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d00d      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x40>
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	f200 80e1 	bhi.w	8002fdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x34>
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d003      	beq.n	8002e2a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e22:	e0db      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e24:	4b73      	ldr	r3, [pc, #460]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e26:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e28:	e0db      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e2a:	4b73      	ldr	r3, [pc, #460]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e2e:	e0d8      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e30:	4b6f      	ldr	r3, [pc, #444]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e38:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e3a:	4b6d      	ldr	r3, [pc, #436]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d063      	beq.n	8002f0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e46:	4b6a      	ldr	r3, [pc, #424]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	099b      	lsrs	r3, r3, #6
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e58:	633b      	str	r3, [r7, #48]	; 0x30
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e62:	4622      	mov	r2, r4
 8002e64:	462b      	mov	r3, r5
 8002e66:	f04f 0000 	mov.w	r0, #0
 8002e6a:	f04f 0100 	mov.w	r1, #0
 8002e6e:	0159      	lsls	r1, r3, #5
 8002e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e74:	0150      	lsls	r0, r2, #5
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4621      	mov	r1, r4
 8002e7c:	1a51      	subs	r1, r2, r1
 8002e7e:	6139      	str	r1, [r7, #16]
 8002e80:	4629      	mov	r1, r5
 8002e82:	eb63 0301 	sbc.w	r3, r3, r1
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e94:	4659      	mov	r1, fp
 8002e96:	018b      	lsls	r3, r1, #6
 8002e98:	4651      	mov	r1, sl
 8002e9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e9e:	4651      	mov	r1, sl
 8002ea0:	018a      	lsls	r2, r1, #6
 8002ea2:	4651      	mov	r1, sl
 8002ea4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ea8:	4659      	mov	r1, fp
 8002eaa:	eb63 0901 	sbc.w	r9, r3, r1
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ec2:	4690      	mov	r8, r2
 8002ec4:	4699      	mov	r9, r3
 8002ec6:	4623      	mov	r3, r4
 8002ec8:	eb18 0303 	adds.w	r3, r8, r3
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	462b      	mov	r3, r5
 8002ed0:	eb49 0303 	adc.w	r3, r9, r3
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	024b      	lsls	r3, r1, #9
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002eec:	4621      	mov	r1, r4
 8002eee:	024a      	lsls	r2, r1, #9
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002efa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002efc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f00:	f7fd fe8c 	bl	8000c1c <__aeabi_uldivmod>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4613      	mov	r3, r2
 8002f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f0c:	e058      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0e:	4b38      	ldr	r3, [pc, #224]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	099b      	lsrs	r3, r3, #6
 8002f14:	2200      	movs	r2, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	4611      	mov	r1, r2
 8002f1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f1e:	623b      	str	r3, [r7, #32]
 8002f20:	2300      	movs	r3, #0
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
 8002f24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f28:	4642      	mov	r2, r8
 8002f2a:	464b      	mov	r3, r9
 8002f2c:	f04f 0000 	mov.w	r0, #0
 8002f30:	f04f 0100 	mov.w	r1, #0
 8002f34:	0159      	lsls	r1, r3, #5
 8002f36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f3a:	0150      	lsls	r0, r2, #5
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4641      	mov	r1, r8
 8002f42:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f46:	4649      	mov	r1, r9
 8002f48:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f60:	ebb2 040a 	subs.w	r4, r2, sl
 8002f64:	eb63 050b 	sbc.w	r5, r3, fp
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	00eb      	lsls	r3, r5, #3
 8002f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f76:	00e2      	lsls	r2, r4, #3
 8002f78:	4614      	mov	r4, r2
 8002f7a:	461d      	mov	r5, r3
 8002f7c:	4643      	mov	r3, r8
 8002f7e:	18e3      	adds	r3, r4, r3
 8002f80:	603b      	str	r3, [r7, #0]
 8002f82:	464b      	mov	r3, r9
 8002f84:	eb45 0303 	adc.w	r3, r5, r3
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f96:	4629      	mov	r1, r5
 8002f98:	028b      	lsls	r3, r1, #10
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	028a      	lsls	r2, r1, #10
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002faa:	2200      	movs	r2, #0
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	61fa      	str	r2, [r7, #28]
 8002fb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fb4:	f7fd fe32 	bl	8000c1c <__aeabi_uldivmod>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	0c1b      	lsrs	r3, r3, #16
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	3301      	adds	r3, #1
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002fd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fda:	e002      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3750      	adds	r7, #80	; 0x50
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	00f42400 	.word	0x00f42400
 8002ff8:	007a1200 	.word	0x007a1200

08002ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <HAL_RCC_GetHCLKFreq+0x14>)
 8003002:	681b      	ldr	r3, [r3, #0]
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20000010 	.word	0x20000010

08003014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003018:	f7ff fff0 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 800301c:	4602      	mov	r2, r0
 800301e:	4b05      	ldr	r3, [pc, #20]	; (8003034 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	0a9b      	lsrs	r3, r3, #10
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	4903      	ldr	r1, [pc, #12]	; (8003038 <HAL_RCC_GetPCLK1Freq+0x24>)
 800302a:	5ccb      	ldrb	r3, [r1, r3]
 800302c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003030:	4618      	mov	r0, r3
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40023800 	.word	0x40023800
 8003038:	0800612c 	.word	0x0800612c

0800303c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003040:	f7ff ffdc 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 8003044:	4602      	mov	r2, r0
 8003046:	4b05      	ldr	r3, [pc, #20]	; (800305c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	0b5b      	lsrs	r3, r3, #13
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	4903      	ldr	r1, [pc, #12]	; (8003060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003052:	5ccb      	ldrb	r3, [r1, r3]
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003058:	4618      	mov	r0, r3
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40023800 	.word	0x40023800
 8003060:	0800612c 	.word	0x0800612c

08003064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e041      	b.n	80030fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fe fa24 	bl	80014d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3304      	adds	r3, #4
 80030a0:	4619      	mov	r1, r3
 80030a2:	4610      	mov	r0, r2
 80030a4:	f000 f8f4 	bl	8003290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_TIM_ConfigClockSource+0x1c>
 800311a:	2302      	movs	r3, #2
 800311c:	e0b4      	b.n	8003288 <HAL_TIM_ConfigClockSource+0x186>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2202      	movs	r2, #2
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800313c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003144:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003156:	d03e      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0xd4>
 8003158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800315c:	f200 8087 	bhi.w	800326e <HAL_TIM_ConfigClockSource+0x16c>
 8003160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003164:	f000 8086 	beq.w	8003274 <HAL_TIM_ConfigClockSource+0x172>
 8003168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316c:	d87f      	bhi.n	800326e <HAL_TIM_ConfigClockSource+0x16c>
 800316e:	2b70      	cmp	r3, #112	; 0x70
 8003170:	d01a      	beq.n	80031a8 <HAL_TIM_ConfigClockSource+0xa6>
 8003172:	2b70      	cmp	r3, #112	; 0x70
 8003174:	d87b      	bhi.n	800326e <HAL_TIM_ConfigClockSource+0x16c>
 8003176:	2b60      	cmp	r3, #96	; 0x60
 8003178:	d050      	beq.n	800321c <HAL_TIM_ConfigClockSource+0x11a>
 800317a:	2b60      	cmp	r3, #96	; 0x60
 800317c:	d877      	bhi.n	800326e <HAL_TIM_ConfigClockSource+0x16c>
 800317e:	2b50      	cmp	r3, #80	; 0x50
 8003180:	d03c      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0xfa>
 8003182:	2b50      	cmp	r3, #80	; 0x50
 8003184:	d873      	bhi.n	800326e <HAL_TIM_ConfigClockSource+0x16c>
 8003186:	2b40      	cmp	r3, #64	; 0x40
 8003188:	d058      	beq.n	800323c <HAL_TIM_ConfigClockSource+0x13a>
 800318a:	2b40      	cmp	r3, #64	; 0x40
 800318c:	d86f      	bhi.n	800326e <HAL_TIM_ConfigClockSource+0x16c>
 800318e:	2b30      	cmp	r3, #48	; 0x30
 8003190:	d064      	beq.n	800325c <HAL_TIM_ConfigClockSource+0x15a>
 8003192:	2b30      	cmp	r3, #48	; 0x30
 8003194:	d86b      	bhi.n	800326e <HAL_TIM_ConfigClockSource+0x16c>
 8003196:	2b20      	cmp	r3, #32
 8003198:	d060      	beq.n	800325c <HAL_TIM_ConfigClockSource+0x15a>
 800319a:	2b20      	cmp	r3, #32
 800319c:	d867      	bhi.n	800326e <HAL_TIM_ConfigClockSource+0x16c>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d05c      	beq.n	800325c <HAL_TIM_ConfigClockSource+0x15a>
 80031a2:	2b10      	cmp	r3, #16
 80031a4:	d05a      	beq.n	800325c <HAL_TIM_ConfigClockSource+0x15a>
 80031a6:	e062      	b.n	800326e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031b8:	f000 f970 	bl	800349c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	609a      	str	r2, [r3, #8]
      break;
 80031d4:	e04f      	b.n	8003276 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031e6:	f000 f959 	bl	800349c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031f8:	609a      	str	r2, [r3, #8]
      break;
 80031fa:	e03c      	b.n	8003276 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003208:	461a      	mov	r2, r3
 800320a:	f000 f8cd 	bl	80033a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2150      	movs	r1, #80	; 0x50
 8003214:	4618      	mov	r0, r3
 8003216:	f000 f926 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 800321a:	e02c      	b.n	8003276 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003228:	461a      	mov	r2, r3
 800322a:	f000 f8ec 	bl	8003406 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2160      	movs	r1, #96	; 0x60
 8003234:	4618      	mov	r0, r3
 8003236:	f000 f916 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 800323a:	e01c      	b.n	8003276 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003248:	461a      	mov	r2, r3
 800324a:	f000 f8ad 	bl	80033a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2140      	movs	r1, #64	; 0x40
 8003254:	4618      	mov	r0, r3
 8003256:	f000 f906 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 800325a:	e00c      	b.n	8003276 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4619      	mov	r1, r3
 8003266:	4610      	mov	r0, r2
 8003268:	f000 f8fd 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 800326c:	e003      	b.n	8003276 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
      break;
 8003272:	e000      	b.n	8003276 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003274:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003286:	7bfb      	ldrb	r3, [r7, #15]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a3a      	ldr	r2, [pc, #232]	; (800338c <TIM_Base_SetConfig+0xfc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00f      	beq.n	80032c8 <TIM_Base_SetConfig+0x38>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ae:	d00b      	beq.n	80032c8 <TIM_Base_SetConfig+0x38>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a37      	ldr	r2, [pc, #220]	; (8003390 <TIM_Base_SetConfig+0x100>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d007      	beq.n	80032c8 <TIM_Base_SetConfig+0x38>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a36      	ldr	r2, [pc, #216]	; (8003394 <TIM_Base_SetConfig+0x104>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <TIM_Base_SetConfig+0x38>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a35      	ldr	r2, [pc, #212]	; (8003398 <TIM_Base_SetConfig+0x108>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d108      	bne.n	80032da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a2b      	ldr	r2, [pc, #172]	; (800338c <TIM_Base_SetConfig+0xfc>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01b      	beq.n	800331a <TIM_Base_SetConfig+0x8a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e8:	d017      	beq.n	800331a <TIM_Base_SetConfig+0x8a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a28      	ldr	r2, [pc, #160]	; (8003390 <TIM_Base_SetConfig+0x100>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <TIM_Base_SetConfig+0x8a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a27      	ldr	r2, [pc, #156]	; (8003394 <TIM_Base_SetConfig+0x104>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00f      	beq.n	800331a <TIM_Base_SetConfig+0x8a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a26      	ldr	r2, [pc, #152]	; (8003398 <TIM_Base_SetConfig+0x108>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00b      	beq.n	800331a <TIM_Base_SetConfig+0x8a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a25      	ldr	r2, [pc, #148]	; (800339c <TIM_Base_SetConfig+0x10c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d007      	beq.n	800331a <TIM_Base_SetConfig+0x8a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a24      	ldr	r2, [pc, #144]	; (80033a0 <TIM_Base_SetConfig+0x110>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d003      	beq.n	800331a <TIM_Base_SetConfig+0x8a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a23      	ldr	r2, [pc, #140]	; (80033a4 <TIM_Base_SetConfig+0x114>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d108      	bne.n	800332c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a0e      	ldr	r2, [pc, #56]	; (800338c <TIM_Base_SetConfig+0xfc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d103      	bne.n	8003360 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b01      	cmp	r3, #1
 8003370:	d105      	bne.n	800337e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f023 0201 	bic.w	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	611a      	str	r2, [r3, #16]
  }
}
 800337e:	bf00      	nop
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40010000 	.word	0x40010000
 8003390:	40000400 	.word	0x40000400
 8003394:	40000800 	.word	0x40000800
 8003398:	40000c00 	.word	0x40000c00
 800339c:	40014000 	.word	0x40014000
 80033a0:	40014400 	.word	0x40014400
 80033a4:	40014800 	.word	0x40014800

080033a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f023 0201 	bic.w	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f023 030a 	bic.w	r3, r3, #10
 80033e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	621a      	str	r2, [r3, #32]
}
 80033fa:	bf00      	nop
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003406:	b480      	push	{r7}
 8003408:	b087      	sub	sp, #28
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f023 0210 	bic.w	r2, r3, #16
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003430:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	031b      	lsls	r3, r3, #12
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003442:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	621a      	str	r2, [r3, #32]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003466:	b480      	push	{r7}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	f043 0307 	orr.w	r3, r3, #7
 8003488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	609a      	str	r2, [r3, #8]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	021a      	lsls	r2, r3, #8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	431a      	orrs	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	609a      	str	r2, [r3, #8]
}
 80034d0:	bf00      	nop
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e050      	b.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1c      	ldr	r2, [pc, #112]	; (80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d018      	beq.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003540:	d013      	beq.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a18      	ldr	r2, [pc, #96]	; (80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00e      	beq.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a16      	ldr	r2, [pc, #88]	; (80035ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d009      	beq.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a15      	ldr	r2, [pc, #84]	; (80035b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d004      	beq.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a13      	ldr	r2, [pc, #76]	; (80035b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d10c      	bne.n	8003584 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003570:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	4313      	orrs	r3, r2
 800357a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40010000 	.word	0x40010000
 80035a8:	40000400 	.word	0x40000400
 80035ac:	40000800 	.word	0x40000800
 80035b0:	40000c00 	.word	0x40000c00
 80035b4:	40014000 	.word	0x40014000

080035b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e042      	b.n	8003650 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fd ff9a 	bl	8001518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2224      	movs	r2, #36	; 0x24
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f973 	bl	80038e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695a      	ldr	r2, [r3, #20]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	; 0x28
 800365c:	af02      	add	r7, sp, #8
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b20      	cmp	r3, #32
 8003676:	d175      	bne.n	8003764 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_UART_Transmit+0x2c>
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e06e      	b.n	8003766 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2221      	movs	r2, #33	; 0x21
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003696:	f7fe f901 	bl	800189c <HAL_GetTick>
 800369a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	88fa      	ldrh	r2, [r7, #6]
 80036a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	88fa      	ldrh	r2, [r7, #6]
 80036a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b0:	d108      	bne.n	80036c4 <HAL_UART_Transmit+0x6c>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d104      	bne.n	80036c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	e003      	b.n	80036cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036cc:	e02e      	b.n	800372c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2200      	movs	r2, #0
 80036d6:	2180      	movs	r1, #128	; 0x80
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f848 	bl	800376e <UART_WaitOnFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e03a      	b.n	8003766 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10b      	bne.n	800370e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003704:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	3302      	adds	r3, #2
 800370a:	61bb      	str	r3, [r7, #24]
 800370c:	e007      	b.n	800371e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	781a      	ldrb	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	3301      	adds	r3, #1
 800371c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1cb      	bne.n	80036ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2200      	movs	r2, #0
 800373e:	2140      	movs	r1, #64	; 0x40
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 f814 	bl	800376e <UART_WaitOnFlagUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e006      	b.n	8003766 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	e000      	b.n	8003766 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003764:	2302      	movs	r3, #2
  }
}
 8003766:	4618      	mov	r0, r3
 8003768:	3720      	adds	r7, #32
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b086      	sub	sp, #24
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	603b      	str	r3, [r7, #0]
 800377a:	4613      	mov	r3, r2
 800377c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377e:	e03b      	b.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003786:	d037      	beq.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003788:	f7fe f888 	bl	800189c <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	6a3a      	ldr	r2, [r7, #32]
 8003794:	429a      	cmp	r2, r3
 8003796:	d302      	bcc.n	800379e <UART_WaitOnFlagUntilTimeout+0x30>
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e03a      	b.n	8003818 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d023      	beq.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b80      	cmp	r3, #128	; 0x80
 80037b4:	d020      	beq.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b40      	cmp	r3, #64	; 0x40
 80037ba:	d01d      	beq.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d116      	bne.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f81d 	bl	8003820 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2208      	movs	r2, #8
 80037ea:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e00f      	b.n	8003818 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	4013      	ands	r3, r2
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	429a      	cmp	r2, r3
 8003806:	bf0c      	ite	eq
 8003808:	2301      	moveq	r3, #1
 800380a:	2300      	movne	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	429a      	cmp	r2, r3
 8003814:	d0b4      	beq.n	8003780 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003820:	b480      	push	{r7}
 8003822:	b095      	sub	sp, #84	; 0x54
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	330c      	adds	r3, #12
 800382e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003832:	e853 3f00 	ldrex	r3, [r3]
 8003836:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800383e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	330c      	adds	r3, #12
 8003846:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003848:	643a      	str	r2, [r7, #64]	; 0x40
 800384a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800384e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003850:	e841 2300 	strex	r3, r2, [r1]
 8003854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e5      	bne.n	8003828 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3314      	adds	r3, #20
 8003862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	e853 3f00 	ldrex	r3, [r3]
 800386a:	61fb      	str	r3, [r7, #28]
   return(result);
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	64bb      	str	r3, [r7, #72]	; 0x48
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3314      	adds	r3, #20
 800387a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800387c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003884:	e841 2300 	strex	r3, r2, [r1]
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1e5      	bne.n	800385c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	2b01      	cmp	r3, #1
 8003896:	d119      	bne.n	80038cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	330c      	adds	r3, #12
 800389e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f023 0310 	bic.w	r3, r3, #16
 80038ae:	647b      	str	r3, [r7, #68]	; 0x44
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	330c      	adds	r3, #12
 80038b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038b8:	61ba      	str	r2, [r7, #24]
 80038ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038bc:	6979      	ldr	r1, [r7, #20]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	613b      	str	r3, [r7, #16]
   return(result);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e5      	bne.n	8003898 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038da:	bf00      	nop
 80038dc:	3754      	adds	r7, #84	; 0x54
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038ec:	b0c0      	sub	sp, #256	; 0x100
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003904:	68d9      	ldr	r1, [r3, #12]
 8003906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	ea40 0301 	orr.w	r3, r0, r1
 8003910:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	431a      	orrs	r2, r3
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	431a      	orrs	r2, r3
 8003928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003940:	f021 010c 	bic.w	r1, r1, #12
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800394e:	430b      	orrs	r3, r1
 8003950:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800395e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003962:	6999      	ldr	r1, [r3, #24]
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	ea40 0301 	orr.w	r3, r0, r1
 800396e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	4b8f      	ldr	r3, [pc, #572]	; (8003bb4 <UART_SetConfig+0x2cc>)
 8003978:	429a      	cmp	r2, r3
 800397a:	d005      	beq.n	8003988 <UART_SetConfig+0xa0>
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	4b8d      	ldr	r3, [pc, #564]	; (8003bb8 <UART_SetConfig+0x2d0>)
 8003984:	429a      	cmp	r2, r3
 8003986:	d104      	bne.n	8003992 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003988:	f7ff fb58 	bl	800303c <HAL_RCC_GetPCLK2Freq>
 800398c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003990:	e003      	b.n	800399a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003992:	f7ff fb3f 	bl	8003014 <HAL_RCC_GetPCLK1Freq>
 8003996:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a4:	f040 810c 	bne.w	8003bc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ac:	2200      	movs	r2, #0
 80039ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039ba:	4622      	mov	r2, r4
 80039bc:	462b      	mov	r3, r5
 80039be:	1891      	adds	r1, r2, r2
 80039c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80039c2:	415b      	adcs	r3, r3
 80039c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039ca:	4621      	mov	r1, r4
 80039cc:	eb12 0801 	adds.w	r8, r2, r1
 80039d0:	4629      	mov	r1, r5
 80039d2:	eb43 0901 	adc.w	r9, r3, r1
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ea:	4690      	mov	r8, r2
 80039ec:	4699      	mov	r9, r3
 80039ee:	4623      	mov	r3, r4
 80039f0:	eb18 0303 	adds.w	r3, r8, r3
 80039f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039f8:	462b      	mov	r3, r5
 80039fa:	eb49 0303 	adc.w	r3, r9, r3
 80039fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a16:	460b      	mov	r3, r1
 8003a18:	18db      	adds	r3, r3, r3
 8003a1a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	eb42 0303 	adc.w	r3, r2, r3
 8003a22:	657b      	str	r3, [r7, #84]	; 0x54
 8003a24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a2c:	f7fd f8f6 	bl	8000c1c <__aeabi_uldivmod>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4b61      	ldr	r3, [pc, #388]	; (8003bbc <UART_SetConfig+0x2d4>)
 8003a36:	fba3 2302 	umull	r2, r3, r3, r2
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	011c      	lsls	r4, r3, #4
 8003a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a42:	2200      	movs	r2, #0
 8003a44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a50:	4642      	mov	r2, r8
 8003a52:	464b      	mov	r3, r9
 8003a54:	1891      	adds	r1, r2, r2
 8003a56:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a58:	415b      	adcs	r3, r3
 8003a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a60:	4641      	mov	r1, r8
 8003a62:	eb12 0a01 	adds.w	sl, r2, r1
 8003a66:	4649      	mov	r1, r9
 8003a68:	eb43 0b01 	adc.w	fp, r3, r1
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a80:	4692      	mov	sl, r2
 8003a82:	469b      	mov	fp, r3
 8003a84:	4643      	mov	r3, r8
 8003a86:	eb1a 0303 	adds.w	r3, sl, r3
 8003a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a8e:	464b      	mov	r3, r9
 8003a90:	eb4b 0303 	adc.w	r3, fp, r3
 8003a94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003aa4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003aa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003aac:	460b      	mov	r3, r1
 8003aae:	18db      	adds	r3, r3, r3
 8003ab0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	eb42 0303 	adc.w	r3, r2, r3
 8003ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8003aba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003abe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ac2:	f7fd f8ab 	bl	8000c1c <__aeabi_uldivmod>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4611      	mov	r1, r2
 8003acc:	4b3b      	ldr	r3, [pc, #236]	; (8003bbc <UART_SetConfig+0x2d4>)
 8003ace:	fba3 2301 	umull	r2, r3, r3, r1
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	2264      	movs	r2, #100	; 0x64
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	1acb      	subs	r3, r1, r3
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ae2:	4b36      	ldr	r3, [pc, #216]	; (8003bbc <UART_SetConfig+0x2d4>)
 8003ae4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003af0:	441c      	add	r4, r3
 8003af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003af6:	2200      	movs	r2, #0
 8003af8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003afc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b04:	4642      	mov	r2, r8
 8003b06:	464b      	mov	r3, r9
 8003b08:	1891      	adds	r1, r2, r2
 8003b0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b0c:	415b      	adcs	r3, r3
 8003b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b14:	4641      	mov	r1, r8
 8003b16:	1851      	adds	r1, r2, r1
 8003b18:	6339      	str	r1, [r7, #48]	; 0x30
 8003b1a:	4649      	mov	r1, r9
 8003b1c:	414b      	adcs	r3, r1
 8003b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b2c:	4659      	mov	r1, fp
 8003b2e:	00cb      	lsls	r3, r1, #3
 8003b30:	4651      	mov	r1, sl
 8003b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b36:	4651      	mov	r1, sl
 8003b38:	00ca      	lsls	r2, r1, #3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4642      	mov	r2, r8
 8003b42:	189b      	adds	r3, r3, r2
 8003b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b48:	464b      	mov	r3, r9
 8003b4a:	460a      	mov	r2, r1
 8003b4c:	eb42 0303 	adc.w	r3, r2, r3
 8003b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b68:	460b      	mov	r3, r1
 8003b6a:	18db      	adds	r3, r3, r3
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b6e:	4613      	mov	r3, r2
 8003b70:	eb42 0303 	adc.w	r3, r2, r3
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b7e:	f7fd f84d 	bl	8000c1c <__aeabi_uldivmod>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <UART_SetConfig+0x2d4>)
 8003b88:	fba3 1302 	umull	r1, r3, r3, r2
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	2164      	movs	r1, #100	; 0x64
 8003b90:	fb01 f303 	mul.w	r3, r1, r3
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	3332      	adds	r3, #50	; 0x32
 8003b9a:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <UART_SetConfig+0x2d4>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	f003 0207 	and.w	r2, r3, #7
 8003ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4422      	add	r2, r4
 8003bae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bb0:	e106      	b.n	8003dc0 <UART_SetConfig+0x4d8>
 8003bb2:	bf00      	nop
 8003bb4:	40011000 	.word	0x40011000
 8003bb8:	40011400 	.word	0x40011400
 8003bbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bd2:	4642      	mov	r2, r8
 8003bd4:	464b      	mov	r3, r9
 8003bd6:	1891      	adds	r1, r2, r2
 8003bd8:	6239      	str	r1, [r7, #32]
 8003bda:	415b      	adcs	r3, r3
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003be2:	4641      	mov	r1, r8
 8003be4:	1854      	adds	r4, r2, r1
 8003be6:	4649      	mov	r1, r9
 8003be8:	eb43 0501 	adc.w	r5, r3, r1
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	00eb      	lsls	r3, r5, #3
 8003bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bfa:	00e2      	lsls	r2, r4, #3
 8003bfc:	4614      	mov	r4, r2
 8003bfe:	461d      	mov	r5, r3
 8003c00:	4643      	mov	r3, r8
 8003c02:	18e3      	adds	r3, r4, r3
 8003c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c08:	464b      	mov	r3, r9
 8003c0a:	eb45 0303 	adc.w	r3, r5, r3
 8003c0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c2e:	4629      	mov	r1, r5
 8003c30:	008b      	lsls	r3, r1, #2
 8003c32:	4621      	mov	r1, r4
 8003c34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c38:	4621      	mov	r1, r4
 8003c3a:	008a      	lsls	r2, r1, #2
 8003c3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c40:	f7fc ffec 	bl	8000c1c <__aeabi_uldivmod>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4b60      	ldr	r3, [pc, #384]	; (8003dcc <UART_SetConfig+0x4e4>)
 8003c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	011c      	lsls	r4, r3, #4
 8003c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c64:	4642      	mov	r2, r8
 8003c66:	464b      	mov	r3, r9
 8003c68:	1891      	adds	r1, r2, r2
 8003c6a:	61b9      	str	r1, [r7, #24]
 8003c6c:	415b      	adcs	r3, r3
 8003c6e:	61fb      	str	r3, [r7, #28]
 8003c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c74:	4641      	mov	r1, r8
 8003c76:	1851      	adds	r1, r2, r1
 8003c78:	6139      	str	r1, [r7, #16]
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	414b      	adcs	r3, r1
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c8c:	4659      	mov	r1, fp
 8003c8e:	00cb      	lsls	r3, r1, #3
 8003c90:	4651      	mov	r1, sl
 8003c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c96:	4651      	mov	r1, sl
 8003c98:	00ca      	lsls	r2, r1, #3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	4642      	mov	r2, r8
 8003ca2:	189b      	adds	r3, r3, r2
 8003ca4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ca8:	464b      	mov	r3, r9
 8003caa:	460a      	mov	r2, r1
 8003cac:	eb42 0303 	adc.w	r3, r2, r3
 8003cb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ccc:	4649      	mov	r1, r9
 8003cce:	008b      	lsls	r3, r1, #2
 8003cd0:	4641      	mov	r1, r8
 8003cd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cd6:	4641      	mov	r1, r8
 8003cd8:	008a      	lsls	r2, r1, #2
 8003cda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cde:	f7fc ff9d 	bl	8000c1c <__aeabi_uldivmod>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4b38      	ldr	r3, [pc, #224]	; (8003dcc <UART_SetConfig+0x4e4>)
 8003cea:	fba3 2301 	umull	r2, r3, r3, r1
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	2264      	movs	r2, #100	; 0x64
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	1acb      	subs	r3, r1, r3
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	3332      	adds	r3, #50	; 0x32
 8003cfc:	4a33      	ldr	r2, [pc, #204]	; (8003dcc <UART_SetConfig+0x4e4>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d08:	441c      	add	r4, r3
 8003d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d0e:	2200      	movs	r2, #0
 8003d10:	673b      	str	r3, [r7, #112]	; 0x70
 8003d12:	677a      	str	r2, [r7, #116]	; 0x74
 8003d14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d18:	4642      	mov	r2, r8
 8003d1a:	464b      	mov	r3, r9
 8003d1c:	1891      	adds	r1, r2, r2
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	415b      	adcs	r3, r3
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d28:	4641      	mov	r1, r8
 8003d2a:	1851      	adds	r1, r2, r1
 8003d2c:	6039      	str	r1, [r7, #0]
 8003d2e:	4649      	mov	r1, r9
 8003d30:	414b      	adcs	r3, r1
 8003d32:	607b      	str	r3, [r7, #4]
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d40:	4659      	mov	r1, fp
 8003d42:	00cb      	lsls	r3, r1, #3
 8003d44:	4651      	mov	r1, sl
 8003d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d4a:	4651      	mov	r1, sl
 8003d4c:	00ca      	lsls	r2, r1, #3
 8003d4e:	4610      	mov	r0, r2
 8003d50:	4619      	mov	r1, r3
 8003d52:	4603      	mov	r3, r0
 8003d54:	4642      	mov	r2, r8
 8003d56:	189b      	adds	r3, r3, r2
 8003d58:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	460a      	mov	r2, r1
 8003d5e:	eb42 0303 	adc.w	r3, r2, r3
 8003d62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d6e:	667a      	str	r2, [r7, #100]	; 0x64
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d7c:	4649      	mov	r1, r9
 8003d7e:	008b      	lsls	r3, r1, #2
 8003d80:	4641      	mov	r1, r8
 8003d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d86:	4641      	mov	r1, r8
 8003d88:	008a      	lsls	r2, r1, #2
 8003d8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d8e:	f7fc ff45 	bl	8000c1c <__aeabi_uldivmod>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <UART_SetConfig+0x4e4>)
 8003d98:	fba3 1302 	umull	r1, r3, r3, r2
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	2164      	movs	r1, #100	; 0x64
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	3332      	adds	r3, #50	; 0x32
 8003daa:	4a08      	ldr	r2, [pc, #32]	; (8003dcc <UART_SetConfig+0x4e4>)
 8003dac:	fba2 2303 	umull	r2, r3, r2, r3
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	f003 020f 	and.w	r2, r3, #15
 8003db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4422      	add	r2, r4
 8003dbe:	609a      	str	r2, [r3, #8]
}
 8003dc0:	bf00      	nop
 8003dc2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dcc:	51eb851f 	.word	0x51eb851f

08003dd0 <funchclassifier77.constprop.0>:
 8003dd0:	4288      	cmp	r0, r1
 8003dd2:	d300      	bcc.n	8003dd6 <funchclassifier77.constprop.0+0x6>
 8003dd4:	4770      	bx	lr
 8003dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dda:	1847      	adds	r7, r0, r1
 8003ddc:	ea4f 0867 	mov.w	r8, r7, asr #1
 8003de0:	087f      	lsrs	r7, r7, #1
 8003de2:	1c7c      	adds	r4, r7, #1
 8003de4:	460d      	mov	r5, r1
 8003de6:	b2a4      	uxth	r4, r4
 8003de8:	4639      	mov	r1, r7
 8003dea:	4606      	mov	r6, r0
 8003dec:	f7ff fff0 	bl	8003dd0 <funchclassifier77.constprop.0>
 8003df0:	4629      	mov	r1, r5
 8003df2:	4620      	mov	r0, r4
 8003df4:	f7ff ffec 	bl	8003dd0 <funchclassifier77.constprop.0>
 8003df8:	493f      	ldr	r1, [pc, #252]	; (8003ef8 <funchclassifier77.constprop.0+0x128>)
 8003dfa:	eb01 0388 	add.w	r3, r1, r8, lsl #2
 8003dfe:	ed93 7a00 	vldr	s14, [r3]
 8003e02:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0e:	dc01      	bgt.n	8003e14 <funchclassifier77.constprop.0+0x44>
 8003e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e14:	42be      	cmp	r6, r7
 8003e16:	d867      	bhi.n	8003ee8 <funchclassifier77.constprop.0+0x118>
 8003e18:	42a5      	cmp	r5, r4
 8003e1a:	d369      	bcc.n	8003ef0 <funchclassifier77.constprop.0+0x120>
 8003e1c:	4837      	ldr	r0, [pc, #220]	; (8003efc <funchclassifier77.constprop.0+0x12c>)
 8003e1e:	4632      	mov	r2, r6
 8003e20:	2300      	movs	r3, #0
 8003e22:	e001      	b.n	8003e28 <funchclassifier77.constprop.0+0x58>
 8003e24:	42a5      	cmp	r5, r4
 8003e26:	d337      	bcc.n	8003e98 <funchclassifier77.constprop.0+0xc8>
 8003e28:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 8003e2c:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8003e30:	edde 7a00 	vldr	s15, [lr]
 8003e34:	ed9c 7a00 	vldr	s14, [ip]
 8003e38:	f103 0e01 	add.w	lr, r3, #1
 8003e3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e44:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 8003e48:	fa1f f38e 	uxth.w	r3, lr
 8003e4c:	f102 0e01 	add.w	lr, r2, #1
 8003e50:	bf53      	iteet	pl
 8003e52:	3401      	addpl	r4, #1
 8003e54:	fa1f f28e 	uxthmi.w	r2, lr
 8003e58:	eef0 7a47 	vmovmi.f32	s15, s14
 8003e5c:	b2a4      	uxthpl	r4, r4
 8003e5e:	4297      	cmp	r7, r2
 8003e60:	edcc 7a00 	vstr	s15, [ip]
 8003e64:	d2de      	bcs.n	8003e24 <funchclassifier77.constprop.0+0x54>
 8003e66:	42a5      	cmp	r5, r4
 8003e68:	d32e      	bcc.n	8003ec8 <funchclassifier77.constprop.0+0xf8>
 8003e6a:	eba4 0803 	sub.w	r8, r4, r3
 8003e6e:	fa1f f888 	uxth.w	r8, r8
 8003e72:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8003e76:	469c      	mov	ip, r3
 8003e78:	f103 0e01 	add.w	lr, r3, #1
 8003e7c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8003e80:	fa1f f38e 	uxth.w	r3, lr
 8003e84:	f854 eb04 	ldr.w	lr, [r4], #4
 8003e88:	f8cc e000 	str.w	lr, [ip]
 8003e8c:	eb03 0c08 	add.w	ip, r3, r8
 8003e90:	fa1f fc8c 	uxth.w	ip, ip
 8003e94:	4565      	cmp	r5, ip
 8003e96:	d2ee      	bcs.n	8003e76 <funchclassifier77.constprop.0+0xa6>
 8003e98:	4297      	cmp	r7, r2
 8003e9a:	d315      	bcc.n	8003ec8 <funchclassifier77.constprop.0+0xf8>
 8003e9c:	eba2 0e03 	sub.w	lr, r2, r3
 8003ea0:	fa1f fe8e 	uxth.w	lr, lr
 8003ea4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003ea8:	461c      	mov	r4, r3
 8003eaa:	f103 0c01 	add.w	ip, r3, #1
 8003eae:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8003eb2:	fa1f f38c 	uxth.w	r3, ip
 8003eb6:	f852 cb04 	ldr.w	ip, [r2], #4
 8003eba:	f8c4 c000 	str.w	ip, [r4]
 8003ebe:	eb03 040e 	add.w	r4, r3, lr
 8003ec2:	b2a4      	uxth	r4, r4
 8003ec4:	42a7      	cmp	r7, r4
 8003ec6:	d2ef      	bcs.n	8003ea8 <funchclassifier77.constprop.0+0xd8>
 8003ec8:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8003ecc:	2300      	movs	r3, #0
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	6814      	ldr	r4, [r2, #0]
 8003ed8:	f841 4b04 	str.w	r4, [r1], #4
 8003edc:	18f2      	adds	r2, r6, r3
 8003ede:	b292      	uxth	r2, r2
 8003ee0:	4295      	cmp	r5, r2
 8003ee2:	d2f4      	bcs.n	8003ece <funchclassifier77.constprop.0+0xfe>
 8003ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ee8:	4804      	ldr	r0, [pc, #16]	; (8003efc <funchclassifier77.constprop.0+0x12c>)
 8003eea:	4632      	mov	r2, r6
 8003eec:	2300      	movs	r3, #0
 8003eee:	e7ba      	b.n	8003e66 <funchclassifier77.constprop.0+0x96>
 8003ef0:	4802      	ldr	r0, [pc, #8]	; (8003efc <funchclassifier77.constprop.0+0x12c>)
 8003ef2:	4632      	mov	r2, r6
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e7d1      	b.n	8003e9c <funchclassifier77.constprop.0+0xcc>
 8003ef8:	20000998 	.word	0x20000998
 8003efc:	20000598 	.word	0x20000598

08003f00 <neai_classification_init>:
 8003f00:	ed90 7a27 	vldr	s14, [r0, #156]	; 0x9c
 8003f04:	4a4c      	ldr	r2, [pc, #304]	; (8004038 <neai_classification_init+0x138>)
 8003f06:	494d      	ldr	r1, [pc, #308]	; (800403c <neai_classification_init+0x13c>)
 8003f08:	4b4d      	ldr	r3, [pc, #308]	; (8004040 <neai_classification_init+0x140>)
 8003f0a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8003f0e:	b410      	push	{r4}
 8003f10:	eeb4 7a67 	vcmp.f32	s14, s15
 8003f14:	240c      	movs	r4, #12
 8003f16:	6014      	str	r4, [r2, #0]
 8003f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f1c:	f100 0290 	add.w	r2, r0, #144	; 0x90
 8003f20:	6008      	str	r0, [r1, #0]
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	f040 8081 	bne.w	800402a <neai_classification_init+0x12a>
 8003f28:	ed90 7a28 	vldr	s14, [r0, #160]	; 0xa0
 8003f2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003f30:	eeb4 7a67 	vcmp.f32	s14, s15
 8003f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f38:	d177      	bne.n	800402a <neai_classification_init+0x12a>
 8003f3a:	eddf 7a42 	vldr	s15, [pc, #264]	; 8004044 <neai_classification_init+0x144>
 8003f3e:	ed90 7a29 	vldr	s14, [r0, #164]	; 0xa4
 8003f42:	eeb4 7a67 	vcmp.f32	s14, s15
 8003f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4a:	d16e      	bne.n	800402a <neai_classification_init+0x12a>
 8003f4c:	edd0 7a2a 	vldr	s15, [r0, #168]	; 0xa8
 8003f50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f58:	d167      	bne.n	800402a <neai_classification_init+0x12a>
 8003f5a:	edd0 7a2b 	vldr	s15, [r0, #172]	; 0xac
 8003f5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f66:	d160      	bne.n	800402a <neai_classification_init+0x12a>
 8003f68:	edd0 7a2c 	vldr	s15, [r0, #176]	; 0xb0
 8003f6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f74:	d159      	bne.n	800402a <neai_classification_init+0x12a>
 8003f76:	edd0 7a2d 	vldr	s15, [r0, #180]	; 0xb4
 8003f7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f82:	d152      	bne.n	800402a <neai_classification_init+0x12a>
 8003f84:	edd0 7a2e 	vldr	s15, [r0, #184]	; 0xb8
 8003f88:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f90:	d14b      	bne.n	800402a <neai_classification_init+0x12a>
 8003f92:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8004048 <neai_classification_init+0x148>
 8003f96:	ed90 7a2f 	vldr	s14, [r0, #188]	; 0xbc
 8003f9a:	eeb4 7a67 	vcmp.f32	s14, s15
 8003f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa2:	d142      	bne.n	800402a <neai_classification_init+0x12a>
 8003fa4:	ed90 7a30 	vldr	s14, [r0, #192]	; 0xc0
 8003fa8:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8003fac:	eeb4 7a67 	vcmp.f32	s14, s15
 8003fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb4:	d139      	bne.n	800402a <neai_classification_init+0x12a>
 8003fb6:	edd0 7a31 	vldr	s15, [r0, #196]	; 0xc4
 8003fba:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc2:	d132      	bne.n	800402a <neai_classification_init+0x12a>
 8003fc4:	ed90 7a32 	vldr	s14, [r0, #200]	; 0xc8
 8003fc8:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8003fcc:	eeb4 7a67 	vcmp.f32	s14, s15
 8003fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd4:	d129      	bne.n	800402a <neai_classification_init+0x12a>
 8003fd6:	ed90 7a33 	vldr	s14, [r0, #204]	; 0xcc
 8003fda:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003fde:	eeb4 7a67 	vcmp.f32	s14, s15
 8003fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe6:	d120      	bne.n	800402a <neai_classification_init+0x12a>
 8003fe8:	edd0 7a34 	vldr	s15, [r0, #208]	; 0xd0
 8003fec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff4:	d119      	bne.n	800402a <neai_classification_init+0x12a>
 8003ff6:	edd0 7a35 	vldr	s15, [r0, #212]	; 0xd4
 8003ffa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004002:	d112      	bne.n	800402a <neai_classification_init+0x12a>
 8004004:	edd0 7a36 	vldr	s15, [r0, #216]	; 0xd8
 8004008:	eef5 7a40 	vcmp.f32	s15, #0.0
 800400c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004010:	d10b      	bne.n	800402a <neai_classification_init+0x12a>
 8004012:	ed90 7a37 	vldr	s14, [r0, #220]	; 0xdc
 8004016:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800404c <neai_classification_init+0x14c>
 800401a:	eeb4 7a67 	vcmp.f32	s14, s15
 800401e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004022:	bf14      	ite	ne
 8004024:	207d      	movne	r0, #125	; 0x7d
 8004026:	2000      	moveq	r0, #0
 8004028:	e000      	b.n	800402c <neai_classification_init+0x12c>
 800402a:	207d      	movs	r0, #125	; 0x7d
 800402c:	4b08      	ldr	r3, [pc, #32]	; (8004050 <neai_classification_init+0x150>)
 800402e:	7018      	strb	r0, [r3, #0]
 8004030:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	20000594 	.word	0x20000594
 800403c:	20000590 	.word	0x20000590
 8004040:	2000058c 	.word	0x2000058c
 8004044:	43800000 	.word	0x43800000
 8004048:	42340000 	.word	0x42340000
 800404c:	49742400 	.word	0x49742400
 8004050:	20000019 	.word	0x20000019

08004054 <neai_classification>:
 8004054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004058:	ed2d 8b06 	vpush	{d8-d10}
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <neai_classification+0x20>)
 800405e:	b087      	sub	sp, #28
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	9303      	str	r3, [sp, #12]
 8004064:	9205      	str	r2, [sp, #20]
 8004066:	b13b      	cbz	r3, 8004078 <neai_classification+0x24>
 8004068:	9803      	ldr	r0, [sp, #12]
 800406a:	b007      	add	sp, #28
 800406c:	ecbd 8b06 	vpop	{d8-d10}
 8004070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004074:	20000019 	.word	0x20000019
 8004078:	edd0 7a00 	vldr	s15, [r0]
 800407c:	4605      	mov	r5, r0
 800407e:	468b      	mov	fp, r1
 8004080:	4606      	mov	r6, r0
 8004082:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8004086:	4603      	mov	r3, r0
 8004088:	ecb3 7a01 	vldmia	r3!, {s14}
 800408c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004094:	bfd8      	it	le
 8004096:	eef0 7a47 	vmovle.f32	s15, s14
 800409a:	429c      	cmp	r4, r3
 800409c:	d1f4      	bne.n	8004088 <neai_classification+0x34>
 800409e:	4be0      	ldr	r3, [pc, #896]	; (8004420 <neai_classification+0x3cc>)
 80040a0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 80040a4:	edd5 7a00 	vldr	s15, [r5]
 80040a8:	462b      	mov	r3, r5
 80040aa:	ecb3 7a01 	vldmia	r3!, {s14}
 80040ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b6:	bf58      	it	pl
 80040b8:	eef0 7a47 	vmovpl.f32	s15, s14
 80040bc:	429c      	cmp	r4, r3
 80040be:	d1f4      	bne.n	80040aa <neai_classification+0x56>
 80040c0:	4bd7      	ldr	r3, [pc, #860]	; (8004420 <neai_classification+0x3cc>)
 80040c2:	edc3 7a02 	vstr	s15, [r3, #8]
 80040c6:	ed95 7a00 	vldr	s14, [r5]
 80040ca:	462b      	mov	r3, r5
 80040cc:	eef0 7a47 	vmov.f32	s15, s14
 80040d0:	ecf3 6a01 	vldmia	r3!, {s13}
 80040d4:	eef4 6ae7 	vcmpe.f32	s13, s15
 80040d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040dc:	bf58      	it	pl
 80040de:	eef0 7a66 	vmovpl.f32	s15, s13
 80040e2:	429c      	cmp	r4, r3
 80040e4:	d1f4      	bne.n	80040d0 <neai_classification+0x7c>
 80040e6:	462b      	mov	r3, r5
 80040e8:	ecf3 6a01 	vldmia	r3!, {s13}
 80040ec:	eef4 6ac7 	vcmpe.f32	s13, s14
 80040f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f4:	bfd8      	it	le
 80040f6:	eeb0 7a66 	vmovle.f32	s14, s13
 80040fa:	429c      	cmp	r4, r3
 80040fc:	d1f4      	bne.n	80040e8 <neai_classification+0x94>
 80040fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004102:	4bc7      	ldr	r3, [pc, #796]	; (8004420 <neai_classification+0x3cc>)
 8004104:	edc3 7a07 	vstr	s15, [r3, #28]
 8004108:	ed95 7a00 	vldr	s14, [r5]
 800410c:	462b      	mov	r3, r5
 800410e:	eef0 7a47 	vmov.f32	s15, s14
 8004112:	ecf3 6a01 	vldmia	r3!, {s13}
 8004116:	eef4 6ae7 	vcmpe.f32	s13, s15
 800411a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411e:	bfd8      	it	le
 8004120:	eef0 7a66 	vmovle.f32	s15, s13
 8004124:	429c      	cmp	r4, r3
 8004126:	d1f4      	bne.n	8004112 <neai_classification+0xbe>
 8004128:	eef0 7ae7 	vabs.f32	s15, s15
 800412c:	462b      	mov	r3, r5
 800412e:	ecf3 6a01 	vldmia	r3!, {s13}
 8004132:	eef4 6ac7 	vcmpe.f32	s13, s14
 8004136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413a:	bf58      	it	pl
 800413c:	eeb0 7a66 	vmovpl.f32	s14, s13
 8004140:	429c      	cmp	r4, r3
 8004142:	d1f4      	bne.n	800412e <neai_classification+0xda>
 8004144:	eeb0 7ac7 	vabs.f32	s14, s14
 8004148:	eef4 7a47 	vcmp.f32	s15, s14
 800414c:	4bb4      	ldr	r3, [pc, #720]	; (8004420 <neai_classification+0x3cc>)
 800414e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004152:	bf48      	it	mi
 8004154:	eef0 7a47 	vmovmi.f32	s15, s14
 8004158:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 800415c:	462f      	mov	r7, r5
 800415e:	ecf7 8a01 	vldmia	r7!, {s17}
 8004162:	eef0 7a68 	vmov.f32	s15, s17
 8004166:	463b      	mov	r3, r7
 8004168:	ecb3 7a01 	vldmia	r3!, {s14}
 800416c:	429c      	cmp	r4, r3
 800416e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004172:	d1f9      	bne.n	8004168 <neai_classification+0x114>
 8004174:	eddf 6aab 	vldr	s13, [pc, #684]	; 8004424 <neai_classification+0x3d0>
 8004178:	ee27 8aa6 	vmul.f32	s16, s15, s13
 800417c:	eeb0 7a68 	vmov.f32	s14, s17
 8004180:	463b      	mov	r3, r7
 8004182:	ecf3 7a01 	vldmia	r3!, {s15}
 8004186:	429c      	cmp	r4, r3
 8004188:	ee37 7a27 	vadd.f32	s14, s14, s15
 800418c:	d1f9      	bne.n	8004182 <neai_classification+0x12e>
 800418e:	eddf 7aa5 	vldr	s15, [pc, #660]	; 8004424 <neai_classification+0x3d0>
 8004192:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004196:	463b      	mov	r3, r7
 8004198:	ee38 7ae6 	vsub.f32	s14, s17, s13
 800419c:	ee27 7a07 	vmul.f32	s14, s14, s14
 80041a0:	ecf3 7a01 	vldmia	r3!, {s15}
 80041a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80041a8:	429c      	cmp	r4, r3
 80041aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80041ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041b2:	d1f5      	bne.n	80041a0 <neai_classification+0x14c>
 80041b4:	eddf 7a9b 	vldr	s15, [pc, #620]	; 8004424 <neai_classification+0x3d0>
 80041b8:	ee27 0a27 	vmul.f32	s0, s14, s15
 80041bc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80041c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c4:	f100 83ad 	bmi.w	8004922 <neai_classification+0x8ce>
 80041c8:	eeb1 7ac0 	vsqrt.f32	s14, s0
 80041cc:	463b      	mov	r3, r7
 80041ce:	ee78 8ac8 	vsub.f32	s17, s17, s16
 80041d2:	ee68 6aa8 	vmul.f32	s13, s17, s17
 80041d6:	ee66 6aa8 	vmul.f32	s13, s13, s17
 80041da:	ecf3 7a01 	vldmia	r3!, {s15}
 80041de:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80041e2:	429c      	cmp	r4, r3
 80041e4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80041e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80041ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80041f0:	d1f3      	bne.n	80041da <neai_classification+0x186>
 80041f2:	ee67 7a07 	vmul.f32	s15, s14, s14
 80041f6:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 8004424 <neai_classification+0x3d0>
 80041fa:	4b89      	ldr	r3, [pc, #548]	; (8004420 <neai_classification+0x3cc>)
 80041fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004204:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004208:	edc3 7a08 	vstr	s15, [r3, #32]
 800420c:	edd5 8a00 	vldr	s17, [r5]
 8004210:	463b      	mov	r3, r7
 8004212:	eef0 7a68 	vmov.f32	s15, s17
 8004216:	ecb3 7a01 	vldmia	r3!, {s14}
 800421a:	429c      	cmp	r4, r3
 800421c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004220:	d1f9      	bne.n	8004216 <neai_classification+0x1c2>
 8004222:	eddf 6a80 	vldr	s13, [pc, #512]	; 8004424 <neai_classification+0x3d0>
 8004226:	ee27 8aa6 	vmul.f32	s16, s15, s13
 800422a:	eeb0 7a68 	vmov.f32	s14, s17
 800422e:	463b      	mov	r3, r7
 8004230:	ecf3 7a01 	vldmia	r3!, {s15}
 8004234:	429c      	cmp	r4, r3
 8004236:	ee37 7a27 	vadd.f32	s14, s14, s15
 800423a:	d1f9      	bne.n	8004230 <neai_classification+0x1dc>
 800423c:	eddf 7a79 	vldr	s15, [pc, #484]	; 8004424 <neai_classification+0x3d0>
 8004240:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004244:	463b      	mov	r3, r7
 8004246:	ee38 7ae6 	vsub.f32	s14, s17, s13
 800424a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800424e:	ecf3 7a01 	vldmia	r3!, {s15}
 8004252:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004256:	429c      	cmp	r4, r3
 8004258:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800425c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004260:	d1f5      	bne.n	800424e <neai_classification+0x1fa>
 8004262:	eddf 7a70 	vldr	s15, [pc, #448]	; 8004424 <neai_classification+0x3d0>
 8004266:	ee27 0a27 	vmul.f32	s0, s14, s15
 800426a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800426e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004272:	f100 8376 	bmi.w	8004962 <neai_classification+0x90e>
 8004276:	eeb1 7ac0 	vsqrt.f32	s14, s0
 800427a:	463b      	mov	r3, r7
 800427c:	ee78 8ac8 	vsub.f32	s17, s17, s16
 8004280:	ee68 6aa8 	vmul.f32	s13, s17, s17
 8004284:	ee66 6aa8 	vmul.f32	s13, s13, s17
 8004288:	ee66 6aa8 	vmul.f32	s13, s13, s17
 800428c:	ecf3 7a01 	vldmia	r3!, {s15}
 8004290:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8004294:	42a3      	cmp	r3, r4
 8004296:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800429a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800429e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80042a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80042a6:	d1f1      	bne.n	800428c <neai_classification+0x238>
 80042a8:	ee67 7a07 	vmul.f32	s15, s14, s14
 80042ac:	eddf 5a5d 	vldr	s11, [pc, #372]	; 8004424 <neai_classification+0x3d0>
 80042b0:	4b5b      	ldr	r3, [pc, #364]	; (8004420 <neai_classification+0x3cc>)
 80042b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042b6:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 80042ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042c2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80042c6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80042ca:	edc3 7a00 	vstr	s15, [r3]
 80042ce:	ed95 7a00 	vldr	s14, [r5]
 80042d2:	463b      	mov	r3, r7
 80042d4:	eef0 6ac7 	vabs.f32	s13, s14
 80042d8:	ecf3 7a01 	vldmia	r3!, {s15}
 80042dc:	eef0 7ae7 	vabs.f32	s15, s15
 80042e0:	429c      	cmp	r4, r3
 80042e2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80042e6:	d1f7      	bne.n	80042d8 <neai_classification+0x284>
 80042e8:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8004424 <neai_classification+0x3d0>
 80042ec:	ee26 6a86 	vmul.f32	s12, s13, s12
 80042f0:	eef0 7a47 	vmov.f32	s15, s14
 80042f4:	462b      	mov	r3, r5
 80042f6:	ecf3 6a01 	vldmia	r3!, {s13}
 80042fa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80042fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004302:	bfd8      	it	le
 8004304:	eef0 7a66 	vmovle.f32	s15, s13
 8004308:	429c      	cmp	r4, r3
 800430a:	d1f4      	bne.n	80042f6 <neai_classification+0x2a2>
 800430c:	eef0 7ae7 	vabs.f32	s15, s15
 8004310:	462b      	mov	r3, r5
 8004312:	ecf3 6a01 	vldmia	r3!, {s13}
 8004316:	eef4 6ac7 	vcmpe.f32	s13, s14
 800431a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800431e:	bf58      	it	pl
 8004320:	eeb0 7a66 	vmovpl.f32	s14, s13
 8004324:	429c      	cmp	r4, r3
 8004326:	d1f4      	bne.n	8004312 <neai_classification+0x2be>
 8004328:	eeb0 7ac7 	vabs.f32	s14, s14
 800432c:	eef4 7a47 	vcmp.f32	s15, s14
 8004330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004334:	bf48      	it	mi
 8004336:	eef0 7a47 	vmovmi.f32	s15, s14
 800433a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800433e:	4b38      	ldr	r3, [pc, #224]	; (8004420 <neai_classification+0x3cc>)
 8004340:	ed83 7a03 	vstr	s14, [r3, #12]
 8004344:	ed95 7a00 	vldr	s14, [r5]
 8004348:	eef0 7ac7 	vabs.f32	s15, s14
 800434c:	eef1 6ae7 	vsqrt.f32	s13, s15
 8004350:	463b      	mov	r3, r7
 8004352:	ecf3 7a01 	vldmia	r3!, {s15}
 8004356:	eef0 7ae7 	vabs.f32	s15, s15
 800435a:	eeb1 6ae7 	vsqrt.f32	s12, s15
 800435e:	42a3      	cmp	r3, r4
 8004360:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004364:	d1f5      	bne.n	8004352 <neai_classification+0x2fe>
 8004366:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8004424 <neai_classification+0x3d0>
 800436a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800436e:	eef0 7a47 	vmov.f32	s15, s14
 8004372:	462b      	mov	r3, r5
 8004374:	ecb3 6a01 	vldmia	r3!, {s12}
 8004378:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800437c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004380:	bfd8      	it	le
 8004382:	eef0 7a46 	vmovle.f32	s15, s12
 8004386:	429c      	cmp	r4, r3
 8004388:	d1f4      	bne.n	8004374 <neai_classification+0x320>
 800438a:	eef0 7ae7 	vabs.f32	s15, s15
 800438e:	462b      	mov	r3, r5
 8004390:	ecb3 6a01 	vldmia	r3!, {s12}
 8004394:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8004398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800439c:	bf58      	it	pl
 800439e:	eeb0 7a46 	vmovpl.f32	s14, s12
 80043a2:	42a3      	cmp	r3, r4
 80043a4:	d1f4      	bne.n	8004390 <neai_classification+0x33c>
 80043a6:	eeb0 7ac7 	vabs.f32	s14, s14
 80043aa:	eef4 7a47 	vcmp.f32	s15, s14
 80043ae:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80043b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b6:	bf48      	it	mi
 80043b8:	eef0 7a47 	vmovmi.f32	s15, s14
 80043bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80043c0:	4b17      	ldr	r3, [pc, #92]	; (8004420 <neai_classification+0x3cc>)
 80043c2:	ed83 7a06 	vstr	s14, [r3, #24]
 80043c6:	ed95 7a00 	vldr	s14, [r5]
 80043ca:	462b      	mov	r3, r5
 80043cc:	eef0 7a47 	vmov.f32	s15, s14
 80043d0:	ecf3 6a01 	vldmia	r3!, {s13}
 80043d4:	eef4 6ae7 	vcmpe.f32	s13, s15
 80043d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043dc:	bfd8      	it	le
 80043de:	eef0 7a66 	vmovle.f32	s15, s13
 80043e2:	42a3      	cmp	r3, r4
 80043e4:	d1f4      	bne.n	80043d0 <neai_classification+0x37c>
 80043e6:	eef0 6a47 	vmov.f32	s13, s14
 80043ea:	eeb0 8ae7 	vabs.f32	s16, s15
 80043ee:	462b      	mov	r3, r5
 80043f0:	ecf3 7a01 	vldmia	r3!, {s15}
 80043f4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80043f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043fc:	bf58      	it	pl
 80043fe:	eef0 6a67 	vmovpl.f32	s13, s15
 8004402:	42a3      	cmp	r3, r4
 8004404:	d1f4      	bne.n	80043f0 <neai_classification+0x39c>
 8004406:	eef0 6ae6 	vabs.f32	s13, s13
 800440a:	eeb4 8a66 	vcmp.f32	s16, s13
 800440e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004412:	ee27 7a07 	vmul.f32	s14, s14, s14
 8004416:	bf48      	it	mi
 8004418:	eeb0 8a66 	vmovmi.f32	s16, s13
 800441c:	e004      	b.n	8004428 <neai_classification+0x3d4>
 800441e:	bf00      	nop
 8004420:	20000d98 	.word	0x20000d98
 8004424:	3b800000 	.word	0x3b800000
 8004428:	ecf7 7a01 	vldmia	r7!, {s15}
 800442c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004430:	42bc      	cmp	r4, r7
 8004432:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004436:	d1f7      	bne.n	8004428 <neai_classification+0x3d4>
 8004438:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 8004424 <neai_classification+0x3d0>
 800443c:	ee27 0a27 	vmul.f32	s0, s14, s15
 8004440:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004448:	f100 8286 	bmi.w	8004958 <neai_classification+0x904>
 800444c:	eef1 7ac0 	vsqrt.f32	s15, s0
 8004450:	f8df 831c 	ldr.w	r8, [pc, #796]	; 8004770 <neai_classification+0x71c>
 8004454:	4abb      	ldr	r2, [pc, #748]	; (8004744 <neai_classification+0x6f0>)
 8004456:	f5a8 6480 	sub.w	r4, r8, #1024	; 0x400
 800445a:	462b      	mov	r3, r5
 800445c:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8004460:	ed82 7a05 	vstr	s14, [r2, #20]
 8004464:	4622      	mov	r2, r4
 8004466:	f853 1b04 	ldr.w	r1, [r3], #4
 800446a:	f842 1b04 	str.w	r1, [r2], #4
 800446e:	4590      	cmp	r8, r2
 8004470:	d1f9      	bne.n	8004466 <neai_classification+0x412>
 8004472:	f8df a300 	ldr.w	sl, [pc, #768]	; 8004774 <neai_classification+0x720>
 8004476:	ed9f 9ac1 	vldr	s18, [pc, #772]	; 800477c <neai_classification+0x728>
 800447a:	21ff      	movs	r1, #255	; 0xff
 800447c:	2000      	movs	r0, #0
 800447e:	f7ff fca7 	bl	8003dd0 <funchclassifier77.constprop.0>
 8004482:	edd4 7a00 	vldr	s15, [r4]
 8004486:	2301      	movs	r3, #1
 8004488:	4655      	mov	r5, sl
 800448a:	ecf5 8a01 	vldmia	r5!, {s17}
 800448e:	eef4 7a68 	vcmp.f32	s15, s17
 8004492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004496:	f103 0201 	add.w	r2, r3, #1
 800449a:	f040 822c 	bne.w	80048f6 <neai_classification+0x8a2>
 800449e:	4545      	cmp	r5, r8
 80044a0:	b293      	uxth	r3, r2
 80044a2:	d1f2      	bne.n	800448a <neai_classification+0x436>
 80044a4:	ee08 3a10 	vmov	s16, r3
 80044a8:	eeba 8acc 	vcvt.f32.s32	s16, s16, #8
 80044ac:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800474c <neai_classification+0x6f8>
 80044b0:	eeb0 0a48 	vmov.f32	s0, s16
 80044b4:	f001 fa70 	bl	8005998 <logf>
 80044b8:	ee68 7a00 	vmul.f32	s15, s16, s0
 80044bc:	4ba1      	ldr	r3, [pc, #644]	; (8004744 <neai_classification+0x6f0>)
 80044be:	ee77 7a89 	vadd.f32	s15, s15, s18
 80044c2:	2000      	movs	r0, #0
 80044c4:	eef1 7a67 	vneg.f32	s15, s15
 80044c8:	edc3 7a01 	vstr	s15, [r3, #4]
 80044cc:	4b9e      	ldr	r3, [pc, #632]	; (8004748 <neai_classification+0x6f4>)
 80044ce:	464d      	mov	r5, r9
 80044d0:	464a      	mov	r2, r9
 80044d2:	f856 1b04 	ldr.w	r1, [r6], #4
 80044d6:	f843 1b04 	str.w	r1, [r3], #4
 80044da:	4598      	cmp	r8, r3
 80044dc:	f842 0b04 	str.w	r0, [r2], #4
 80044e0:	d1f7      	bne.n	80044d2 <neai_classification+0x47e>
 80044e2:	2100      	movs	r1, #0
 80044e4:	4898      	ldr	r0, [pc, #608]	; (8004748 <neai_classification+0x6f4>)
 80044e6:	460a      	mov	r2, r1
 80044e8:	b28b      	uxth	r3, r1
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d205      	bcs.n	80044fa <neai_classification+0x4a6>
 80044ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80044f2:	6806      	ldr	r6, [r0, #0]
 80044f4:	681f      	ldr	r7, [r3, #0]
 80044f6:	6007      	str	r7, [r0, #0]
 80044f8:	601e      	str	r6, [r3, #0]
 80044fa:	2a7f      	cmp	r2, #127	; 0x7f
 80044fc:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004500:	d904      	bls.n	800450c <neai_classification+0x4b8>
 8004502:	1ad2      	subs	r2, r2, r3
 8004504:	b292      	uxth	r2, r2
 8004506:	085b      	lsrs	r3, r3, #1
 8004508:	429a      	cmp	r2, r3
 800450a:	d2fa      	bcs.n	8004502 <neai_classification+0x4ae>
 800450c:	3101      	adds	r1, #1
 800450e:	441a      	add	r2, r3
 8004510:	29ff      	cmp	r1, #255	; 0xff
 8004512:	b292      	uxth	r2, r2
 8004514:	f100 0004 	add.w	r0, r0, #4
 8004518:	d1e6      	bne.n	80044e8 <neai_classification+0x494>
 800451a:	ed9f 8a98 	vldr	s16, [pc, #608]	; 800477c <neai_classification+0x728>
 800451e:	f8cd a004 	str.w	sl, [sp, #4]
 8004522:	2708      	movs	r7, #8
 8004524:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 8004528:	eeb0 aa48 	vmov.f32	s20, s16
 800452c:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8004530:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8004534:	2601      	movs	r6, #1
 8004536:	46ba      	mov	sl, r7
 8004538:	4637      	mov	r7, r6
 800453a:	0076      	lsls	r6, r6, #1
 800453c:	b2b6      	uxth	r6, r6
 800453e:	2f00      	cmp	r7, #0
 8004540:	d051      	beq.n	80045e6 <neai_classification+0x592>
 8004542:	1e78      	subs	r0, r7, #1
 8004544:	b280      	uxth	r0, r0
 8004546:	28ff      	cmp	r0, #255	; 0xff
 8004548:	f04f 0100 	mov.w	r1, #0
 800454c:	eef0 5a4a 	vmov.f32	s11, s20
 8004550:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004554:	bf28      	it	cs
 8004556:	20ff      	movcs	r0, #255	; 0xff
 8004558:	460b      	mov	r3, r1
 800455a:	18fa      	adds	r2, r7, r3
 800455c:	b292      	uxth	r2, r2
 800455e:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8004562:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8004566:	eddc 6a00 	vldr	s13, [ip]
 800456a:	edd2 7a00 	vldr	s15, [r2]
 800456e:	ee26 7a26 	vmul.f32	s14, s12, s13
 8004572:	ee25 5aa7 	vmul.f32	s10, s11, s15
 8004576:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800457a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800457e:	eb04 0e83 	add.w	lr, r4, r3, lsl #2
 8004582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004586:	ee37 7a45 	vsub.f32	s14, s14, s10
 800458a:	edde 6a00 	vldr	s13, [lr]
 800458e:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8004592:	edcc 6a00 	vstr	s13, [ip]
 8004596:	edde 6a00 	vldr	s13, [lr]
 800459a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800459e:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
 80045a2:	ed8e 7a00 	vstr	s14, [lr]
 80045a6:	ed9c 7a00 	vldr	s14, [ip]
 80045aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045ae:	4433      	add	r3, r6
 80045b0:	ed82 7a00 	vstr	s14, [r2]
 80045b4:	ed9c 7a00 	vldr	s14, [ip]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045be:	2bff      	cmp	r3, #255	; 0xff
 80045c0:	edcc 7a00 	vstr	s15, [ip]
 80045c4:	d9c9      	bls.n	800455a <neai_classification+0x506>
 80045c6:	3101      	adds	r1, #1
 80045c8:	ee65 6a88 	vmul.f32	s13, s11, s16
 80045cc:	ee26 7a08 	vmul.f32	s14, s12, s16
 80045d0:	ee66 7a28 	vmul.f32	s15, s12, s17
 80045d4:	ee65 5aa8 	vmul.f32	s11, s11, s17
 80045d8:	b28b      	uxth	r3, r1
 80045da:	4283      	cmp	r3, r0
 80045dc:	ee37 6ae6 	vsub.f32	s12, s15, s13
 80045e0:	ee77 5a25 	vadd.f32	s11, s14, s11
 80045e4:	d9b9      	bls.n	800455a <neai_classification+0x506>
 80045e6:	ee39 0ae8 	vsub.f32	s0, s19, s17
 80045ea:	ee20 0a09 	vmul.f32	s0, s0, s18
 80045ee:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80045f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f6:	f100 81a6 	bmi.w	8004946 <neai_classification+0x8f2>
 80045fa:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80045fe:	ee38 0aa9 	vadd.f32	s0, s17, s19
 8004602:	eeb1 8a48 	vneg.f32	s16, s16
 8004606:	ee20 0a09 	vmul.f32	s0, s0, s18
 800460a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800460e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004612:	f100 8193 	bmi.w	800493c <neai_classification+0x8e8>
 8004616:	eef1 8ac0 	vsqrt.f32	s17, s0
 800461a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800461e:	fa1f fa8a 	uxth.w	sl, sl
 8004622:	f1ba 0f00 	cmp.w	sl, #0
 8004626:	d187      	bne.n	8004538 <neai_classification+0x4e4>
 8004628:	4657      	mov	r7, sl
 800462a:	4a48      	ldr	r2, [pc, #288]	; (800474c <neai_classification+0x6f8>)
 800462c:	f8dd a004 	ldr.w	sl, [sp, #4]
 8004630:	4b45      	ldr	r3, [pc, #276]	; (8004748 <neai_classification+0x6f4>)
 8004632:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004750 <neai_classification+0x6fc>
 8004636:	ed93 7a00 	vldr	s14, [r3]
 800463a:	edd2 7a00 	vldr	s15, [r2]
 800463e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004642:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004646:	eca3 7a01 	vstmia	r3!, {s14}
 800464a:	4598      	cmp	r8, r3
 800464c:	ece2 7a01 	vstmia	r2!, {s15}
 8004650:	d1f1      	bne.n	8004636 <neai_classification+0x5e2>
 8004652:	4a40      	ldr	r2, [pc, #256]	; (8004754 <neai_classification+0x700>)
 8004654:	4b3d      	ldr	r3, [pc, #244]	; (800474c <neai_classification+0x6f8>)
 8004656:	ed93 7a01 	vldr	s14, [r3, #4]
 800465a:	ecfa 7a01 	vldmia	sl!, {s15}
 800465e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8004662:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004666:	4552      	cmp	r2, sl
 8004668:	ee77 7a87 	vadd.f32	s15, s15, s14
 800466c:	ece3 7a01 	vstmia	r3!, {s15}
 8004670:	d1f1      	bne.n	8004656 <neai_classification+0x602>
 8004672:	4c39      	ldr	r4, [pc, #228]	; (8004758 <neai_classification+0x704>)
 8004674:	ecb9 0a01 	vldmia	r9!, {s0}
 8004678:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800467c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004680:	f100 8154 	bmi.w	800492c <neai_classification+0x8d8>
 8004684:	eef1 7ac0 	vsqrt.f32	s15, s0
 8004688:	454c      	cmp	r4, r9
 800468a:	ed49 7a01 	vstr	s15, [r9, #-4]
 800468e:	d1f1      	bne.n	8004674 <neai_classification+0x620>
 8004690:	edd5 7a00 	vldr	s15, [r5]
 8004694:	4a31      	ldr	r2, [pc, #196]	; (800475c <neai_classification+0x708>)
 8004696:	eef0 6a67 	vmov.f32	s13, s15
 800469a:	2000      	movs	r0, #0
 800469c:	4611      	mov	r1, r2
 800469e:	2301      	movs	r3, #1
 80046a0:	ecb1 7a01 	vldmia	r1!, {s14}
 80046a4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80046a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ac:	d403      	bmi.n	80046b6 <neai_classification+0x662>
 80046ae:	bfc4      	itt	gt
 80046b0:	eef0 6a47 	vmovgt.f32	s13, s14
 80046b4:	b298      	uxthgt	r0, r3
 80046b6:	3301      	adds	r3, #1
 80046b8:	2b80      	cmp	r3, #128	; 0x80
 80046ba:	d1f1      	bne.n	80046a0 <neai_classification+0x64c>
 80046bc:	ee07 0a10 	vmov	s14, r0
 80046c0:	4b20      	ldr	r3, [pc, #128]	; (8004744 <neai_classification+0x6f0>)
 80046c2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80046c6:	ed83 7a04 	vstr	s14, [r3, #16]
 80046ca:	ecb2 7a01 	vldmia	r2!, {s14}
 80046ce:	42a2      	cmp	r2, r4
 80046d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046d4:	d1f9      	bne.n	80046ca <neai_classification+0x676>
 80046d6:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <neai_classification+0x6f0>)
 80046d8:	4d21      	ldr	r5, [pc, #132]	; (8004760 <neai_classification+0x70c>)
 80046da:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 80046de:	461e      	mov	r6, r3
 80046e0:	4b20      	ldr	r3, [pc, #128]	; (8004764 <neai_classification+0x710>)
 80046e2:	f8df a094 	ldr.w	sl, [pc, #148]	; 8004778 <neai_classification+0x724>
 80046e6:	f8d3 8000 	ldr.w	r8, [r3]
 80046ea:	4b1f      	ldr	r3, [pc, #124]	; (8004768 <neai_classification+0x714>)
 80046ec:	f8d3 c000 	ldr.w	ip, [r3]
 80046f0:	4b1e      	ldr	r3, [pc, #120]	; (800476c <neai_classification+0x718>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	9304      	str	r3, [sp, #16]
 80046f6:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80046fa:	eb03 0488 	add.w	r4, r3, r8, lsl #2
 80046fe:	f10c 030c 	add.w	r3, ip, #12
 8004702:	9202      	str	r2, [sp, #8]
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800470a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800470c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800470e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004712:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004716:	46d1      	mov	r9, sl
 8004718:	f04f 0e00 	mov.w	lr, #0
 800471c:	f1b8 0f00 	cmp.w	r8, #0
 8004720:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800477c <neai_classification+0x728>
 8004724:	dd2c      	ble.n	8004780 <neai_classification+0x72c>
 8004726:	9b04      	ldr	r3, [sp, #16]
 8004728:	4a0d      	ldr	r2, [pc, #52]	; (8004760 <neai_classification+0x70c>)
 800472a:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 800472e:	ecf3 6a01 	vldmia	r3!, {s13}
 8004732:	ecf2 7a01 	vldmia	r2!, {s15}
 8004736:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800473a:	42a3      	cmp	r3, r4
 800473c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004740:	d1f5      	bne.n	800472e <neai_classification+0x6da>
 8004742:	e01d      	b.n	8004780 <neai_classification+0x72c>
 8004744:	20000d98 	.word	0x20000d98
 8004748:	20000998 	.word	0x20000998
 800474c:	20000598 	.word	0x20000598
 8004750:	3c000000 	.word	0x3c000000
 8004754:	20000b9c 	.word	0x20000b9c
 8004758:	20000798 	.word	0x20000798
 800475c:	2000059c 	.word	0x2000059c
 8004760:	20000e04 	.word	0x20000e04
 8004764:	20000594 	.word	0x20000594
 8004768:	2000058c 	.word	0x2000058c
 800476c:	20000590 	.word	0x20000590
 8004770:	20000d98 	.word	0x20000d98
 8004774:	2000099c 	.word	0x2000099c
 8004778:	20000584 	.word	0x20000584
 800477c:	00000000 	.word	0x00000000
 8004780:	ecfc 7a01 	vldmia	ip!, {s15}
 8004784:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004788:	44c6      	add	lr, r8
 800478a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004792:	bfd4      	ite	le
 8004794:	2301      	movle	r3, #1
 8004796:	2302      	movgt	r3, #2
 8004798:	f829 3b02 	strh.w	r3, [r9], #2
 800479c:	9b02      	ldr	r3, [sp, #8]
 800479e:	441c      	add	r4, r3
 80047a0:	9b01      	ldr	r3, [sp, #4]
 80047a2:	4563      	cmp	r3, ip
 80047a4:	d1ba      	bne.n	800471c <neai_classification+0x6c8>
 80047a6:	f8ba 3000 	ldrh.w	r3, [sl]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d005      	beq.n	80047ba <neai_classification+0x766>
 80047ae:	f1a3 0302 	sub.w	r3, r3, #2
 80047b2:	fab3 f383 	clz	r3, r3
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80047be:	f8aa 3000 	strh.w	r3, [sl]
 80047c2:	2901      	cmp	r1, #1
 80047c4:	d003      	beq.n	80047ce <neai_classification+0x77a>
 80047c6:	2902      	cmp	r1, #2
 80047c8:	bf14      	ite	ne
 80047ca:	2100      	movne	r1, #0
 80047cc:	2103      	moveq	r1, #3
 80047ce:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80047d2:	f8aa 1002 	strh.w	r1, [sl, #2]
 80047d6:	2a01      	cmp	r2, #1
 80047d8:	f000 80a1 	beq.w	800491e <neai_classification+0x8ca>
 80047dc:	2a02      	cmp	r2, #2
 80047de:	bf08      	it	eq
 80047e0:	2703      	moveq	r7, #3
 80047e2:	ed1f 8a1a 	vldr	s16, [pc, #-104]	; 800477c <neai_classification+0x728>
 80047e6:	f8aa 7004 	strh.w	r7, [sl, #4]
 80047ea:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 80047ee:	4403      	add	r3, r0
 80047f0:	ed8b 8a00 	vstr	s16, [fp]
 80047f4:	ed8b 8a01 	vstr	s16, [fp, #4]
 80047f8:	ed8b 8a02 	vstr	s16, [fp, #8]
 80047fc:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
 8004800:	edd2 7a00 	vldr	s15, [r2]
 8004804:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004808:	ee77 7a87 	vadd.f32	s15, s15, s14
 800480c:	4401      	add	r1, r0
 800480e:	edc2 7a00 	vstr	s15, [r2]
 8004812:	eb0b 0281 	add.w	r2, fp, r1, lsl #2
 8004816:	edd2 7a00 	vldr	s15, [r2]
 800481a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800481e:	183b      	adds	r3, r7, r0
 8004820:	edc2 7a00 	vstr	s15, [r2]
 8004824:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8004828:	edd3 7a00 	vldr	s15, [r3]
 800482c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004830:	eeb1 9a04 	vmov.f32	s18, #20	; 0x40a00000  5.0
 8004834:	edc3 7a00 	vstr	s15, [r3]
 8004838:	ed9b 7a00 	vldr	s14, [fp]
 800483c:	eddb 7a01 	vldr	s15, [fp, #4]
 8004840:	eddb 8a02 	vldr	s17, [fp, #8]
 8004844:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484c:	bfd8      	it	le
 800484e:	eef0 7a47 	vmovle.f32	s15, s14
 8004852:	eef4 7ae8 	vcmpe.f32	s15, s17
 8004856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800485a:	465c      	mov	r4, fp
 800485c:	bf58      	it	pl
 800485e:	eef0 8a67 	vmovpl.f32	s17, s15
 8004862:	f10b 050c 	add.w	r5, fp, #12
 8004866:	edd4 7a00 	vldr	s15, [r4]
 800486a:	ee77 7ae8 	vsub.f32	s15, s15, s17
 800486e:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004872:	ee17 0a90 	vmov	r0, s15
 8004876:	f7fb fe67 	bl	8000548 <__aeabi_f2d>
 800487a:	ec41 0b10 	vmov	d0, r0, r1
 800487e:	f001 f843 	bl	8005908 <exp>
 8004882:	ec51 0b10 	vmov	r0, r1, d0
 8004886:	f7fc f979 	bl	8000b7c <__aeabi_d2f>
 800488a:	f844 0b04 	str.w	r0, [r4], #4
 800488e:	ee07 0a90 	vmov	s15, r0
 8004892:	42ac      	cmp	r4, r5
 8004894:	ee38 8a27 	vadd.f32	s16, s16, s15
 8004898:	d1e5      	bne.n	8004866 <neai_classification+0x812>
 800489a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800489e:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80048a2:	9a05      	ldr	r2, [sp, #20]
 80048a4:	9803      	ldr	r0, [sp, #12]
 80048a6:	eddb 6a00 	vldr	s13, [fp]
 80048aa:	ed9b 7a01 	vldr	s14, [fp, #4]
 80048ae:	ed9b 6a02 	vldr	s12, [fp, #8]
 80048b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80048b6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80048ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 80048be:	eef4 6ac7 	vcmpe.f32	s13, s14
 80048c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c6:	ed8b 7a01 	vstr	s14, [fp, #4]
 80048ca:	bf58      	it	pl
 80048cc:	eeb0 7a66 	vmovpl.f32	s14, s13
 80048d0:	eeb4 7a67 	vcmp.f32	s14, s15
 80048d4:	bf54      	ite	pl
 80048d6:	2301      	movpl	r3, #1
 80048d8:	2302      	movmi	r3, #2
 80048da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048de:	bf48      	it	mi
 80048e0:	2303      	movmi	r3, #3
 80048e2:	edcb 6a00 	vstr	s13, [fp]
 80048e6:	edcb 7a02 	vstr	s15, [fp, #8]
 80048ea:	8013      	strh	r3, [r2, #0]
 80048ec:	b007      	add	sp, #28
 80048ee:	ecbd 8b06 	vpop	{d8-d10}
 80048f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048f6:	ee08 3a10 	vmov	s16, r3
 80048fa:	eeba 8acc 	vcvt.f32.s32	s16, s16, #8
 80048fe:	eeb0 0a48 	vmov.f32	s0, s16
 8004902:	f001 f849 	bl	8005998 <logf>
 8004906:	ee28 8a00 	vmul.f32	s16, s16, s0
 800490a:	4545      	cmp	r5, r8
 800490c:	ee39 9a08 	vadd.f32	s18, s18, s16
 8004910:	f04f 0301 	mov.w	r3, #1
 8004914:	eef0 7a68 	vmov.f32	s15, s17
 8004918:	f47f adb7 	bne.w	800448a <neai_classification+0x436>
 800491c:	e5c2      	b.n	80044a4 <neai_classification+0x450>
 800491e:	2702      	movs	r7, #2
 8004920:	e75f      	b.n	80047e2 <neai_classification+0x78e>
 8004922:	f001 f867 	bl	80059f4 <sqrtf>
 8004926:	eeb0 7a40 	vmov.f32	s14, s0
 800492a:	e44f      	b.n	80041cc <neai_classification+0x178>
 800492c:	f001 f862 	bl	80059f4 <sqrtf>
 8004930:	454c      	cmp	r4, r9
 8004932:	ed09 0a01 	vstr	s0, [r9, #-4]
 8004936:	f47f ae9d 	bne.w	8004674 <neai_classification+0x620>
 800493a:	e6a9      	b.n	8004690 <neai_classification+0x63c>
 800493c:	f001 f85a 	bl	80059f4 <sqrtf>
 8004940:	eef0 8a40 	vmov.f32	s17, s0
 8004944:	e669      	b.n	800461a <neai_classification+0x5c6>
 8004946:	f001 f855 	bl	80059f4 <sqrtf>
 800494a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800494e:	eeb1 8a40 	vneg.f32	s16, s0
 8004952:	ee28 0a89 	vmul.f32	s0, s17, s18
 8004956:	e65e      	b.n	8004616 <neai_classification+0x5c2>
 8004958:	f001 f84c 	bl	80059f4 <sqrtf>
 800495c:	eef0 7a40 	vmov.f32	s15, s0
 8004960:	e576      	b.n	8004450 <neai_classification+0x3fc>
 8004962:	f001 f847 	bl	80059f4 <sqrtf>
 8004966:	eeb0 7a40 	vmov.f32	s14, s0
 800496a:	e486      	b.n	800427a <neai_classification+0x226>

0800496c <std>:
 800496c:	2300      	movs	r3, #0
 800496e:	b510      	push	{r4, lr}
 8004970:	4604      	mov	r4, r0
 8004972:	e9c0 3300 	strd	r3, r3, [r0]
 8004976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800497a:	6083      	str	r3, [r0, #8]
 800497c:	8181      	strh	r1, [r0, #12]
 800497e:	6643      	str	r3, [r0, #100]	; 0x64
 8004980:	81c2      	strh	r2, [r0, #14]
 8004982:	6183      	str	r3, [r0, #24]
 8004984:	4619      	mov	r1, r3
 8004986:	2208      	movs	r2, #8
 8004988:	305c      	adds	r0, #92	; 0x5c
 800498a:	f000 f9ff 	bl	8004d8c <memset>
 800498e:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <std+0x58>)
 8004990:	6263      	str	r3, [r4, #36]	; 0x24
 8004992:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <std+0x5c>)
 8004994:	62a3      	str	r3, [r4, #40]	; 0x28
 8004996:	4b0d      	ldr	r3, [pc, #52]	; (80049cc <std+0x60>)
 8004998:	62e3      	str	r3, [r4, #44]	; 0x2c
 800499a:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <std+0x64>)
 800499c:	6323      	str	r3, [r4, #48]	; 0x30
 800499e:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <std+0x68>)
 80049a0:	6224      	str	r4, [r4, #32]
 80049a2:	429c      	cmp	r4, r3
 80049a4:	d006      	beq.n	80049b4 <std+0x48>
 80049a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80049aa:	4294      	cmp	r4, r2
 80049ac:	d002      	beq.n	80049b4 <std+0x48>
 80049ae:	33d0      	adds	r3, #208	; 0xd0
 80049b0:	429c      	cmp	r4, r3
 80049b2:	d105      	bne.n	80049c0 <std+0x54>
 80049b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049bc:	f000 ba5e 	b.w	8004e7c <__retarget_lock_init_recursive>
 80049c0:	bd10      	pop	{r4, pc}
 80049c2:	bf00      	nop
 80049c4:	08004bdd 	.word	0x08004bdd
 80049c8:	08004bff 	.word	0x08004bff
 80049cc:	08004c37 	.word	0x08004c37
 80049d0:	08004c5b 	.word	0x08004c5b
 80049d4:	20000e34 	.word	0x20000e34

080049d8 <stdio_exit_handler>:
 80049d8:	4a02      	ldr	r2, [pc, #8]	; (80049e4 <stdio_exit_handler+0xc>)
 80049da:	4903      	ldr	r1, [pc, #12]	; (80049e8 <stdio_exit_handler+0x10>)
 80049dc:	4803      	ldr	r0, [pc, #12]	; (80049ec <stdio_exit_handler+0x14>)
 80049de:	f000 b869 	b.w	8004ab4 <_fwalk_sglue>
 80049e2:	bf00      	nop
 80049e4:	2000001c 	.word	0x2000001c
 80049e8:	08005729 	.word	0x08005729
 80049ec:	20000028 	.word	0x20000028

080049f0 <cleanup_stdio>:
 80049f0:	6841      	ldr	r1, [r0, #4]
 80049f2:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <cleanup_stdio+0x34>)
 80049f4:	4299      	cmp	r1, r3
 80049f6:	b510      	push	{r4, lr}
 80049f8:	4604      	mov	r4, r0
 80049fa:	d001      	beq.n	8004a00 <cleanup_stdio+0x10>
 80049fc:	f000 fe94 	bl	8005728 <_fflush_r>
 8004a00:	68a1      	ldr	r1, [r4, #8]
 8004a02:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <cleanup_stdio+0x38>)
 8004a04:	4299      	cmp	r1, r3
 8004a06:	d002      	beq.n	8004a0e <cleanup_stdio+0x1e>
 8004a08:	4620      	mov	r0, r4
 8004a0a:	f000 fe8d 	bl	8005728 <_fflush_r>
 8004a0e:	68e1      	ldr	r1, [r4, #12]
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <cleanup_stdio+0x3c>)
 8004a12:	4299      	cmp	r1, r3
 8004a14:	d004      	beq.n	8004a20 <cleanup_stdio+0x30>
 8004a16:	4620      	mov	r0, r4
 8004a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a1c:	f000 be84 	b.w	8005728 <_fflush_r>
 8004a20:	bd10      	pop	{r4, pc}
 8004a22:	bf00      	nop
 8004a24:	20000e34 	.word	0x20000e34
 8004a28:	20000e9c 	.word	0x20000e9c
 8004a2c:	20000f04 	.word	0x20000f04

08004a30 <global_stdio_init.part.0>:
 8004a30:	b510      	push	{r4, lr}
 8004a32:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <global_stdio_init.part.0+0x30>)
 8004a34:	4c0b      	ldr	r4, [pc, #44]	; (8004a64 <global_stdio_init.part.0+0x34>)
 8004a36:	4a0c      	ldr	r2, [pc, #48]	; (8004a68 <global_stdio_init.part.0+0x38>)
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2104      	movs	r1, #4
 8004a40:	f7ff ff94 	bl	800496c <std>
 8004a44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004a48:	2201      	movs	r2, #1
 8004a4a:	2109      	movs	r1, #9
 8004a4c:	f7ff ff8e 	bl	800496c <std>
 8004a50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004a54:	2202      	movs	r2, #2
 8004a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a5a:	2112      	movs	r1, #18
 8004a5c:	f7ff bf86 	b.w	800496c <std>
 8004a60:	20000f6c 	.word	0x20000f6c
 8004a64:	20000e34 	.word	0x20000e34
 8004a68:	080049d9 	.word	0x080049d9

08004a6c <__sfp_lock_acquire>:
 8004a6c:	4801      	ldr	r0, [pc, #4]	; (8004a74 <__sfp_lock_acquire+0x8>)
 8004a6e:	f000 ba06 	b.w	8004e7e <__retarget_lock_acquire_recursive>
 8004a72:	bf00      	nop
 8004a74:	20000f75 	.word	0x20000f75

08004a78 <__sfp_lock_release>:
 8004a78:	4801      	ldr	r0, [pc, #4]	; (8004a80 <__sfp_lock_release+0x8>)
 8004a7a:	f000 ba01 	b.w	8004e80 <__retarget_lock_release_recursive>
 8004a7e:	bf00      	nop
 8004a80:	20000f75 	.word	0x20000f75

08004a84 <__sinit>:
 8004a84:	b510      	push	{r4, lr}
 8004a86:	4604      	mov	r4, r0
 8004a88:	f7ff fff0 	bl	8004a6c <__sfp_lock_acquire>
 8004a8c:	6a23      	ldr	r3, [r4, #32]
 8004a8e:	b11b      	cbz	r3, 8004a98 <__sinit+0x14>
 8004a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a94:	f7ff bff0 	b.w	8004a78 <__sfp_lock_release>
 8004a98:	4b04      	ldr	r3, [pc, #16]	; (8004aac <__sinit+0x28>)
 8004a9a:	6223      	str	r3, [r4, #32]
 8004a9c:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <__sinit+0x2c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1f5      	bne.n	8004a90 <__sinit+0xc>
 8004aa4:	f7ff ffc4 	bl	8004a30 <global_stdio_init.part.0>
 8004aa8:	e7f2      	b.n	8004a90 <__sinit+0xc>
 8004aaa:	bf00      	nop
 8004aac:	080049f1 	.word	0x080049f1
 8004ab0:	20000f6c 	.word	0x20000f6c

08004ab4 <_fwalk_sglue>:
 8004ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ab8:	4607      	mov	r7, r0
 8004aba:	4688      	mov	r8, r1
 8004abc:	4614      	mov	r4, r2
 8004abe:	2600      	movs	r6, #0
 8004ac0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ac4:	f1b9 0901 	subs.w	r9, r9, #1
 8004ac8:	d505      	bpl.n	8004ad6 <_fwalk_sglue+0x22>
 8004aca:	6824      	ldr	r4, [r4, #0]
 8004acc:	2c00      	cmp	r4, #0
 8004ace:	d1f7      	bne.n	8004ac0 <_fwalk_sglue+0xc>
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ad6:	89ab      	ldrh	r3, [r5, #12]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d907      	bls.n	8004aec <_fwalk_sglue+0x38>
 8004adc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	d003      	beq.n	8004aec <_fwalk_sglue+0x38>
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	47c0      	blx	r8
 8004aea:	4306      	orrs	r6, r0
 8004aec:	3568      	adds	r5, #104	; 0x68
 8004aee:	e7e9      	b.n	8004ac4 <_fwalk_sglue+0x10>

08004af0 <iprintf>:
 8004af0:	b40f      	push	{r0, r1, r2, r3}
 8004af2:	b507      	push	{r0, r1, r2, lr}
 8004af4:	4906      	ldr	r1, [pc, #24]	; (8004b10 <iprintf+0x20>)
 8004af6:	ab04      	add	r3, sp, #16
 8004af8:	6808      	ldr	r0, [r1, #0]
 8004afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8004afe:	6881      	ldr	r1, [r0, #8]
 8004b00:	9301      	str	r3, [sp, #4]
 8004b02:	f000 fae1 	bl	80050c8 <_vfiprintf_r>
 8004b06:	b003      	add	sp, #12
 8004b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b0c:	b004      	add	sp, #16
 8004b0e:	4770      	bx	lr
 8004b10:	20000074 	.word	0x20000074

08004b14 <putchar>:
 8004b14:	4b02      	ldr	r3, [pc, #8]	; (8004b20 <putchar+0xc>)
 8004b16:	4601      	mov	r1, r0
 8004b18:	6818      	ldr	r0, [r3, #0]
 8004b1a:	6882      	ldr	r2, [r0, #8]
 8004b1c:	f000 be8e 	b.w	800583c <_putc_r>
 8004b20:	20000074 	.word	0x20000074

08004b24 <_puts_r>:
 8004b24:	6a03      	ldr	r3, [r0, #32]
 8004b26:	b570      	push	{r4, r5, r6, lr}
 8004b28:	6884      	ldr	r4, [r0, #8]
 8004b2a:	4605      	mov	r5, r0
 8004b2c:	460e      	mov	r6, r1
 8004b2e:	b90b      	cbnz	r3, 8004b34 <_puts_r+0x10>
 8004b30:	f7ff ffa8 	bl	8004a84 <__sinit>
 8004b34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b36:	07db      	lsls	r3, r3, #31
 8004b38:	d405      	bmi.n	8004b46 <_puts_r+0x22>
 8004b3a:	89a3      	ldrh	r3, [r4, #12]
 8004b3c:	0598      	lsls	r0, r3, #22
 8004b3e:	d402      	bmi.n	8004b46 <_puts_r+0x22>
 8004b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b42:	f000 f99c 	bl	8004e7e <__retarget_lock_acquire_recursive>
 8004b46:	89a3      	ldrh	r3, [r4, #12]
 8004b48:	0719      	lsls	r1, r3, #28
 8004b4a:	d513      	bpl.n	8004b74 <_puts_r+0x50>
 8004b4c:	6923      	ldr	r3, [r4, #16]
 8004b4e:	b18b      	cbz	r3, 8004b74 <_puts_r+0x50>
 8004b50:	3e01      	subs	r6, #1
 8004b52:	68a3      	ldr	r3, [r4, #8]
 8004b54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	60a3      	str	r3, [r4, #8]
 8004b5c:	b9e9      	cbnz	r1, 8004b9a <_puts_r+0x76>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	da2e      	bge.n	8004bc0 <_puts_r+0x9c>
 8004b62:	4622      	mov	r2, r4
 8004b64:	210a      	movs	r1, #10
 8004b66:	4628      	mov	r0, r5
 8004b68:	f000 f87b 	bl	8004c62 <__swbuf_r>
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	d007      	beq.n	8004b80 <_puts_r+0x5c>
 8004b70:	250a      	movs	r5, #10
 8004b72:	e007      	b.n	8004b84 <_puts_r+0x60>
 8004b74:	4621      	mov	r1, r4
 8004b76:	4628      	mov	r0, r5
 8004b78:	f000 f8b0 	bl	8004cdc <__swsetup_r>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	d0e7      	beq.n	8004b50 <_puts_r+0x2c>
 8004b80:	f04f 35ff 	mov.w	r5, #4294967295
 8004b84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b86:	07da      	lsls	r2, r3, #31
 8004b88:	d405      	bmi.n	8004b96 <_puts_r+0x72>
 8004b8a:	89a3      	ldrh	r3, [r4, #12]
 8004b8c:	059b      	lsls	r3, r3, #22
 8004b8e:	d402      	bmi.n	8004b96 <_puts_r+0x72>
 8004b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b92:	f000 f975 	bl	8004e80 <__retarget_lock_release_recursive>
 8004b96:	4628      	mov	r0, r5
 8004b98:	bd70      	pop	{r4, r5, r6, pc}
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	da04      	bge.n	8004ba8 <_puts_r+0x84>
 8004b9e:	69a2      	ldr	r2, [r4, #24]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	dc06      	bgt.n	8004bb2 <_puts_r+0x8e>
 8004ba4:	290a      	cmp	r1, #10
 8004ba6:	d004      	beq.n	8004bb2 <_puts_r+0x8e>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	6022      	str	r2, [r4, #0]
 8004bae:	7019      	strb	r1, [r3, #0]
 8004bb0:	e7cf      	b.n	8004b52 <_puts_r+0x2e>
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	f000 f854 	bl	8004c62 <__swbuf_r>
 8004bba:	3001      	adds	r0, #1
 8004bbc:	d1c9      	bne.n	8004b52 <_puts_r+0x2e>
 8004bbe:	e7df      	b.n	8004b80 <_puts_r+0x5c>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	250a      	movs	r5, #10
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	6022      	str	r2, [r4, #0]
 8004bc8:	701d      	strb	r5, [r3, #0]
 8004bca:	e7db      	b.n	8004b84 <_puts_r+0x60>

08004bcc <puts>:
 8004bcc:	4b02      	ldr	r3, [pc, #8]	; (8004bd8 <puts+0xc>)
 8004bce:	4601      	mov	r1, r0
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	f7ff bfa7 	b.w	8004b24 <_puts_r>
 8004bd6:	bf00      	nop
 8004bd8:	20000074 	.word	0x20000074

08004bdc <__sread>:
 8004bdc:	b510      	push	{r4, lr}
 8004bde:	460c      	mov	r4, r1
 8004be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be4:	f000 f8fc 	bl	8004de0 <_read_r>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	bfab      	itete	ge
 8004bec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bee:	89a3      	ldrhlt	r3, [r4, #12]
 8004bf0:	181b      	addge	r3, r3, r0
 8004bf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bf6:	bfac      	ite	ge
 8004bf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bfa:	81a3      	strhlt	r3, [r4, #12]
 8004bfc:	bd10      	pop	{r4, pc}

08004bfe <__swrite>:
 8004bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c02:	461f      	mov	r7, r3
 8004c04:	898b      	ldrh	r3, [r1, #12]
 8004c06:	05db      	lsls	r3, r3, #23
 8004c08:	4605      	mov	r5, r0
 8004c0a:	460c      	mov	r4, r1
 8004c0c:	4616      	mov	r6, r2
 8004c0e:	d505      	bpl.n	8004c1c <__swrite+0x1e>
 8004c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c14:	2302      	movs	r3, #2
 8004c16:	2200      	movs	r2, #0
 8004c18:	f000 f8d0 	bl	8004dbc <_lseek_r>
 8004c1c:	89a3      	ldrh	r3, [r4, #12]
 8004c1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c26:	81a3      	strh	r3, [r4, #12]
 8004c28:	4632      	mov	r2, r6
 8004c2a:	463b      	mov	r3, r7
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c32:	f000 b8e7 	b.w	8004e04 <_write_r>

08004c36 <__sseek>:
 8004c36:	b510      	push	{r4, lr}
 8004c38:	460c      	mov	r4, r1
 8004c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c3e:	f000 f8bd 	bl	8004dbc <_lseek_r>
 8004c42:	1c43      	adds	r3, r0, #1
 8004c44:	89a3      	ldrh	r3, [r4, #12]
 8004c46:	bf15      	itete	ne
 8004c48:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c52:	81a3      	strheq	r3, [r4, #12]
 8004c54:	bf18      	it	ne
 8004c56:	81a3      	strhne	r3, [r4, #12]
 8004c58:	bd10      	pop	{r4, pc}

08004c5a <__sclose>:
 8004c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c5e:	f000 b89d 	b.w	8004d9c <_close_r>

08004c62 <__swbuf_r>:
 8004c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c64:	460e      	mov	r6, r1
 8004c66:	4614      	mov	r4, r2
 8004c68:	4605      	mov	r5, r0
 8004c6a:	b118      	cbz	r0, 8004c74 <__swbuf_r+0x12>
 8004c6c:	6a03      	ldr	r3, [r0, #32]
 8004c6e:	b90b      	cbnz	r3, 8004c74 <__swbuf_r+0x12>
 8004c70:	f7ff ff08 	bl	8004a84 <__sinit>
 8004c74:	69a3      	ldr	r3, [r4, #24]
 8004c76:	60a3      	str	r3, [r4, #8]
 8004c78:	89a3      	ldrh	r3, [r4, #12]
 8004c7a:	071a      	lsls	r2, r3, #28
 8004c7c:	d525      	bpl.n	8004cca <__swbuf_r+0x68>
 8004c7e:	6923      	ldr	r3, [r4, #16]
 8004c80:	b31b      	cbz	r3, 8004cca <__swbuf_r+0x68>
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	6922      	ldr	r2, [r4, #16]
 8004c86:	1a98      	subs	r0, r3, r2
 8004c88:	6963      	ldr	r3, [r4, #20]
 8004c8a:	b2f6      	uxtb	r6, r6
 8004c8c:	4283      	cmp	r3, r0
 8004c8e:	4637      	mov	r7, r6
 8004c90:	dc04      	bgt.n	8004c9c <__swbuf_r+0x3a>
 8004c92:	4621      	mov	r1, r4
 8004c94:	4628      	mov	r0, r5
 8004c96:	f000 fd47 	bl	8005728 <_fflush_r>
 8004c9a:	b9e0      	cbnz	r0, 8004cd6 <__swbuf_r+0x74>
 8004c9c:	68a3      	ldr	r3, [r4, #8]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	60a3      	str	r3, [r4, #8]
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	6022      	str	r2, [r4, #0]
 8004ca8:	701e      	strb	r6, [r3, #0]
 8004caa:	6962      	ldr	r2, [r4, #20]
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d004      	beq.n	8004cbc <__swbuf_r+0x5a>
 8004cb2:	89a3      	ldrh	r3, [r4, #12]
 8004cb4:	07db      	lsls	r3, r3, #31
 8004cb6:	d506      	bpl.n	8004cc6 <__swbuf_r+0x64>
 8004cb8:	2e0a      	cmp	r6, #10
 8004cba:	d104      	bne.n	8004cc6 <__swbuf_r+0x64>
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f000 fd32 	bl	8005728 <_fflush_r>
 8004cc4:	b938      	cbnz	r0, 8004cd6 <__swbuf_r+0x74>
 8004cc6:	4638      	mov	r0, r7
 8004cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cca:	4621      	mov	r1, r4
 8004ccc:	4628      	mov	r0, r5
 8004cce:	f000 f805 	bl	8004cdc <__swsetup_r>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d0d5      	beq.n	8004c82 <__swbuf_r+0x20>
 8004cd6:	f04f 37ff 	mov.w	r7, #4294967295
 8004cda:	e7f4      	b.n	8004cc6 <__swbuf_r+0x64>

08004cdc <__swsetup_r>:
 8004cdc:	b538      	push	{r3, r4, r5, lr}
 8004cde:	4b2a      	ldr	r3, [pc, #168]	; (8004d88 <__swsetup_r+0xac>)
 8004ce0:	4605      	mov	r5, r0
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	b118      	cbz	r0, 8004cf0 <__swsetup_r+0x14>
 8004ce8:	6a03      	ldr	r3, [r0, #32]
 8004cea:	b90b      	cbnz	r3, 8004cf0 <__swsetup_r+0x14>
 8004cec:	f7ff feca 	bl	8004a84 <__sinit>
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cf6:	0718      	lsls	r0, r3, #28
 8004cf8:	d422      	bmi.n	8004d40 <__swsetup_r+0x64>
 8004cfa:	06d9      	lsls	r1, r3, #27
 8004cfc:	d407      	bmi.n	8004d0e <__swsetup_r+0x32>
 8004cfe:	2309      	movs	r3, #9
 8004d00:	602b      	str	r3, [r5, #0]
 8004d02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d06:	81a3      	strh	r3, [r4, #12]
 8004d08:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0c:	e034      	b.n	8004d78 <__swsetup_r+0x9c>
 8004d0e:	0758      	lsls	r0, r3, #29
 8004d10:	d512      	bpl.n	8004d38 <__swsetup_r+0x5c>
 8004d12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d14:	b141      	cbz	r1, 8004d28 <__swsetup_r+0x4c>
 8004d16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d1a:	4299      	cmp	r1, r3
 8004d1c:	d002      	beq.n	8004d24 <__swsetup_r+0x48>
 8004d1e:	4628      	mov	r0, r5
 8004d20:	f000 f8b0 	bl	8004e84 <_free_r>
 8004d24:	2300      	movs	r3, #0
 8004d26:	6363      	str	r3, [r4, #52]	; 0x34
 8004d28:	89a3      	ldrh	r3, [r4, #12]
 8004d2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d2e:	81a3      	strh	r3, [r4, #12]
 8004d30:	2300      	movs	r3, #0
 8004d32:	6063      	str	r3, [r4, #4]
 8004d34:	6923      	ldr	r3, [r4, #16]
 8004d36:	6023      	str	r3, [r4, #0]
 8004d38:	89a3      	ldrh	r3, [r4, #12]
 8004d3a:	f043 0308 	orr.w	r3, r3, #8
 8004d3e:	81a3      	strh	r3, [r4, #12]
 8004d40:	6923      	ldr	r3, [r4, #16]
 8004d42:	b94b      	cbnz	r3, 8004d58 <__swsetup_r+0x7c>
 8004d44:	89a3      	ldrh	r3, [r4, #12]
 8004d46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d4e:	d003      	beq.n	8004d58 <__swsetup_r+0x7c>
 8004d50:	4621      	mov	r1, r4
 8004d52:	4628      	mov	r0, r5
 8004d54:	f000 fd36 	bl	80057c4 <__smakebuf_r>
 8004d58:	89a0      	ldrh	r0, [r4, #12]
 8004d5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d5e:	f010 0301 	ands.w	r3, r0, #1
 8004d62:	d00a      	beq.n	8004d7a <__swsetup_r+0x9e>
 8004d64:	2300      	movs	r3, #0
 8004d66:	60a3      	str	r3, [r4, #8]
 8004d68:	6963      	ldr	r3, [r4, #20]
 8004d6a:	425b      	negs	r3, r3
 8004d6c:	61a3      	str	r3, [r4, #24]
 8004d6e:	6923      	ldr	r3, [r4, #16]
 8004d70:	b943      	cbnz	r3, 8004d84 <__swsetup_r+0xa8>
 8004d72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d76:	d1c4      	bne.n	8004d02 <__swsetup_r+0x26>
 8004d78:	bd38      	pop	{r3, r4, r5, pc}
 8004d7a:	0781      	lsls	r1, r0, #30
 8004d7c:	bf58      	it	pl
 8004d7e:	6963      	ldrpl	r3, [r4, #20]
 8004d80:	60a3      	str	r3, [r4, #8]
 8004d82:	e7f4      	b.n	8004d6e <__swsetup_r+0x92>
 8004d84:	2000      	movs	r0, #0
 8004d86:	e7f7      	b.n	8004d78 <__swsetup_r+0x9c>
 8004d88:	20000074 	.word	0x20000074

08004d8c <memset>:
 8004d8c:	4402      	add	r2, r0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d100      	bne.n	8004d96 <memset+0xa>
 8004d94:	4770      	bx	lr
 8004d96:	f803 1b01 	strb.w	r1, [r3], #1
 8004d9a:	e7f9      	b.n	8004d90 <memset+0x4>

08004d9c <_close_r>:
 8004d9c:	b538      	push	{r3, r4, r5, lr}
 8004d9e:	4d06      	ldr	r5, [pc, #24]	; (8004db8 <_close_r+0x1c>)
 8004da0:	2300      	movs	r3, #0
 8004da2:	4604      	mov	r4, r0
 8004da4:	4608      	mov	r0, r1
 8004da6:	602b      	str	r3, [r5, #0]
 8004da8:	f7fc fc6b 	bl	8001682 <_close>
 8004dac:	1c43      	adds	r3, r0, #1
 8004dae:	d102      	bne.n	8004db6 <_close_r+0x1a>
 8004db0:	682b      	ldr	r3, [r5, #0]
 8004db2:	b103      	cbz	r3, 8004db6 <_close_r+0x1a>
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	bd38      	pop	{r3, r4, r5, pc}
 8004db8:	20000f70 	.word	0x20000f70

08004dbc <_lseek_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	4d07      	ldr	r5, [pc, #28]	; (8004ddc <_lseek_r+0x20>)
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	4608      	mov	r0, r1
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	602a      	str	r2, [r5, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f7fc fc80 	bl	80016d0 <_lseek>
 8004dd0:	1c43      	adds	r3, r0, #1
 8004dd2:	d102      	bne.n	8004dda <_lseek_r+0x1e>
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	b103      	cbz	r3, 8004dda <_lseek_r+0x1e>
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	bd38      	pop	{r3, r4, r5, pc}
 8004ddc:	20000f70 	.word	0x20000f70

08004de0 <_read_r>:
 8004de0:	b538      	push	{r3, r4, r5, lr}
 8004de2:	4d07      	ldr	r5, [pc, #28]	; (8004e00 <_read_r+0x20>)
 8004de4:	4604      	mov	r4, r0
 8004de6:	4608      	mov	r0, r1
 8004de8:	4611      	mov	r1, r2
 8004dea:	2200      	movs	r2, #0
 8004dec:	602a      	str	r2, [r5, #0]
 8004dee:	461a      	mov	r2, r3
 8004df0:	f7fc fc0e 	bl	8001610 <_read>
 8004df4:	1c43      	adds	r3, r0, #1
 8004df6:	d102      	bne.n	8004dfe <_read_r+0x1e>
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	b103      	cbz	r3, 8004dfe <_read_r+0x1e>
 8004dfc:	6023      	str	r3, [r4, #0]
 8004dfe:	bd38      	pop	{r3, r4, r5, pc}
 8004e00:	20000f70 	.word	0x20000f70

08004e04 <_write_r>:
 8004e04:	b538      	push	{r3, r4, r5, lr}
 8004e06:	4d07      	ldr	r5, [pc, #28]	; (8004e24 <_write_r+0x20>)
 8004e08:	4604      	mov	r4, r0
 8004e0a:	4608      	mov	r0, r1
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	2200      	movs	r2, #0
 8004e10:	602a      	str	r2, [r5, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	f7fc fc19 	bl	800164a <_write>
 8004e18:	1c43      	adds	r3, r0, #1
 8004e1a:	d102      	bne.n	8004e22 <_write_r+0x1e>
 8004e1c:	682b      	ldr	r3, [r5, #0]
 8004e1e:	b103      	cbz	r3, 8004e22 <_write_r+0x1e>
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	bd38      	pop	{r3, r4, r5, pc}
 8004e24:	20000f70 	.word	0x20000f70

08004e28 <__errno>:
 8004e28:	4b01      	ldr	r3, [pc, #4]	; (8004e30 <__errno+0x8>)
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	20000074 	.word	0x20000074

08004e34 <__libc_init_array>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	4d0d      	ldr	r5, [pc, #52]	; (8004e6c <__libc_init_array+0x38>)
 8004e38:	4c0d      	ldr	r4, [pc, #52]	; (8004e70 <__libc_init_array+0x3c>)
 8004e3a:	1b64      	subs	r4, r4, r5
 8004e3c:	10a4      	asrs	r4, r4, #2
 8004e3e:	2600      	movs	r6, #0
 8004e40:	42a6      	cmp	r6, r4
 8004e42:	d109      	bne.n	8004e58 <__libc_init_array+0x24>
 8004e44:	4d0b      	ldr	r5, [pc, #44]	; (8004e74 <__libc_init_array+0x40>)
 8004e46:	4c0c      	ldr	r4, [pc, #48]	; (8004e78 <__libc_init_array+0x44>)
 8004e48:	f001 f8ae 	bl	8005fa8 <_init>
 8004e4c:	1b64      	subs	r4, r4, r5
 8004e4e:	10a4      	asrs	r4, r4, #2
 8004e50:	2600      	movs	r6, #0
 8004e52:	42a6      	cmp	r6, r4
 8004e54:	d105      	bne.n	8004e62 <__libc_init_array+0x2e>
 8004e56:	bd70      	pop	{r4, r5, r6, pc}
 8004e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5c:	4798      	blx	r3
 8004e5e:	3601      	adds	r6, #1
 8004e60:	e7ee      	b.n	8004e40 <__libc_init_array+0xc>
 8004e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e66:	4798      	blx	r3
 8004e68:	3601      	adds	r6, #1
 8004e6a:	e7f2      	b.n	8004e52 <__libc_init_array+0x1e>
 8004e6c:	080061a0 	.word	0x080061a0
 8004e70:	080061a0 	.word	0x080061a0
 8004e74:	080061a0 	.word	0x080061a0
 8004e78:	080061a4 	.word	0x080061a4

08004e7c <__retarget_lock_init_recursive>:
 8004e7c:	4770      	bx	lr

08004e7e <__retarget_lock_acquire_recursive>:
 8004e7e:	4770      	bx	lr

08004e80 <__retarget_lock_release_recursive>:
 8004e80:	4770      	bx	lr
	...

08004e84 <_free_r>:
 8004e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e86:	2900      	cmp	r1, #0
 8004e88:	d044      	beq.n	8004f14 <_free_r+0x90>
 8004e8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e8e:	9001      	str	r0, [sp, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f1a1 0404 	sub.w	r4, r1, #4
 8004e96:	bfb8      	it	lt
 8004e98:	18e4      	addlt	r4, r4, r3
 8004e9a:	f000 f8df 	bl	800505c <__malloc_lock>
 8004e9e:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <_free_r+0x94>)
 8004ea0:	9801      	ldr	r0, [sp, #4]
 8004ea2:	6813      	ldr	r3, [r2, #0]
 8004ea4:	b933      	cbnz	r3, 8004eb4 <_free_r+0x30>
 8004ea6:	6063      	str	r3, [r4, #4]
 8004ea8:	6014      	str	r4, [r2, #0]
 8004eaa:	b003      	add	sp, #12
 8004eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004eb0:	f000 b8da 	b.w	8005068 <__malloc_unlock>
 8004eb4:	42a3      	cmp	r3, r4
 8004eb6:	d908      	bls.n	8004eca <_free_r+0x46>
 8004eb8:	6825      	ldr	r5, [r4, #0]
 8004eba:	1961      	adds	r1, r4, r5
 8004ebc:	428b      	cmp	r3, r1
 8004ebe:	bf01      	itttt	eq
 8004ec0:	6819      	ldreq	r1, [r3, #0]
 8004ec2:	685b      	ldreq	r3, [r3, #4]
 8004ec4:	1949      	addeq	r1, r1, r5
 8004ec6:	6021      	streq	r1, [r4, #0]
 8004ec8:	e7ed      	b.n	8004ea6 <_free_r+0x22>
 8004eca:	461a      	mov	r2, r3
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	b10b      	cbz	r3, 8004ed4 <_free_r+0x50>
 8004ed0:	42a3      	cmp	r3, r4
 8004ed2:	d9fa      	bls.n	8004eca <_free_r+0x46>
 8004ed4:	6811      	ldr	r1, [r2, #0]
 8004ed6:	1855      	adds	r5, r2, r1
 8004ed8:	42a5      	cmp	r5, r4
 8004eda:	d10b      	bne.n	8004ef4 <_free_r+0x70>
 8004edc:	6824      	ldr	r4, [r4, #0]
 8004ede:	4421      	add	r1, r4
 8004ee0:	1854      	adds	r4, r2, r1
 8004ee2:	42a3      	cmp	r3, r4
 8004ee4:	6011      	str	r1, [r2, #0]
 8004ee6:	d1e0      	bne.n	8004eaa <_free_r+0x26>
 8004ee8:	681c      	ldr	r4, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	6053      	str	r3, [r2, #4]
 8004eee:	440c      	add	r4, r1
 8004ef0:	6014      	str	r4, [r2, #0]
 8004ef2:	e7da      	b.n	8004eaa <_free_r+0x26>
 8004ef4:	d902      	bls.n	8004efc <_free_r+0x78>
 8004ef6:	230c      	movs	r3, #12
 8004ef8:	6003      	str	r3, [r0, #0]
 8004efa:	e7d6      	b.n	8004eaa <_free_r+0x26>
 8004efc:	6825      	ldr	r5, [r4, #0]
 8004efe:	1961      	adds	r1, r4, r5
 8004f00:	428b      	cmp	r3, r1
 8004f02:	bf04      	itt	eq
 8004f04:	6819      	ldreq	r1, [r3, #0]
 8004f06:	685b      	ldreq	r3, [r3, #4]
 8004f08:	6063      	str	r3, [r4, #4]
 8004f0a:	bf04      	itt	eq
 8004f0c:	1949      	addeq	r1, r1, r5
 8004f0e:	6021      	streq	r1, [r4, #0]
 8004f10:	6054      	str	r4, [r2, #4]
 8004f12:	e7ca      	b.n	8004eaa <_free_r+0x26>
 8004f14:	b003      	add	sp, #12
 8004f16:	bd30      	pop	{r4, r5, pc}
 8004f18:	20000f78 	.word	0x20000f78

08004f1c <sbrk_aligned>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	4e0e      	ldr	r6, [pc, #56]	; (8004f58 <sbrk_aligned+0x3c>)
 8004f20:	460c      	mov	r4, r1
 8004f22:	6831      	ldr	r1, [r6, #0]
 8004f24:	4605      	mov	r5, r0
 8004f26:	b911      	cbnz	r1, 8004f2e <sbrk_aligned+0x12>
 8004f28:	f000 fcde 	bl	80058e8 <_sbrk_r>
 8004f2c:	6030      	str	r0, [r6, #0]
 8004f2e:	4621      	mov	r1, r4
 8004f30:	4628      	mov	r0, r5
 8004f32:	f000 fcd9 	bl	80058e8 <_sbrk_r>
 8004f36:	1c43      	adds	r3, r0, #1
 8004f38:	d00a      	beq.n	8004f50 <sbrk_aligned+0x34>
 8004f3a:	1cc4      	adds	r4, r0, #3
 8004f3c:	f024 0403 	bic.w	r4, r4, #3
 8004f40:	42a0      	cmp	r0, r4
 8004f42:	d007      	beq.n	8004f54 <sbrk_aligned+0x38>
 8004f44:	1a21      	subs	r1, r4, r0
 8004f46:	4628      	mov	r0, r5
 8004f48:	f000 fcce 	bl	80058e8 <_sbrk_r>
 8004f4c:	3001      	adds	r0, #1
 8004f4e:	d101      	bne.n	8004f54 <sbrk_aligned+0x38>
 8004f50:	f04f 34ff 	mov.w	r4, #4294967295
 8004f54:	4620      	mov	r0, r4
 8004f56:	bd70      	pop	{r4, r5, r6, pc}
 8004f58:	20000f7c 	.word	0x20000f7c

08004f5c <_malloc_r>:
 8004f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f60:	1ccd      	adds	r5, r1, #3
 8004f62:	f025 0503 	bic.w	r5, r5, #3
 8004f66:	3508      	adds	r5, #8
 8004f68:	2d0c      	cmp	r5, #12
 8004f6a:	bf38      	it	cc
 8004f6c:	250c      	movcc	r5, #12
 8004f6e:	2d00      	cmp	r5, #0
 8004f70:	4607      	mov	r7, r0
 8004f72:	db01      	blt.n	8004f78 <_malloc_r+0x1c>
 8004f74:	42a9      	cmp	r1, r5
 8004f76:	d905      	bls.n	8004f84 <_malloc_r+0x28>
 8004f78:	230c      	movs	r3, #12
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	2600      	movs	r6, #0
 8004f7e:	4630      	mov	r0, r6
 8004f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005058 <_malloc_r+0xfc>
 8004f88:	f000 f868 	bl	800505c <__malloc_lock>
 8004f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f90:	461c      	mov	r4, r3
 8004f92:	bb5c      	cbnz	r4, 8004fec <_malloc_r+0x90>
 8004f94:	4629      	mov	r1, r5
 8004f96:	4638      	mov	r0, r7
 8004f98:	f7ff ffc0 	bl	8004f1c <sbrk_aligned>
 8004f9c:	1c43      	adds	r3, r0, #1
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	d155      	bne.n	800504e <_malloc_r+0xf2>
 8004fa2:	f8d8 4000 	ldr.w	r4, [r8]
 8004fa6:	4626      	mov	r6, r4
 8004fa8:	2e00      	cmp	r6, #0
 8004faa:	d145      	bne.n	8005038 <_malloc_r+0xdc>
 8004fac:	2c00      	cmp	r4, #0
 8004fae:	d048      	beq.n	8005042 <_malloc_r+0xe6>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	eb04 0903 	add.w	r9, r4, r3
 8004fba:	f000 fc95 	bl	80058e8 <_sbrk_r>
 8004fbe:	4581      	cmp	r9, r0
 8004fc0:	d13f      	bne.n	8005042 <_malloc_r+0xe6>
 8004fc2:	6821      	ldr	r1, [r4, #0]
 8004fc4:	1a6d      	subs	r5, r5, r1
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	4638      	mov	r0, r7
 8004fca:	f7ff ffa7 	bl	8004f1c <sbrk_aligned>
 8004fce:	3001      	adds	r0, #1
 8004fd0:	d037      	beq.n	8005042 <_malloc_r+0xe6>
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	442b      	add	r3, r5
 8004fd6:	6023      	str	r3, [r4, #0]
 8004fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d038      	beq.n	8005052 <_malloc_r+0xf6>
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	42a2      	cmp	r2, r4
 8004fe4:	d12b      	bne.n	800503e <_malloc_r+0xe2>
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	605a      	str	r2, [r3, #4]
 8004fea:	e00f      	b.n	800500c <_malloc_r+0xb0>
 8004fec:	6822      	ldr	r2, [r4, #0]
 8004fee:	1b52      	subs	r2, r2, r5
 8004ff0:	d41f      	bmi.n	8005032 <_malloc_r+0xd6>
 8004ff2:	2a0b      	cmp	r2, #11
 8004ff4:	d917      	bls.n	8005026 <_malloc_r+0xca>
 8004ff6:	1961      	adds	r1, r4, r5
 8004ff8:	42a3      	cmp	r3, r4
 8004ffa:	6025      	str	r5, [r4, #0]
 8004ffc:	bf18      	it	ne
 8004ffe:	6059      	strne	r1, [r3, #4]
 8005000:	6863      	ldr	r3, [r4, #4]
 8005002:	bf08      	it	eq
 8005004:	f8c8 1000 	streq.w	r1, [r8]
 8005008:	5162      	str	r2, [r4, r5]
 800500a:	604b      	str	r3, [r1, #4]
 800500c:	4638      	mov	r0, r7
 800500e:	f104 060b 	add.w	r6, r4, #11
 8005012:	f000 f829 	bl	8005068 <__malloc_unlock>
 8005016:	f026 0607 	bic.w	r6, r6, #7
 800501a:	1d23      	adds	r3, r4, #4
 800501c:	1af2      	subs	r2, r6, r3
 800501e:	d0ae      	beq.n	8004f7e <_malloc_r+0x22>
 8005020:	1b9b      	subs	r3, r3, r6
 8005022:	50a3      	str	r3, [r4, r2]
 8005024:	e7ab      	b.n	8004f7e <_malloc_r+0x22>
 8005026:	42a3      	cmp	r3, r4
 8005028:	6862      	ldr	r2, [r4, #4]
 800502a:	d1dd      	bne.n	8004fe8 <_malloc_r+0x8c>
 800502c:	f8c8 2000 	str.w	r2, [r8]
 8005030:	e7ec      	b.n	800500c <_malloc_r+0xb0>
 8005032:	4623      	mov	r3, r4
 8005034:	6864      	ldr	r4, [r4, #4]
 8005036:	e7ac      	b.n	8004f92 <_malloc_r+0x36>
 8005038:	4634      	mov	r4, r6
 800503a:	6876      	ldr	r6, [r6, #4]
 800503c:	e7b4      	b.n	8004fa8 <_malloc_r+0x4c>
 800503e:	4613      	mov	r3, r2
 8005040:	e7cc      	b.n	8004fdc <_malloc_r+0x80>
 8005042:	230c      	movs	r3, #12
 8005044:	603b      	str	r3, [r7, #0]
 8005046:	4638      	mov	r0, r7
 8005048:	f000 f80e 	bl	8005068 <__malloc_unlock>
 800504c:	e797      	b.n	8004f7e <_malloc_r+0x22>
 800504e:	6025      	str	r5, [r4, #0]
 8005050:	e7dc      	b.n	800500c <_malloc_r+0xb0>
 8005052:	605b      	str	r3, [r3, #4]
 8005054:	deff      	udf	#255	; 0xff
 8005056:	bf00      	nop
 8005058:	20000f78 	.word	0x20000f78

0800505c <__malloc_lock>:
 800505c:	4801      	ldr	r0, [pc, #4]	; (8005064 <__malloc_lock+0x8>)
 800505e:	f7ff bf0e 	b.w	8004e7e <__retarget_lock_acquire_recursive>
 8005062:	bf00      	nop
 8005064:	20000f74 	.word	0x20000f74

08005068 <__malloc_unlock>:
 8005068:	4801      	ldr	r0, [pc, #4]	; (8005070 <__malloc_unlock+0x8>)
 800506a:	f7ff bf09 	b.w	8004e80 <__retarget_lock_release_recursive>
 800506e:	bf00      	nop
 8005070:	20000f74 	.word	0x20000f74

08005074 <__sfputc_r>:
 8005074:	6893      	ldr	r3, [r2, #8]
 8005076:	3b01      	subs	r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	b410      	push	{r4}
 800507c:	6093      	str	r3, [r2, #8]
 800507e:	da08      	bge.n	8005092 <__sfputc_r+0x1e>
 8005080:	6994      	ldr	r4, [r2, #24]
 8005082:	42a3      	cmp	r3, r4
 8005084:	db01      	blt.n	800508a <__sfputc_r+0x16>
 8005086:	290a      	cmp	r1, #10
 8005088:	d103      	bne.n	8005092 <__sfputc_r+0x1e>
 800508a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800508e:	f7ff bde8 	b.w	8004c62 <__swbuf_r>
 8005092:	6813      	ldr	r3, [r2, #0]
 8005094:	1c58      	adds	r0, r3, #1
 8005096:	6010      	str	r0, [r2, #0]
 8005098:	7019      	strb	r1, [r3, #0]
 800509a:	4608      	mov	r0, r1
 800509c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <__sfputs_r>:
 80050a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a4:	4606      	mov	r6, r0
 80050a6:	460f      	mov	r7, r1
 80050a8:	4614      	mov	r4, r2
 80050aa:	18d5      	adds	r5, r2, r3
 80050ac:	42ac      	cmp	r4, r5
 80050ae:	d101      	bne.n	80050b4 <__sfputs_r+0x12>
 80050b0:	2000      	movs	r0, #0
 80050b2:	e007      	b.n	80050c4 <__sfputs_r+0x22>
 80050b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050b8:	463a      	mov	r2, r7
 80050ba:	4630      	mov	r0, r6
 80050bc:	f7ff ffda 	bl	8005074 <__sfputc_r>
 80050c0:	1c43      	adds	r3, r0, #1
 80050c2:	d1f3      	bne.n	80050ac <__sfputs_r+0xa>
 80050c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050c8 <_vfiprintf_r>:
 80050c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050cc:	460d      	mov	r5, r1
 80050ce:	b09d      	sub	sp, #116	; 0x74
 80050d0:	4614      	mov	r4, r2
 80050d2:	4698      	mov	r8, r3
 80050d4:	4606      	mov	r6, r0
 80050d6:	b118      	cbz	r0, 80050e0 <_vfiprintf_r+0x18>
 80050d8:	6a03      	ldr	r3, [r0, #32]
 80050da:	b90b      	cbnz	r3, 80050e0 <_vfiprintf_r+0x18>
 80050dc:	f7ff fcd2 	bl	8004a84 <__sinit>
 80050e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050e2:	07d9      	lsls	r1, r3, #31
 80050e4:	d405      	bmi.n	80050f2 <_vfiprintf_r+0x2a>
 80050e6:	89ab      	ldrh	r3, [r5, #12]
 80050e8:	059a      	lsls	r2, r3, #22
 80050ea:	d402      	bmi.n	80050f2 <_vfiprintf_r+0x2a>
 80050ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050ee:	f7ff fec6 	bl	8004e7e <__retarget_lock_acquire_recursive>
 80050f2:	89ab      	ldrh	r3, [r5, #12]
 80050f4:	071b      	lsls	r3, r3, #28
 80050f6:	d501      	bpl.n	80050fc <_vfiprintf_r+0x34>
 80050f8:	692b      	ldr	r3, [r5, #16]
 80050fa:	b99b      	cbnz	r3, 8005124 <_vfiprintf_r+0x5c>
 80050fc:	4629      	mov	r1, r5
 80050fe:	4630      	mov	r0, r6
 8005100:	f7ff fdec 	bl	8004cdc <__swsetup_r>
 8005104:	b170      	cbz	r0, 8005124 <_vfiprintf_r+0x5c>
 8005106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005108:	07dc      	lsls	r4, r3, #31
 800510a:	d504      	bpl.n	8005116 <_vfiprintf_r+0x4e>
 800510c:	f04f 30ff 	mov.w	r0, #4294967295
 8005110:	b01d      	add	sp, #116	; 0x74
 8005112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005116:	89ab      	ldrh	r3, [r5, #12]
 8005118:	0598      	lsls	r0, r3, #22
 800511a:	d4f7      	bmi.n	800510c <_vfiprintf_r+0x44>
 800511c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800511e:	f7ff feaf 	bl	8004e80 <__retarget_lock_release_recursive>
 8005122:	e7f3      	b.n	800510c <_vfiprintf_r+0x44>
 8005124:	2300      	movs	r3, #0
 8005126:	9309      	str	r3, [sp, #36]	; 0x24
 8005128:	2320      	movs	r3, #32
 800512a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800512e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005132:	2330      	movs	r3, #48	; 0x30
 8005134:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80052e8 <_vfiprintf_r+0x220>
 8005138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800513c:	f04f 0901 	mov.w	r9, #1
 8005140:	4623      	mov	r3, r4
 8005142:	469a      	mov	sl, r3
 8005144:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005148:	b10a      	cbz	r2, 800514e <_vfiprintf_r+0x86>
 800514a:	2a25      	cmp	r2, #37	; 0x25
 800514c:	d1f9      	bne.n	8005142 <_vfiprintf_r+0x7a>
 800514e:	ebba 0b04 	subs.w	fp, sl, r4
 8005152:	d00b      	beq.n	800516c <_vfiprintf_r+0xa4>
 8005154:	465b      	mov	r3, fp
 8005156:	4622      	mov	r2, r4
 8005158:	4629      	mov	r1, r5
 800515a:	4630      	mov	r0, r6
 800515c:	f7ff ffa1 	bl	80050a2 <__sfputs_r>
 8005160:	3001      	adds	r0, #1
 8005162:	f000 80a9 	beq.w	80052b8 <_vfiprintf_r+0x1f0>
 8005166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005168:	445a      	add	r2, fp
 800516a:	9209      	str	r2, [sp, #36]	; 0x24
 800516c:	f89a 3000 	ldrb.w	r3, [sl]
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 80a1 	beq.w	80052b8 <_vfiprintf_r+0x1f0>
 8005176:	2300      	movs	r3, #0
 8005178:	f04f 32ff 	mov.w	r2, #4294967295
 800517c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005180:	f10a 0a01 	add.w	sl, sl, #1
 8005184:	9304      	str	r3, [sp, #16]
 8005186:	9307      	str	r3, [sp, #28]
 8005188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800518c:	931a      	str	r3, [sp, #104]	; 0x68
 800518e:	4654      	mov	r4, sl
 8005190:	2205      	movs	r2, #5
 8005192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005196:	4854      	ldr	r0, [pc, #336]	; (80052e8 <_vfiprintf_r+0x220>)
 8005198:	f7fb f822 	bl	80001e0 <memchr>
 800519c:	9a04      	ldr	r2, [sp, #16]
 800519e:	b9d8      	cbnz	r0, 80051d8 <_vfiprintf_r+0x110>
 80051a0:	06d1      	lsls	r1, r2, #27
 80051a2:	bf44      	itt	mi
 80051a4:	2320      	movmi	r3, #32
 80051a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051aa:	0713      	lsls	r3, r2, #28
 80051ac:	bf44      	itt	mi
 80051ae:	232b      	movmi	r3, #43	; 0x2b
 80051b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051b4:	f89a 3000 	ldrb.w	r3, [sl]
 80051b8:	2b2a      	cmp	r3, #42	; 0x2a
 80051ba:	d015      	beq.n	80051e8 <_vfiprintf_r+0x120>
 80051bc:	9a07      	ldr	r2, [sp, #28]
 80051be:	4654      	mov	r4, sl
 80051c0:	2000      	movs	r0, #0
 80051c2:	f04f 0c0a 	mov.w	ip, #10
 80051c6:	4621      	mov	r1, r4
 80051c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051cc:	3b30      	subs	r3, #48	; 0x30
 80051ce:	2b09      	cmp	r3, #9
 80051d0:	d94d      	bls.n	800526e <_vfiprintf_r+0x1a6>
 80051d2:	b1b0      	cbz	r0, 8005202 <_vfiprintf_r+0x13a>
 80051d4:	9207      	str	r2, [sp, #28]
 80051d6:	e014      	b.n	8005202 <_vfiprintf_r+0x13a>
 80051d8:	eba0 0308 	sub.w	r3, r0, r8
 80051dc:	fa09 f303 	lsl.w	r3, r9, r3
 80051e0:	4313      	orrs	r3, r2
 80051e2:	9304      	str	r3, [sp, #16]
 80051e4:	46a2      	mov	sl, r4
 80051e6:	e7d2      	b.n	800518e <_vfiprintf_r+0xc6>
 80051e8:	9b03      	ldr	r3, [sp, #12]
 80051ea:	1d19      	adds	r1, r3, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	9103      	str	r1, [sp, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bfbb      	ittet	lt
 80051f4:	425b      	neglt	r3, r3
 80051f6:	f042 0202 	orrlt.w	r2, r2, #2
 80051fa:	9307      	strge	r3, [sp, #28]
 80051fc:	9307      	strlt	r3, [sp, #28]
 80051fe:	bfb8      	it	lt
 8005200:	9204      	strlt	r2, [sp, #16]
 8005202:	7823      	ldrb	r3, [r4, #0]
 8005204:	2b2e      	cmp	r3, #46	; 0x2e
 8005206:	d10c      	bne.n	8005222 <_vfiprintf_r+0x15a>
 8005208:	7863      	ldrb	r3, [r4, #1]
 800520a:	2b2a      	cmp	r3, #42	; 0x2a
 800520c:	d134      	bne.n	8005278 <_vfiprintf_r+0x1b0>
 800520e:	9b03      	ldr	r3, [sp, #12]
 8005210:	1d1a      	adds	r2, r3, #4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	9203      	str	r2, [sp, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	bfb8      	it	lt
 800521a:	f04f 33ff 	movlt.w	r3, #4294967295
 800521e:	3402      	adds	r4, #2
 8005220:	9305      	str	r3, [sp, #20]
 8005222:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80052f8 <_vfiprintf_r+0x230>
 8005226:	7821      	ldrb	r1, [r4, #0]
 8005228:	2203      	movs	r2, #3
 800522a:	4650      	mov	r0, sl
 800522c:	f7fa ffd8 	bl	80001e0 <memchr>
 8005230:	b138      	cbz	r0, 8005242 <_vfiprintf_r+0x17a>
 8005232:	9b04      	ldr	r3, [sp, #16]
 8005234:	eba0 000a 	sub.w	r0, r0, sl
 8005238:	2240      	movs	r2, #64	; 0x40
 800523a:	4082      	lsls	r2, r0
 800523c:	4313      	orrs	r3, r2
 800523e:	3401      	adds	r4, #1
 8005240:	9304      	str	r3, [sp, #16]
 8005242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005246:	4829      	ldr	r0, [pc, #164]	; (80052ec <_vfiprintf_r+0x224>)
 8005248:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800524c:	2206      	movs	r2, #6
 800524e:	f7fa ffc7 	bl	80001e0 <memchr>
 8005252:	2800      	cmp	r0, #0
 8005254:	d03f      	beq.n	80052d6 <_vfiprintf_r+0x20e>
 8005256:	4b26      	ldr	r3, [pc, #152]	; (80052f0 <_vfiprintf_r+0x228>)
 8005258:	bb1b      	cbnz	r3, 80052a2 <_vfiprintf_r+0x1da>
 800525a:	9b03      	ldr	r3, [sp, #12]
 800525c:	3307      	adds	r3, #7
 800525e:	f023 0307 	bic.w	r3, r3, #7
 8005262:	3308      	adds	r3, #8
 8005264:	9303      	str	r3, [sp, #12]
 8005266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005268:	443b      	add	r3, r7
 800526a:	9309      	str	r3, [sp, #36]	; 0x24
 800526c:	e768      	b.n	8005140 <_vfiprintf_r+0x78>
 800526e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005272:	460c      	mov	r4, r1
 8005274:	2001      	movs	r0, #1
 8005276:	e7a6      	b.n	80051c6 <_vfiprintf_r+0xfe>
 8005278:	2300      	movs	r3, #0
 800527a:	3401      	adds	r4, #1
 800527c:	9305      	str	r3, [sp, #20]
 800527e:	4619      	mov	r1, r3
 8005280:	f04f 0c0a 	mov.w	ip, #10
 8005284:	4620      	mov	r0, r4
 8005286:	f810 2b01 	ldrb.w	r2, [r0], #1
 800528a:	3a30      	subs	r2, #48	; 0x30
 800528c:	2a09      	cmp	r2, #9
 800528e:	d903      	bls.n	8005298 <_vfiprintf_r+0x1d0>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0c6      	beq.n	8005222 <_vfiprintf_r+0x15a>
 8005294:	9105      	str	r1, [sp, #20]
 8005296:	e7c4      	b.n	8005222 <_vfiprintf_r+0x15a>
 8005298:	fb0c 2101 	mla	r1, ip, r1, r2
 800529c:	4604      	mov	r4, r0
 800529e:	2301      	movs	r3, #1
 80052a0:	e7f0      	b.n	8005284 <_vfiprintf_r+0x1bc>
 80052a2:	ab03      	add	r3, sp, #12
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	462a      	mov	r2, r5
 80052a8:	4b12      	ldr	r3, [pc, #72]	; (80052f4 <_vfiprintf_r+0x22c>)
 80052aa:	a904      	add	r1, sp, #16
 80052ac:	4630      	mov	r0, r6
 80052ae:	f3af 8000 	nop.w
 80052b2:	4607      	mov	r7, r0
 80052b4:	1c78      	adds	r0, r7, #1
 80052b6:	d1d6      	bne.n	8005266 <_vfiprintf_r+0x19e>
 80052b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052ba:	07d9      	lsls	r1, r3, #31
 80052bc:	d405      	bmi.n	80052ca <_vfiprintf_r+0x202>
 80052be:	89ab      	ldrh	r3, [r5, #12]
 80052c0:	059a      	lsls	r2, r3, #22
 80052c2:	d402      	bmi.n	80052ca <_vfiprintf_r+0x202>
 80052c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052c6:	f7ff fddb 	bl	8004e80 <__retarget_lock_release_recursive>
 80052ca:	89ab      	ldrh	r3, [r5, #12]
 80052cc:	065b      	lsls	r3, r3, #25
 80052ce:	f53f af1d 	bmi.w	800510c <_vfiprintf_r+0x44>
 80052d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052d4:	e71c      	b.n	8005110 <_vfiprintf_r+0x48>
 80052d6:	ab03      	add	r3, sp, #12
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	462a      	mov	r2, r5
 80052dc:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <_vfiprintf_r+0x22c>)
 80052de:	a904      	add	r1, sp, #16
 80052e0:	4630      	mov	r0, r6
 80052e2:	f000 f879 	bl	80053d8 <_printf_i>
 80052e6:	e7e4      	b.n	80052b2 <_vfiprintf_r+0x1ea>
 80052e8:	08006134 	.word	0x08006134
 80052ec:	0800613e 	.word	0x0800613e
 80052f0:	00000000 	.word	0x00000000
 80052f4:	080050a3 	.word	0x080050a3
 80052f8:	0800613a 	.word	0x0800613a

080052fc <_printf_common>:
 80052fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005300:	4616      	mov	r6, r2
 8005302:	4699      	mov	r9, r3
 8005304:	688a      	ldr	r2, [r1, #8]
 8005306:	690b      	ldr	r3, [r1, #16]
 8005308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800530c:	4293      	cmp	r3, r2
 800530e:	bfb8      	it	lt
 8005310:	4613      	movlt	r3, r2
 8005312:	6033      	str	r3, [r6, #0]
 8005314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005318:	4607      	mov	r7, r0
 800531a:	460c      	mov	r4, r1
 800531c:	b10a      	cbz	r2, 8005322 <_printf_common+0x26>
 800531e:	3301      	adds	r3, #1
 8005320:	6033      	str	r3, [r6, #0]
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	0699      	lsls	r1, r3, #26
 8005326:	bf42      	ittt	mi
 8005328:	6833      	ldrmi	r3, [r6, #0]
 800532a:	3302      	addmi	r3, #2
 800532c:	6033      	strmi	r3, [r6, #0]
 800532e:	6825      	ldr	r5, [r4, #0]
 8005330:	f015 0506 	ands.w	r5, r5, #6
 8005334:	d106      	bne.n	8005344 <_printf_common+0x48>
 8005336:	f104 0a19 	add.w	sl, r4, #25
 800533a:	68e3      	ldr	r3, [r4, #12]
 800533c:	6832      	ldr	r2, [r6, #0]
 800533e:	1a9b      	subs	r3, r3, r2
 8005340:	42ab      	cmp	r3, r5
 8005342:	dc26      	bgt.n	8005392 <_printf_common+0x96>
 8005344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005348:	1e13      	subs	r3, r2, #0
 800534a:	6822      	ldr	r2, [r4, #0]
 800534c:	bf18      	it	ne
 800534e:	2301      	movne	r3, #1
 8005350:	0692      	lsls	r2, r2, #26
 8005352:	d42b      	bmi.n	80053ac <_printf_common+0xb0>
 8005354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005358:	4649      	mov	r1, r9
 800535a:	4638      	mov	r0, r7
 800535c:	47c0      	blx	r8
 800535e:	3001      	adds	r0, #1
 8005360:	d01e      	beq.n	80053a0 <_printf_common+0xa4>
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	6922      	ldr	r2, [r4, #16]
 8005366:	f003 0306 	and.w	r3, r3, #6
 800536a:	2b04      	cmp	r3, #4
 800536c:	bf02      	ittt	eq
 800536e:	68e5      	ldreq	r5, [r4, #12]
 8005370:	6833      	ldreq	r3, [r6, #0]
 8005372:	1aed      	subeq	r5, r5, r3
 8005374:	68a3      	ldr	r3, [r4, #8]
 8005376:	bf0c      	ite	eq
 8005378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800537c:	2500      	movne	r5, #0
 800537e:	4293      	cmp	r3, r2
 8005380:	bfc4      	itt	gt
 8005382:	1a9b      	subgt	r3, r3, r2
 8005384:	18ed      	addgt	r5, r5, r3
 8005386:	2600      	movs	r6, #0
 8005388:	341a      	adds	r4, #26
 800538a:	42b5      	cmp	r5, r6
 800538c:	d11a      	bne.n	80053c4 <_printf_common+0xc8>
 800538e:	2000      	movs	r0, #0
 8005390:	e008      	b.n	80053a4 <_printf_common+0xa8>
 8005392:	2301      	movs	r3, #1
 8005394:	4652      	mov	r2, sl
 8005396:	4649      	mov	r1, r9
 8005398:	4638      	mov	r0, r7
 800539a:	47c0      	blx	r8
 800539c:	3001      	adds	r0, #1
 800539e:	d103      	bne.n	80053a8 <_printf_common+0xac>
 80053a0:	f04f 30ff 	mov.w	r0, #4294967295
 80053a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a8:	3501      	adds	r5, #1
 80053aa:	e7c6      	b.n	800533a <_printf_common+0x3e>
 80053ac:	18e1      	adds	r1, r4, r3
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	2030      	movs	r0, #48	; 0x30
 80053b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053b6:	4422      	add	r2, r4
 80053b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053c0:	3302      	adds	r3, #2
 80053c2:	e7c7      	b.n	8005354 <_printf_common+0x58>
 80053c4:	2301      	movs	r3, #1
 80053c6:	4622      	mov	r2, r4
 80053c8:	4649      	mov	r1, r9
 80053ca:	4638      	mov	r0, r7
 80053cc:	47c0      	blx	r8
 80053ce:	3001      	adds	r0, #1
 80053d0:	d0e6      	beq.n	80053a0 <_printf_common+0xa4>
 80053d2:	3601      	adds	r6, #1
 80053d4:	e7d9      	b.n	800538a <_printf_common+0x8e>
	...

080053d8 <_printf_i>:
 80053d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053dc:	7e0f      	ldrb	r7, [r1, #24]
 80053de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053e0:	2f78      	cmp	r7, #120	; 0x78
 80053e2:	4691      	mov	r9, r2
 80053e4:	4680      	mov	r8, r0
 80053e6:	460c      	mov	r4, r1
 80053e8:	469a      	mov	sl, r3
 80053ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053ee:	d807      	bhi.n	8005400 <_printf_i+0x28>
 80053f0:	2f62      	cmp	r7, #98	; 0x62
 80053f2:	d80a      	bhi.n	800540a <_printf_i+0x32>
 80053f4:	2f00      	cmp	r7, #0
 80053f6:	f000 80d4 	beq.w	80055a2 <_printf_i+0x1ca>
 80053fa:	2f58      	cmp	r7, #88	; 0x58
 80053fc:	f000 80c0 	beq.w	8005580 <_printf_i+0x1a8>
 8005400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005408:	e03a      	b.n	8005480 <_printf_i+0xa8>
 800540a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800540e:	2b15      	cmp	r3, #21
 8005410:	d8f6      	bhi.n	8005400 <_printf_i+0x28>
 8005412:	a101      	add	r1, pc, #4	; (adr r1, 8005418 <_printf_i+0x40>)
 8005414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005418:	08005471 	.word	0x08005471
 800541c:	08005485 	.word	0x08005485
 8005420:	08005401 	.word	0x08005401
 8005424:	08005401 	.word	0x08005401
 8005428:	08005401 	.word	0x08005401
 800542c:	08005401 	.word	0x08005401
 8005430:	08005485 	.word	0x08005485
 8005434:	08005401 	.word	0x08005401
 8005438:	08005401 	.word	0x08005401
 800543c:	08005401 	.word	0x08005401
 8005440:	08005401 	.word	0x08005401
 8005444:	08005589 	.word	0x08005589
 8005448:	080054b1 	.word	0x080054b1
 800544c:	08005543 	.word	0x08005543
 8005450:	08005401 	.word	0x08005401
 8005454:	08005401 	.word	0x08005401
 8005458:	080055ab 	.word	0x080055ab
 800545c:	08005401 	.word	0x08005401
 8005460:	080054b1 	.word	0x080054b1
 8005464:	08005401 	.word	0x08005401
 8005468:	08005401 	.word	0x08005401
 800546c:	0800554b 	.word	0x0800554b
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	1d1a      	adds	r2, r3, #4
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	602a      	str	r2, [r5, #0]
 8005478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800547c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005480:	2301      	movs	r3, #1
 8005482:	e09f      	b.n	80055c4 <_printf_i+0x1ec>
 8005484:	6820      	ldr	r0, [r4, #0]
 8005486:	682b      	ldr	r3, [r5, #0]
 8005488:	0607      	lsls	r7, r0, #24
 800548a:	f103 0104 	add.w	r1, r3, #4
 800548e:	6029      	str	r1, [r5, #0]
 8005490:	d501      	bpl.n	8005496 <_printf_i+0xbe>
 8005492:	681e      	ldr	r6, [r3, #0]
 8005494:	e003      	b.n	800549e <_printf_i+0xc6>
 8005496:	0646      	lsls	r6, r0, #25
 8005498:	d5fb      	bpl.n	8005492 <_printf_i+0xba>
 800549a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800549e:	2e00      	cmp	r6, #0
 80054a0:	da03      	bge.n	80054aa <_printf_i+0xd2>
 80054a2:	232d      	movs	r3, #45	; 0x2d
 80054a4:	4276      	negs	r6, r6
 80054a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054aa:	485a      	ldr	r0, [pc, #360]	; (8005614 <_printf_i+0x23c>)
 80054ac:	230a      	movs	r3, #10
 80054ae:	e012      	b.n	80054d6 <_printf_i+0xfe>
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	6820      	ldr	r0, [r4, #0]
 80054b4:	1d19      	adds	r1, r3, #4
 80054b6:	6029      	str	r1, [r5, #0]
 80054b8:	0605      	lsls	r5, r0, #24
 80054ba:	d501      	bpl.n	80054c0 <_printf_i+0xe8>
 80054bc:	681e      	ldr	r6, [r3, #0]
 80054be:	e002      	b.n	80054c6 <_printf_i+0xee>
 80054c0:	0641      	lsls	r1, r0, #25
 80054c2:	d5fb      	bpl.n	80054bc <_printf_i+0xe4>
 80054c4:	881e      	ldrh	r6, [r3, #0]
 80054c6:	4853      	ldr	r0, [pc, #332]	; (8005614 <_printf_i+0x23c>)
 80054c8:	2f6f      	cmp	r7, #111	; 0x6f
 80054ca:	bf0c      	ite	eq
 80054cc:	2308      	moveq	r3, #8
 80054ce:	230a      	movne	r3, #10
 80054d0:	2100      	movs	r1, #0
 80054d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054d6:	6865      	ldr	r5, [r4, #4]
 80054d8:	60a5      	str	r5, [r4, #8]
 80054da:	2d00      	cmp	r5, #0
 80054dc:	bfa2      	ittt	ge
 80054de:	6821      	ldrge	r1, [r4, #0]
 80054e0:	f021 0104 	bicge.w	r1, r1, #4
 80054e4:	6021      	strge	r1, [r4, #0]
 80054e6:	b90e      	cbnz	r6, 80054ec <_printf_i+0x114>
 80054e8:	2d00      	cmp	r5, #0
 80054ea:	d04b      	beq.n	8005584 <_printf_i+0x1ac>
 80054ec:	4615      	mov	r5, r2
 80054ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80054f2:	fb03 6711 	mls	r7, r3, r1, r6
 80054f6:	5dc7      	ldrb	r7, [r0, r7]
 80054f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054fc:	4637      	mov	r7, r6
 80054fe:	42bb      	cmp	r3, r7
 8005500:	460e      	mov	r6, r1
 8005502:	d9f4      	bls.n	80054ee <_printf_i+0x116>
 8005504:	2b08      	cmp	r3, #8
 8005506:	d10b      	bne.n	8005520 <_printf_i+0x148>
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	07de      	lsls	r6, r3, #31
 800550c:	d508      	bpl.n	8005520 <_printf_i+0x148>
 800550e:	6923      	ldr	r3, [r4, #16]
 8005510:	6861      	ldr	r1, [r4, #4]
 8005512:	4299      	cmp	r1, r3
 8005514:	bfde      	ittt	le
 8005516:	2330      	movle	r3, #48	; 0x30
 8005518:	f805 3c01 	strble.w	r3, [r5, #-1]
 800551c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005520:	1b52      	subs	r2, r2, r5
 8005522:	6122      	str	r2, [r4, #16]
 8005524:	f8cd a000 	str.w	sl, [sp]
 8005528:	464b      	mov	r3, r9
 800552a:	aa03      	add	r2, sp, #12
 800552c:	4621      	mov	r1, r4
 800552e:	4640      	mov	r0, r8
 8005530:	f7ff fee4 	bl	80052fc <_printf_common>
 8005534:	3001      	adds	r0, #1
 8005536:	d14a      	bne.n	80055ce <_printf_i+0x1f6>
 8005538:	f04f 30ff 	mov.w	r0, #4294967295
 800553c:	b004      	add	sp, #16
 800553e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	f043 0320 	orr.w	r3, r3, #32
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	4833      	ldr	r0, [pc, #204]	; (8005618 <_printf_i+0x240>)
 800554c:	2778      	movs	r7, #120	; 0x78
 800554e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	6829      	ldr	r1, [r5, #0]
 8005556:	061f      	lsls	r7, r3, #24
 8005558:	f851 6b04 	ldr.w	r6, [r1], #4
 800555c:	d402      	bmi.n	8005564 <_printf_i+0x18c>
 800555e:	065f      	lsls	r7, r3, #25
 8005560:	bf48      	it	mi
 8005562:	b2b6      	uxthmi	r6, r6
 8005564:	07df      	lsls	r7, r3, #31
 8005566:	bf48      	it	mi
 8005568:	f043 0320 	orrmi.w	r3, r3, #32
 800556c:	6029      	str	r1, [r5, #0]
 800556e:	bf48      	it	mi
 8005570:	6023      	strmi	r3, [r4, #0]
 8005572:	b91e      	cbnz	r6, 800557c <_printf_i+0x1a4>
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	f023 0320 	bic.w	r3, r3, #32
 800557a:	6023      	str	r3, [r4, #0]
 800557c:	2310      	movs	r3, #16
 800557e:	e7a7      	b.n	80054d0 <_printf_i+0xf8>
 8005580:	4824      	ldr	r0, [pc, #144]	; (8005614 <_printf_i+0x23c>)
 8005582:	e7e4      	b.n	800554e <_printf_i+0x176>
 8005584:	4615      	mov	r5, r2
 8005586:	e7bd      	b.n	8005504 <_printf_i+0x12c>
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	6826      	ldr	r6, [r4, #0]
 800558c:	6961      	ldr	r1, [r4, #20]
 800558e:	1d18      	adds	r0, r3, #4
 8005590:	6028      	str	r0, [r5, #0]
 8005592:	0635      	lsls	r5, r6, #24
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	d501      	bpl.n	800559c <_printf_i+0x1c4>
 8005598:	6019      	str	r1, [r3, #0]
 800559a:	e002      	b.n	80055a2 <_printf_i+0x1ca>
 800559c:	0670      	lsls	r0, r6, #25
 800559e:	d5fb      	bpl.n	8005598 <_printf_i+0x1c0>
 80055a0:	8019      	strh	r1, [r3, #0]
 80055a2:	2300      	movs	r3, #0
 80055a4:	6123      	str	r3, [r4, #16]
 80055a6:	4615      	mov	r5, r2
 80055a8:	e7bc      	b.n	8005524 <_printf_i+0x14c>
 80055aa:	682b      	ldr	r3, [r5, #0]
 80055ac:	1d1a      	adds	r2, r3, #4
 80055ae:	602a      	str	r2, [r5, #0]
 80055b0:	681d      	ldr	r5, [r3, #0]
 80055b2:	6862      	ldr	r2, [r4, #4]
 80055b4:	2100      	movs	r1, #0
 80055b6:	4628      	mov	r0, r5
 80055b8:	f7fa fe12 	bl	80001e0 <memchr>
 80055bc:	b108      	cbz	r0, 80055c2 <_printf_i+0x1ea>
 80055be:	1b40      	subs	r0, r0, r5
 80055c0:	6060      	str	r0, [r4, #4]
 80055c2:	6863      	ldr	r3, [r4, #4]
 80055c4:	6123      	str	r3, [r4, #16]
 80055c6:	2300      	movs	r3, #0
 80055c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055cc:	e7aa      	b.n	8005524 <_printf_i+0x14c>
 80055ce:	6923      	ldr	r3, [r4, #16]
 80055d0:	462a      	mov	r2, r5
 80055d2:	4649      	mov	r1, r9
 80055d4:	4640      	mov	r0, r8
 80055d6:	47d0      	blx	sl
 80055d8:	3001      	adds	r0, #1
 80055da:	d0ad      	beq.n	8005538 <_printf_i+0x160>
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	079b      	lsls	r3, r3, #30
 80055e0:	d413      	bmi.n	800560a <_printf_i+0x232>
 80055e2:	68e0      	ldr	r0, [r4, #12]
 80055e4:	9b03      	ldr	r3, [sp, #12]
 80055e6:	4298      	cmp	r0, r3
 80055e8:	bfb8      	it	lt
 80055ea:	4618      	movlt	r0, r3
 80055ec:	e7a6      	b.n	800553c <_printf_i+0x164>
 80055ee:	2301      	movs	r3, #1
 80055f0:	4632      	mov	r2, r6
 80055f2:	4649      	mov	r1, r9
 80055f4:	4640      	mov	r0, r8
 80055f6:	47d0      	blx	sl
 80055f8:	3001      	adds	r0, #1
 80055fa:	d09d      	beq.n	8005538 <_printf_i+0x160>
 80055fc:	3501      	adds	r5, #1
 80055fe:	68e3      	ldr	r3, [r4, #12]
 8005600:	9903      	ldr	r1, [sp, #12]
 8005602:	1a5b      	subs	r3, r3, r1
 8005604:	42ab      	cmp	r3, r5
 8005606:	dcf2      	bgt.n	80055ee <_printf_i+0x216>
 8005608:	e7eb      	b.n	80055e2 <_printf_i+0x20a>
 800560a:	2500      	movs	r5, #0
 800560c:	f104 0619 	add.w	r6, r4, #25
 8005610:	e7f5      	b.n	80055fe <_printf_i+0x226>
 8005612:	bf00      	nop
 8005614:	08006145 	.word	0x08006145
 8005618:	08006156 	.word	0x08006156

0800561c <__sflush_r>:
 800561c:	898a      	ldrh	r2, [r1, #12]
 800561e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005622:	4605      	mov	r5, r0
 8005624:	0710      	lsls	r0, r2, #28
 8005626:	460c      	mov	r4, r1
 8005628:	d458      	bmi.n	80056dc <__sflush_r+0xc0>
 800562a:	684b      	ldr	r3, [r1, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	dc05      	bgt.n	800563c <__sflush_r+0x20>
 8005630:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	dc02      	bgt.n	800563c <__sflush_r+0x20>
 8005636:	2000      	movs	r0, #0
 8005638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800563c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800563e:	2e00      	cmp	r6, #0
 8005640:	d0f9      	beq.n	8005636 <__sflush_r+0x1a>
 8005642:	2300      	movs	r3, #0
 8005644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005648:	682f      	ldr	r7, [r5, #0]
 800564a:	6a21      	ldr	r1, [r4, #32]
 800564c:	602b      	str	r3, [r5, #0]
 800564e:	d032      	beq.n	80056b6 <__sflush_r+0x9a>
 8005650:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005652:	89a3      	ldrh	r3, [r4, #12]
 8005654:	075a      	lsls	r2, r3, #29
 8005656:	d505      	bpl.n	8005664 <__sflush_r+0x48>
 8005658:	6863      	ldr	r3, [r4, #4]
 800565a:	1ac0      	subs	r0, r0, r3
 800565c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800565e:	b10b      	cbz	r3, 8005664 <__sflush_r+0x48>
 8005660:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005662:	1ac0      	subs	r0, r0, r3
 8005664:	2300      	movs	r3, #0
 8005666:	4602      	mov	r2, r0
 8005668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800566a:	6a21      	ldr	r1, [r4, #32]
 800566c:	4628      	mov	r0, r5
 800566e:	47b0      	blx	r6
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	d106      	bne.n	8005684 <__sflush_r+0x68>
 8005676:	6829      	ldr	r1, [r5, #0]
 8005678:	291d      	cmp	r1, #29
 800567a:	d82b      	bhi.n	80056d4 <__sflush_r+0xb8>
 800567c:	4a29      	ldr	r2, [pc, #164]	; (8005724 <__sflush_r+0x108>)
 800567e:	410a      	asrs	r2, r1
 8005680:	07d6      	lsls	r6, r2, #31
 8005682:	d427      	bmi.n	80056d4 <__sflush_r+0xb8>
 8005684:	2200      	movs	r2, #0
 8005686:	6062      	str	r2, [r4, #4]
 8005688:	04d9      	lsls	r1, r3, #19
 800568a:	6922      	ldr	r2, [r4, #16]
 800568c:	6022      	str	r2, [r4, #0]
 800568e:	d504      	bpl.n	800569a <__sflush_r+0x7e>
 8005690:	1c42      	adds	r2, r0, #1
 8005692:	d101      	bne.n	8005698 <__sflush_r+0x7c>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	b903      	cbnz	r3, 800569a <__sflush_r+0x7e>
 8005698:	6560      	str	r0, [r4, #84]	; 0x54
 800569a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800569c:	602f      	str	r7, [r5, #0]
 800569e:	2900      	cmp	r1, #0
 80056a0:	d0c9      	beq.n	8005636 <__sflush_r+0x1a>
 80056a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056a6:	4299      	cmp	r1, r3
 80056a8:	d002      	beq.n	80056b0 <__sflush_r+0x94>
 80056aa:	4628      	mov	r0, r5
 80056ac:	f7ff fbea 	bl	8004e84 <_free_r>
 80056b0:	2000      	movs	r0, #0
 80056b2:	6360      	str	r0, [r4, #52]	; 0x34
 80056b4:	e7c0      	b.n	8005638 <__sflush_r+0x1c>
 80056b6:	2301      	movs	r3, #1
 80056b8:	4628      	mov	r0, r5
 80056ba:	47b0      	blx	r6
 80056bc:	1c41      	adds	r1, r0, #1
 80056be:	d1c8      	bne.n	8005652 <__sflush_r+0x36>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0c5      	beq.n	8005652 <__sflush_r+0x36>
 80056c6:	2b1d      	cmp	r3, #29
 80056c8:	d001      	beq.n	80056ce <__sflush_r+0xb2>
 80056ca:	2b16      	cmp	r3, #22
 80056cc:	d101      	bne.n	80056d2 <__sflush_r+0xb6>
 80056ce:	602f      	str	r7, [r5, #0]
 80056d0:	e7b1      	b.n	8005636 <__sflush_r+0x1a>
 80056d2:	89a3      	ldrh	r3, [r4, #12]
 80056d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d8:	81a3      	strh	r3, [r4, #12]
 80056da:	e7ad      	b.n	8005638 <__sflush_r+0x1c>
 80056dc:	690f      	ldr	r7, [r1, #16]
 80056de:	2f00      	cmp	r7, #0
 80056e0:	d0a9      	beq.n	8005636 <__sflush_r+0x1a>
 80056e2:	0793      	lsls	r3, r2, #30
 80056e4:	680e      	ldr	r6, [r1, #0]
 80056e6:	bf08      	it	eq
 80056e8:	694b      	ldreq	r3, [r1, #20]
 80056ea:	600f      	str	r7, [r1, #0]
 80056ec:	bf18      	it	ne
 80056ee:	2300      	movne	r3, #0
 80056f0:	eba6 0807 	sub.w	r8, r6, r7
 80056f4:	608b      	str	r3, [r1, #8]
 80056f6:	f1b8 0f00 	cmp.w	r8, #0
 80056fa:	dd9c      	ble.n	8005636 <__sflush_r+0x1a>
 80056fc:	6a21      	ldr	r1, [r4, #32]
 80056fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005700:	4643      	mov	r3, r8
 8005702:	463a      	mov	r2, r7
 8005704:	4628      	mov	r0, r5
 8005706:	47b0      	blx	r6
 8005708:	2800      	cmp	r0, #0
 800570a:	dc06      	bgt.n	800571a <__sflush_r+0xfe>
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005712:	81a3      	strh	r3, [r4, #12]
 8005714:	f04f 30ff 	mov.w	r0, #4294967295
 8005718:	e78e      	b.n	8005638 <__sflush_r+0x1c>
 800571a:	4407      	add	r7, r0
 800571c:	eba8 0800 	sub.w	r8, r8, r0
 8005720:	e7e9      	b.n	80056f6 <__sflush_r+0xda>
 8005722:	bf00      	nop
 8005724:	dfbffffe 	.word	0xdfbffffe

08005728 <_fflush_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	690b      	ldr	r3, [r1, #16]
 800572c:	4605      	mov	r5, r0
 800572e:	460c      	mov	r4, r1
 8005730:	b913      	cbnz	r3, 8005738 <_fflush_r+0x10>
 8005732:	2500      	movs	r5, #0
 8005734:	4628      	mov	r0, r5
 8005736:	bd38      	pop	{r3, r4, r5, pc}
 8005738:	b118      	cbz	r0, 8005742 <_fflush_r+0x1a>
 800573a:	6a03      	ldr	r3, [r0, #32]
 800573c:	b90b      	cbnz	r3, 8005742 <_fflush_r+0x1a>
 800573e:	f7ff f9a1 	bl	8004a84 <__sinit>
 8005742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f3      	beq.n	8005732 <_fflush_r+0xa>
 800574a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800574c:	07d0      	lsls	r0, r2, #31
 800574e:	d404      	bmi.n	800575a <_fflush_r+0x32>
 8005750:	0599      	lsls	r1, r3, #22
 8005752:	d402      	bmi.n	800575a <_fflush_r+0x32>
 8005754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005756:	f7ff fb92 	bl	8004e7e <__retarget_lock_acquire_recursive>
 800575a:	4628      	mov	r0, r5
 800575c:	4621      	mov	r1, r4
 800575e:	f7ff ff5d 	bl	800561c <__sflush_r>
 8005762:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005764:	07da      	lsls	r2, r3, #31
 8005766:	4605      	mov	r5, r0
 8005768:	d4e4      	bmi.n	8005734 <_fflush_r+0xc>
 800576a:	89a3      	ldrh	r3, [r4, #12]
 800576c:	059b      	lsls	r3, r3, #22
 800576e:	d4e1      	bmi.n	8005734 <_fflush_r+0xc>
 8005770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005772:	f7ff fb85 	bl	8004e80 <__retarget_lock_release_recursive>
 8005776:	e7dd      	b.n	8005734 <_fflush_r+0xc>

08005778 <__swhatbuf_r>:
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	460c      	mov	r4, r1
 800577c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005780:	2900      	cmp	r1, #0
 8005782:	b096      	sub	sp, #88	; 0x58
 8005784:	4615      	mov	r5, r2
 8005786:	461e      	mov	r6, r3
 8005788:	da0d      	bge.n	80057a6 <__swhatbuf_r+0x2e>
 800578a:	89a3      	ldrh	r3, [r4, #12]
 800578c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005790:	f04f 0100 	mov.w	r1, #0
 8005794:	bf0c      	ite	eq
 8005796:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800579a:	2340      	movne	r3, #64	; 0x40
 800579c:	2000      	movs	r0, #0
 800579e:	6031      	str	r1, [r6, #0]
 80057a0:	602b      	str	r3, [r5, #0]
 80057a2:	b016      	add	sp, #88	; 0x58
 80057a4:	bd70      	pop	{r4, r5, r6, pc}
 80057a6:	466a      	mov	r2, sp
 80057a8:	f000 f87c 	bl	80058a4 <_fstat_r>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	dbec      	blt.n	800578a <__swhatbuf_r+0x12>
 80057b0:	9901      	ldr	r1, [sp, #4]
 80057b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80057b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80057ba:	4259      	negs	r1, r3
 80057bc:	4159      	adcs	r1, r3
 80057be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057c2:	e7eb      	b.n	800579c <__swhatbuf_r+0x24>

080057c4 <__smakebuf_r>:
 80057c4:	898b      	ldrh	r3, [r1, #12]
 80057c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057c8:	079d      	lsls	r5, r3, #30
 80057ca:	4606      	mov	r6, r0
 80057cc:	460c      	mov	r4, r1
 80057ce:	d507      	bpl.n	80057e0 <__smakebuf_r+0x1c>
 80057d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	6123      	str	r3, [r4, #16]
 80057d8:	2301      	movs	r3, #1
 80057da:	6163      	str	r3, [r4, #20]
 80057dc:	b002      	add	sp, #8
 80057de:	bd70      	pop	{r4, r5, r6, pc}
 80057e0:	ab01      	add	r3, sp, #4
 80057e2:	466a      	mov	r2, sp
 80057e4:	f7ff ffc8 	bl	8005778 <__swhatbuf_r>
 80057e8:	9900      	ldr	r1, [sp, #0]
 80057ea:	4605      	mov	r5, r0
 80057ec:	4630      	mov	r0, r6
 80057ee:	f7ff fbb5 	bl	8004f5c <_malloc_r>
 80057f2:	b948      	cbnz	r0, 8005808 <__smakebuf_r+0x44>
 80057f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057f8:	059a      	lsls	r2, r3, #22
 80057fa:	d4ef      	bmi.n	80057dc <__smakebuf_r+0x18>
 80057fc:	f023 0303 	bic.w	r3, r3, #3
 8005800:	f043 0302 	orr.w	r3, r3, #2
 8005804:	81a3      	strh	r3, [r4, #12]
 8005806:	e7e3      	b.n	80057d0 <__smakebuf_r+0xc>
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	6020      	str	r0, [r4, #0]
 800580c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005810:	81a3      	strh	r3, [r4, #12]
 8005812:	9b00      	ldr	r3, [sp, #0]
 8005814:	6163      	str	r3, [r4, #20]
 8005816:	9b01      	ldr	r3, [sp, #4]
 8005818:	6120      	str	r0, [r4, #16]
 800581a:	b15b      	cbz	r3, 8005834 <__smakebuf_r+0x70>
 800581c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005820:	4630      	mov	r0, r6
 8005822:	f000 f851 	bl	80058c8 <_isatty_r>
 8005826:	b128      	cbz	r0, 8005834 <__smakebuf_r+0x70>
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	f023 0303 	bic.w	r3, r3, #3
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	81a3      	strh	r3, [r4, #12]
 8005834:	89a3      	ldrh	r3, [r4, #12]
 8005836:	431d      	orrs	r5, r3
 8005838:	81a5      	strh	r5, [r4, #12]
 800583a:	e7cf      	b.n	80057dc <__smakebuf_r+0x18>

0800583c <_putc_r>:
 800583c:	b570      	push	{r4, r5, r6, lr}
 800583e:	460d      	mov	r5, r1
 8005840:	4614      	mov	r4, r2
 8005842:	4606      	mov	r6, r0
 8005844:	b118      	cbz	r0, 800584e <_putc_r+0x12>
 8005846:	6a03      	ldr	r3, [r0, #32]
 8005848:	b90b      	cbnz	r3, 800584e <_putc_r+0x12>
 800584a:	f7ff f91b 	bl	8004a84 <__sinit>
 800584e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005850:	07d8      	lsls	r0, r3, #31
 8005852:	d405      	bmi.n	8005860 <_putc_r+0x24>
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	0599      	lsls	r1, r3, #22
 8005858:	d402      	bmi.n	8005860 <_putc_r+0x24>
 800585a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800585c:	f7ff fb0f 	bl	8004e7e <__retarget_lock_acquire_recursive>
 8005860:	68a3      	ldr	r3, [r4, #8]
 8005862:	3b01      	subs	r3, #1
 8005864:	2b00      	cmp	r3, #0
 8005866:	60a3      	str	r3, [r4, #8]
 8005868:	da05      	bge.n	8005876 <_putc_r+0x3a>
 800586a:	69a2      	ldr	r2, [r4, #24]
 800586c:	4293      	cmp	r3, r2
 800586e:	db12      	blt.n	8005896 <_putc_r+0x5a>
 8005870:	b2eb      	uxtb	r3, r5
 8005872:	2b0a      	cmp	r3, #10
 8005874:	d00f      	beq.n	8005896 <_putc_r+0x5a>
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	6022      	str	r2, [r4, #0]
 800587c:	701d      	strb	r5, [r3, #0]
 800587e:	b2ed      	uxtb	r5, r5
 8005880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005882:	07da      	lsls	r2, r3, #31
 8005884:	d405      	bmi.n	8005892 <_putc_r+0x56>
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	059b      	lsls	r3, r3, #22
 800588a:	d402      	bmi.n	8005892 <_putc_r+0x56>
 800588c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800588e:	f7ff faf7 	bl	8004e80 <__retarget_lock_release_recursive>
 8005892:	4628      	mov	r0, r5
 8005894:	bd70      	pop	{r4, r5, r6, pc}
 8005896:	4629      	mov	r1, r5
 8005898:	4622      	mov	r2, r4
 800589a:	4630      	mov	r0, r6
 800589c:	f7ff f9e1 	bl	8004c62 <__swbuf_r>
 80058a0:	4605      	mov	r5, r0
 80058a2:	e7ed      	b.n	8005880 <_putc_r+0x44>

080058a4 <_fstat_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4d07      	ldr	r5, [pc, #28]	; (80058c4 <_fstat_r+0x20>)
 80058a8:	2300      	movs	r3, #0
 80058aa:	4604      	mov	r4, r0
 80058ac:	4608      	mov	r0, r1
 80058ae:	4611      	mov	r1, r2
 80058b0:	602b      	str	r3, [r5, #0]
 80058b2:	f7fb fef2 	bl	800169a <_fstat>
 80058b6:	1c43      	adds	r3, r0, #1
 80058b8:	d102      	bne.n	80058c0 <_fstat_r+0x1c>
 80058ba:	682b      	ldr	r3, [r5, #0]
 80058bc:	b103      	cbz	r3, 80058c0 <_fstat_r+0x1c>
 80058be:	6023      	str	r3, [r4, #0]
 80058c0:	bd38      	pop	{r3, r4, r5, pc}
 80058c2:	bf00      	nop
 80058c4:	20000f70 	.word	0x20000f70

080058c8 <_isatty_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4d06      	ldr	r5, [pc, #24]	; (80058e4 <_isatty_r+0x1c>)
 80058cc:	2300      	movs	r3, #0
 80058ce:	4604      	mov	r4, r0
 80058d0:	4608      	mov	r0, r1
 80058d2:	602b      	str	r3, [r5, #0]
 80058d4:	f7fb fef1 	bl	80016ba <_isatty>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d102      	bne.n	80058e2 <_isatty_r+0x1a>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	b103      	cbz	r3, 80058e2 <_isatty_r+0x1a>
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	bd38      	pop	{r3, r4, r5, pc}
 80058e4:	20000f70 	.word	0x20000f70

080058e8 <_sbrk_r>:
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	4d06      	ldr	r5, [pc, #24]	; (8005904 <_sbrk_r+0x1c>)
 80058ec:	2300      	movs	r3, #0
 80058ee:	4604      	mov	r4, r0
 80058f0:	4608      	mov	r0, r1
 80058f2:	602b      	str	r3, [r5, #0]
 80058f4:	f7fb fefa 	bl	80016ec <_sbrk>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	d102      	bne.n	8005902 <_sbrk_r+0x1a>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	b103      	cbz	r3, 8005902 <_sbrk_r+0x1a>
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	bd38      	pop	{r3, r4, r5, pc}
 8005904:	20000f70 	.word	0x20000f70

08005908 <exp>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	ed2d 8b02 	vpush	{d8}
 800590e:	ec55 4b10 	vmov	r4, r5, d0
 8005912:	f000 f8a5 	bl	8005a60 <__ieee754_exp>
 8005916:	eeb0 8a40 	vmov.f32	s16, s0
 800591a:	eef0 8a60 	vmov.f32	s17, s1
 800591e:	ec45 4b10 	vmov	d0, r4, r5
 8005922:	f000 f885 	bl	8005a30 <finite>
 8005926:	b168      	cbz	r0, 8005944 <exp+0x3c>
 8005928:	a317      	add	r3, pc, #92	; (adr r3, 8005988 <exp+0x80>)
 800592a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592e:	4620      	mov	r0, r4
 8005930:	4629      	mov	r1, r5
 8005932:	f7fb f8f1 	bl	8000b18 <__aeabi_dcmpgt>
 8005936:	b160      	cbz	r0, 8005952 <exp+0x4a>
 8005938:	f7ff fa76 	bl	8004e28 <__errno>
 800593c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8005978 <exp+0x70>
 8005940:	2322      	movs	r3, #34	; 0x22
 8005942:	6003      	str	r3, [r0, #0]
 8005944:	eeb0 0a48 	vmov.f32	s0, s16
 8005948:	eef0 0a68 	vmov.f32	s1, s17
 800594c:	ecbd 8b02 	vpop	{d8}
 8005950:	bd38      	pop	{r3, r4, r5, pc}
 8005952:	a30f      	add	r3, pc, #60	; (adr r3, 8005990 <exp+0x88>)
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	4620      	mov	r0, r4
 800595a:	4629      	mov	r1, r5
 800595c:	f7fb f8be 	bl	8000adc <__aeabi_dcmplt>
 8005960:	2800      	cmp	r0, #0
 8005962:	d0ef      	beq.n	8005944 <exp+0x3c>
 8005964:	f7ff fa60 	bl	8004e28 <__errno>
 8005968:	2322      	movs	r3, #34	; 0x22
 800596a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8005980 <exp+0x78>
 800596e:	6003      	str	r3, [r0, #0]
 8005970:	e7e8      	b.n	8005944 <exp+0x3c>
 8005972:	bf00      	nop
 8005974:	f3af 8000 	nop.w
 8005978:	00000000 	.word	0x00000000
 800597c:	7ff00000 	.word	0x7ff00000
	...
 8005988:	fefa39ef 	.word	0xfefa39ef
 800598c:	40862e42 	.word	0x40862e42
 8005990:	d52d3051 	.word	0xd52d3051
 8005994:	c0874910 	.word	0xc0874910

08005998 <logf>:
 8005998:	b508      	push	{r3, lr}
 800599a:	ed2d 8b02 	vpush	{d8}
 800599e:	eeb0 8a40 	vmov.f32	s16, s0
 80059a2:	f000 f9df 	bl	8005d64 <__ieee754_logf>
 80059a6:	eeb4 8a48 	vcmp.f32	s16, s16
 80059aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ae:	d60f      	bvs.n	80059d0 <logf+0x38>
 80059b0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80059b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b8:	dc0a      	bgt.n	80059d0 <logf+0x38>
 80059ba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80059be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c2:	d108      	bne.n	80059d6 <logf+0x3e>
 80059c4:	f7ff fa30 	bl	8004e28 <__errno>
 80059c8:	2322      	movs	r3, #34	; 0x22
 80059ca:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80059ec <logf+0x54>
 80059ce:	6003      	str	r3, [r0, #0]
 80059d0:	ecbd 8b02 	vpop	{d8}
 80059d4:	bd08      	pop	{r3, pc}
 80059d6:	f7ff fa27 	bl	8004e28 <__errno>
 80059da:	ecbd 8b02 	vpop	{d8}
 80059de:	2321      	movs	r3, #33	; 0x21
 80059e0:	6003      	str	r3, [r0, #0]
 80059e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80059e6:	4802      	ldr	r0, [pc, #8]	; (80059f0 <logf+0x58>)
 80059e8:	f000 b82e 	b.w	8005a48 <nanf>
 80059ec:	ff800000 	.word	0xff800000
 80059f0:	08006139 	.word	0x08006139

080059f4 <sqrtf>:
 80059f4:	b508      	push	{r3, lr}
 80059f6:	ed2d 8b02 	vpush	{d8}
 80059fa:	eeb0 8a40 	vmov.f32	s16, s0
 80059fe:	f000 f829 	bl	8005a54 <__ieee754_sqrtf>
 8005a02:	eeb4 8a48 	vcmp.f32	s16, s16
 8005a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a0a:	d60c      	bvs.n	8005a26 <sqrtf+0x32>
 8005a0c:	eddf 8a07 	vldr	s17, [pc, #28]	; 8005a2c <sqrtf+0x38>
 8005a10:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a18:	d505      	bpl.n	8005a26 <sqrtf+0x32>
 8005a1a:	f7ff fa05 	bl	8004e28 <__errno>
 8005a1e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005a22:	2321      	movs	r3, #33	; 0x21
 8005a24:	6003      	str	r3, [r0, #0]
 8005a26:	ecbd 8b02 	vpop	{d8}
 8005a2a:	bd08      	pop	{r3, pc}
 8005a2c:	00000000 	.word	0x00000000

08005a30 <finite>:
 8005a30:	b082      	sub	sp, #8
 8005a32:	ed8d 0b00 	vstr	d0, [sp]
 8005a36:	9801      	ldr	r0, [sp, #4]
 8005a38:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005a3c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005a40:	0fc0      	lsrs	r0, r0, #31
 8005a42:	b002      	add	sp, #8
 8005a44:	4770      	bx	lr
	...

08005a48 <nanf>:
 8005a48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005a50 <nanf+0x8>
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	7fc00000 	.word	0x7fc00000

08005a54 <__ieee754_sqrtf>:
 8005a54:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005a58:	4770      	bx	lr
 8005a5a:	0000      	movs	r0, r0
 8005a5c:	0000      	movs	r0, r0
	...

08005a60 <__ieee754_exp>:
 8005a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a64:	ec55 4b10 	vmov	r4, r5, d0
 8005a68:	49b5      	ldr	r1, [pc, #724]	; (8005d40 <__ieee754_exp+0x2e0>)
 8005a6a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8005a6e:	428a      	cmp	r2, r1
 8005a70:	ed2d 8b04 	vpush	{d8-d9}
 8005a74:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8005a78:	d93b      	bls.n	8005af2 <__ieee754_exp+0x92>
 8005a7a:	49b2      	ldr	r1, [pc, #712]	; (8005d44 <__ieee754_exp+0x2e4>)
 8005a7c:	428a      	cmp	r2, r1
 8005a7e:	d916      	bls.n	8005aae <__ieee754_exp+0x4e>
 8005a80:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005a84:	4323      	orrs	r3, r4
 8005a86:	ee10 2a10 	vmov	r2, s0
 8005a8a:	d007      	beq.n	8005a9c <__ieee754_exp+0x3c>
 8005a8c:	462b      	mov	r3, r5
 8005a8e:	4620      	mov	r0, r4
 8005a90:	4629      	mov	r1, r5
 8005a92:	f7fa fbfb 	bl	800028c <__adddf3>
 8005a96:	4604      	mov	r4, r0
 8005a98:	460d      	mov	r5, r1
 8005a9a:	e002      	b.n	8005aa2 <__ieee754_exp+0x42>
 8005a9c:	b10e      	cbz	r6, 8005aa2 <__ieee754_exp+0x42>
 8005a9e:	2400      	movs	r4, #0
 8005aa0:	2500      	movs	r5, #0
 8005aa2:	ecbd 8b04 	vpop	{d8-d9}
 8005aa6:	ec45 4b10 	vmov	d0, r4, r5
 8005aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aae:	a38e      	add	r3, pc, #568	; (adr r3, 8005ce8 <__ieee754_exp+0x288>)
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	ee10 0a10 	vmov	r0, s0
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f7fb f82d 	bl	8000b18 <__aeabi_dcmpgt>
 8005abe:	4607      	mov	r7, r0
 8005ac0:	b130      	cbz	r0, 8005ad0 <__ieee754_exp+0x70>
 8005ac2:	ecbd 8b04 	vpop	{d8-d9}
 8005ac6:	2000      	movs	r0, #0
 8005ac8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005acc:	f000 ba63 	b.w	8005f96 <__math_oflow>
 8005ad0:	a387      	add	r3, pc, #540	; (adr r3, 8005cf0 <__ieee754_exp+0x290>)
 8005ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	4629      	mov	r1, r5
 8005ada:	f7fa ffff 	bl	8000adc <__aeabi_dcmplt>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	f000 808b 	beq.w	8005bfa <__ieee754_exp+0x19a>
 8005ae4:	ecbd 8b04 	vpop	{d8-d9}
 8005ae8:	4638      	mov	r0, r7
 8005aea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aee:	f000 ba49 	b.w	8005f84 <__math_uflow>
 8005af2:	4b95      	ldr	r3, [pc, #596]	; (8005d48 <__ieee754_exp+0x2e8>)
 8005af4:	429a      	cmp	r2, r3
 8005af6:	f240 80ac 	bls.w	8005c52 <__ieee754_exp+0x1f2>
 8005afa:	4b94      	ldr	r3, [pc, #592]	; (8005d4c <__ieee754_exp+0x2ec>)
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d87c      	bhi.n	8005bfa <__ieee754_exp+0x19a>
 8005b00:	4b93      	ldr	r3, [pc, #588]	; (8005d50 <__ieee754_exp+0x2f0>)
 8005b02:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0a:	ee10 0a10 	vmov	r0, s0
 8005b0e:	4629      	mov	r1, r5
 8005b10:	f7fa fbba 	bl	8000288 <__aeabi_dsub>
 8005b14:	4b8f      	ldr	r3, [pc, #572]	; (8005d54 <__ieee754_exp+0x2f4>)
 8005b16:	00f7      	lsls	r7, r6, #3
 8005b18:	443b      	add	r3, r7
 8005b1a:	ed93 7b00 	vldr	d7, [r3]
 8005b1e:	f1c6 0a01 	rsb	sl, r6, #1
 8005b22:	4680      	mov	r8, r0
 8005b24:	4689      	mov	r9, r1
 8005b26:	ebaa 0a06 	sub.w	sl, sl, r6
 8005b2a:	eeb0 8a47 	vmov.f32	s16, s14
 8005b2e:	eef0 8a67 	vmov.f32	s17, s15
 8005b32:	ec53 2b18 	vmov	r2, r3, d8
 8005b36:	4640      	mov	r0, r8
 8005b38:	4649      	mov	r1, r9
 8005b3a:	f7fa fba5 	bl	8000288 <__aeabi_dsub>
 8005b3e:	4604      	mov	r4, r0
 8005b40:	460d      	mov	r5, r1
 8005b42:	4622      	mov	r2, r4
 8005b44:	462b      	mov	r3, r5
 8005b46:	4620      	mov	r0, r4
 8005b48:	4629      	mov	r1, r5
 8005b4a:	f7fa fd55 	bl	80005f8 <__aeabi_dmul>
 8005b4e:	a36a      	add	r3, pc, #424	; (adr r3, 8005cf8 <__ieee754_exp+0x298>)
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	4606      	mov	r6, r0
 8005b56:	460f      	mov	r7, r1
 8005b58:	f7fa fd4e 	bl	80005f8 <__aeabi_dmul>
 8005b5c:	a368      	add	r3, pc, #416	; (adr r3, 8005d00 <__ieee754_exp+0x2a0>)
 8005b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b62:	f7fa fb91 	bl	8000288 <__aeabi_dsub>
 8005b66:	4632      	mov	r2, r6
 8005b68:	463b      	mov	r3, r7
 8005b6a:	f7fa fd45 	bl	80005f8 <__aeabi_dmul>
 8005b6e:	a366      	add	r3, pc, #408	; (adr r3, 8005d08 <__ieee754_exp+0x2a8>)
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	f7fa fb8a 	bl	800028c <__adddf3>
 8005b78:	4632      	mov	r2, r6
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	f7fa fd3c 	bl	80005f8 <__aeabi_dmul>
 8005b80:	a363      	add	r3, pc, #396	; (adr r3, 8005d10 <__ieee754_exp+0x2b0>)
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	f7fa fb7f 	bl	8000288 <__aeabi_dsub>
 8005b8a:	4632      	mov	r2, r6
 8005b8c:	463b      	mov	r3, r7
 8005b8e:	f7fa fd33 	bl	80005f8 <__aeabi_dmul>
 8005b92:	a361      	add	r3, pc, #388	; (adr r3, 8005d18 <__ieee754_exp+0x2b8>)
 8005b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b98:	f7fa fb78 	bl	800028c <__adddf3>
 8005b9c:	4632      	mov	r2, r6
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	f7fa fd2a 	bl	80005f8 <__aeabi_dmul>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4620      	mov	r0, r4
 8005baa:	4629      	mov	r1, r5
 8005bac:	f7fa fb6c 	bl	8000288 <__aeabi_dsub>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4606      	mov	r6, r0
 8005bb6:	460f      	mov	r7, r1
 8005bb8:	4620      	mov	r0, r4
 8005bba:	4629      	mov	r1, r5
 8005bbc:	f7fa fd1c 	bl	80005f8 <__aeabi_dmul>
 8005bc0:	ec41 0b19 	vmov	d9, r0, r1
 8005bc4:	f1ba 0f00 	cmp.w	sl, #0
 8005bc8:	d15d      	bne.n	8005c86 <__ieee754_exp+0x226>
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	4639      	mov	r1, r7
 8005bd4:	f7fa fb58 	bl	8000288 <__aeabi_dsub>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	ec51 0b19 	vmov	r0, r1, d9
 8005be0:	f7fa fe34 	bl	800084c <__aeabi_ddiv>
 8005be4:	4622      	mov	r2, r4
 8005be6:	462b      	mov	r3, r5
 8005be8:	f7fa fb4e 	bl	8000288 <__aeabi_dsub>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	4959      	ldr	r1, [pc, #356]	; (8005d58 <__ieee754_exp+0x2f8>)
 8005bf4:	f7fa fb48 	bl	8000288 <__aeabi_dsub>
 8005bf8:	e74d      	b.n	8005a96 <__ieee754_exp+0x36>
 8005bfa:	4b58      	ldr	r3, [pc, #352]	; (8005d5c <__ieee754_exp+0x2fc>)
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005c02:	4629      	mov	r1, r5
 8005c04:	a346      	add	r3, pc, #280	; (adr r3, 8005d20 <__ieee754_exp+0x2c0>)
 8005c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0a:	f7fa fcf5 	bl	80005f8 <__aeabi_dmul>
 8005c0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c12:	f7fa fb3b 	bl	800028c <__adddf3>
 8005c16:	f7fa ff89 	bl	8000b2c <__aeabi_d2iz>
 8005c1a:	4682      	mov	sl, r0
 8005c1c:	f7fa fc82 	bl	8000524 <__aeabi_i2d>
 8005c20:	a341      	add	r3, pc, #260	; (adr r3, 8005d28 <__ieee754_exp+0x2c8>)
 8005c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c26:	4606      	mov	r6, r0
 8005c28:	460f      	mov	r7, r1
 8005c2a:	f7fa fce5 	bl	80005f8 <__aeabi_dmul>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4620      	mov	r0, r4
 8005c34:	4629      	mov	r1, r5
 8005c36:	f7fa fb27 	bl	8000288 <__aeabi_dsub>
 8005c3a:	a33d      	add	r3, pc, #244	; (adr r3, 8005d30 <__ieee754_exp+0x2d0>)
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	4680      	mov	r8, r0
 8005c42:	4689      	mov	r9, r1
 8005c44:	4630      	mov	r0, r6
 8005c46:	4639      	mov	r1, r7
 8005c48:	f7fa fcd6 	bl	80005f8 <__aeabi_dmul>
 8005c4c:	ec41 0b18 	vmov	d8, r0, r1
 8005c50:	e76f      	b.n	8005b32 <__ieee754_exp+0xd2>
 8005c52:	4b43      	ldr	r3, [pc, #268]	; (8005d60 <__ieee754_exp+0x300>)
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d811      	bhi.n	8005c7c <__ieee754_exp+0x21c>
 8005c58:	a337      	add	r3, pc, #220	; (adr r3, 8005d38 <__ieee754_exp+0x2d8>)
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	ee10 0a10 	vmov	r0, s0
 8005c62:	4629      	mov	r1, r5
 8005c64:	f7fa fb12 	bl	800028c <__adddf3>
 8005c68:	4b3b      	ldr	r3, [pc, #236]	; (8005d58 <__ieee754_exp+0x2f8>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f7fa ff54 	bl	8000b18 <__aeabi_dcmpgt>
 8005c70:	b138      	cbz	r0, 8005c82 <__ieee754_exp+0x222>
 8005c72:	4b39      	ldr	r3, [pc, #228]	; (8005d58 <__ieee754_exp+0x2f8>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	4620      	mov	r0, r4
 8005c78:	4629      	mov	r1, r5
 8005c7a:	e70a      	b.n	8005a92 <__ieee754_exp+0x32>
 8005c7c:	f04f 0a00 	mov.w	sl, #0
 8005c80:	e75f      	b.n	8005b42 <__ieee754_exp+0xe2>
 8005c82:	4682      	mov	sl, r0
 8005c84:	e75d      	b.n	8005b42 <__ieee754_exp+0xe2>
 8005c86:	4632      	mov	r2, r6
 8005c88:	463b      	mov	r3, r7
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005c90:	f7fa fafa 	bl	8000288 <__aeabi_dsub>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	ec51 0b19 	vmov	r0, r1, d9
 8005c9c:	f7fa fdd6 	bl	800084c <__aeabi_ddiv>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	ec51 0b18 	vmov	r0, r1, d8
 8005ca8:	f7fa faee 	bl	8000288 <__aeabi_dsub>
 8005cac:	4642      	mov	r2, r8
 8005cae:	464b      	mov	r3, r9
 8005cb0:	f7fa faea 	bl	8000288 <__aeabi_dsub>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	2000      	movs	r0, #0
 8005cba:	4927      	ldr	r1, [pc, #156]	; (8005d58 <__ieee754_exp+0x2f8>)
 8005cbc:	f7fa fae4 	bl	8000288 <__aeabi_dsub>
 8005cc0:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8005cc4:	4592      	cmp	sl, r2
 8005cc6:	db02      	blt.n	8005cce <__ieee754_exp+0x26e>
 8005cc8:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8005ccc:	e6e3      	b.n	8005a96 <__ieee754_exp+0x36>
 8005cce:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8005cd2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8005cdc:	f7fa fc8c 	bl	80005f8 <__aeabi_dmul>
 8005ce0:	e6d9      	b.n	8005a96 <__ieee754_exp+0x36>
 8005ce2:	bf00      	nop
 8005ce4:	f3af 8000 	nop.w
 8005ce8:	fefa39ef 	.word	0xfefa39ef
 8005cec:	40862e42 	.word	0x40862e42
 8005cf0:	d52d3051 	.word	0xd52d3051
 8005cf4:	c0874910 	.word	0xc0874910
 8005cf8:	72bea4d0 	.word	0x72bea4d0
 8005cfc:	3e663769 	.word	0x3e663769
 8005d00:	c5d26bf1 	.word	0xc5d26bf1
 8005d04:	3ebbbd41 	.word	0x3ebbbd41
 8005d08:	af25de2c 	.word	0xaf25de2c
 8005d0c:	3f11566a 	.word	0x3f11566a
 8005d10:	16bebd93 	.word	0x16bebd93
 8005d14:	3f66c16c 	.word	0x3f66c16c
 8005d18:	5555553e 	.word	0x5555553e
 8005d1c:	3fc55555 	.word	0x3fc55555
 8005d20:	652b82fe 	.word	0x652b82fe
 8005d24:	3ff71547 	.word	0x3ff71547
 8005d28:	fee00000 	.word	0xfee00000
 8005d2c:	3fe62e42 	.word	0x3fe62e42
 8005d30:	35793c76 	.word	0x35793c76
 8005d34:	3dea39ef 	.word	0x3dea39ef
 8005d38:	8800759c 	.word	0x8800759c
 8005d3c:	7e37e43c 	.word	0x7e37e43c
 8005d40:	40862e41 	.word	0x40862e41
 8005d44:	7fefffff 	.word	0x7fefffff
 8005d48:	3fd62e42 	.word	0x3fd62e42
 8005d4c:	3ff0a2b1 	.word	0x3ff0a2b1
 8005d50:	08006178 	.word	0x08006178
 8005d54:	08006188 	.word	0x08006188
 8005d58:	3ff00000 	.word	0x3ff00000
 8005d5c:	08006168 	.word	0x08006168
 8005d60:	3defffff 	.word	0x3defffff

08005d64 <__ieee754_logf>:
 8005d64:	ee10 3a10 	vmov	r3, s0
 8005d68:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005d6c:	d106      	bne.n	8005d7c <__ieee754_logf+0x18>
 8005d6e:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8005f08 <__ieee754_logf+0x1a4>
 8005d72:	eddf 7a66 	vldr	s15, [pc, #408]	; 8005f0c <__ieee754_logf+0x1a8>
 8005d76:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8005d7a:	4770      	bx	lr
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	da02      	bge.n	8005d86 <__ieee754_logf+0x22>
 8005d80:	ee30 7a40 	vsub.f32	s14, s0, s0
 8005d84:	e7f5      	b.n	8005d72 <__ieee754_logf+0xe>
 8005d86:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005d8a:	db02      	blt.n	8005d92 <__ieee754_logf+0x2e>
 8005d8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005d90:	4770      	bx	lr
 8005d92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d96:	bfb8      	it	lt
 8005d98:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 8005f10 <__ieee754_logf+0x1ac>
 8005d9c:	485d      	ldr	r0, [pc, #372]	; (8005f14 <__ieee754_logf+0x1b0>)
 8005d9e:	bfbe      	ittt	lt
 8005da0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005da4:	f06f 0118 	mvnlt.w	r1, #24
 8005da8:	ee17 3a90 	vmovlt	r3, s15
 8005dac:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8005db0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005db4:	4418      	add	r0, r3
 8005db6:	bfa8      	it	ge
 8005db8:	2100      	movge	r1, #0
 8005dba:	3a7f      	subs	r2, #127	; 0x7f
 8005dbc:	440a      	add	r2, r1
 8005dbe:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8005dc2:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8005dc6:	4319      	orrs	r1, r3
 8005dc8:	ee00 1a10 	vmov	s0, r1
 8005dcc:	4952      	ldr	r1, [pc, #328]	; (8005f18 <__ieee754_logf+0x1b4>)
 8005dce:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8005dd2:	f103 000f 	add.w	r0, r3, #15
 8005dd6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005dda:	4001      	ands	r1, r0
 8005ddc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005de0:	bb89      	cbnz	r1, 8005e46 <__ieee754_logf+0xe2>
 8005de2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dea:	d10f      	bne.n	8005e0c <__ieee754_logf+0xa8>
 8005dec:	2a00      	cmp	r2, #0
 8005dee:	f000 8087 	beq.w	8005f00 <__ieee754_logf+0x19c>
 8005df2:	ee07 2a90 	vmov	s15, r2
 8005df6:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8005f1c <__ieee754_logf+0x1b8>
 8005dfa:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8005f20 <__ieee754_logf+0x1bc>
 8005dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e02:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005e06:	eea7 0a87 	vfma.f32	s0, s15, s14
 8005e0a:	4770      	bx	lr
 8005e0c:	eddf 6a45 	vldr	s13, [pc, #276]	; 8005f24 <__ieee754_logf+0x1c0>
 8005e10:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005e14:	eee0 7a66 	vfms.f32	s15, s0, s13
 8005e18:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e20:	b912      	cbnz	r2, 8005e28 <__ieee754_logf+0xc4>
 8005e22:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005e26:	4770      	bx	lr
 8005e28:	ee07 2a90 	vmov	s15, r2
 8005e2c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005f1c <__ieee754_logf+0x1b8>
 8005e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e34:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8005e38:	ee37 0a40 	vsub.f32	s0, s14, s0
 8005e3c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005f20 <__ieee754_logf+0x1bc>
 8005e40:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8005e44:	4770      	bx	lr
 8005e46:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8005e4a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8005e4e:	eddf 5a36 	vldr	s11, [pc, #216]	; 8005f28 <__ieee754_logf+0x1c4>
 8005e52:	eddf 4a36 	vldr	s9, [pc, #216]	; 8005f2c <__ieee754_logf+0x1c8>
 8005e56:	4936      	ldr	r1, [pc, #216]	; (8005f30 <__ieee754_logf+0x1cc>)
 8005e58:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8005e5c:	4419      	add	r1, r3
 8005e5e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8005e62:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005e66:	430b      	orrs	r3, r1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	ee07 2a90 	vmov	s15, r2
 8005e6e:	ee26 5a06 	vmul.f32	s10, s12, s12
 8005e72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005e76:	ee25 7a05 	vmul.f32	s14, s10, s10
 8005e7a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8005f34 <__ieee754_logf+0x1d0>
 8005e7e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005e82:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005f38 <__ieee754_logf+0x1d4>
 8005e86:	eee7 5a87 	vfma.f32	s11, s15, s14
 8005e8a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8005f3c <__ieee754_logf+0x1d8>
 8005e8e:	eee7 7a24 	vfma.f32	s15, s14, s9
 8005e92:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8005f40 <__ieee754_logf+0x1dc>
 8005e96:	eee7 4a87 	vfma.f32	s9, s15, s14
 8005e9a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8005f44 <__ieee754_logf+0x1e0>
 8005e9e:	eee4 7a87 	vfma.f32	s15, s9, s14
 8005ea2:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005ea6:	eee5 7a87 	vfma.f32	s15, s11, s14
 8005eaa:	dd1a      	ble.n	8005ee2 <__ieee754_logf+0x17e>
 8005eac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005eb0:	ee20 7a07 	vmul.f32	s14, s0, s14
 8005eb4:	ee27 7a00 	vmul.f32	s14, s14, s0
 8005eb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ebc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005ec0:	b912      	cbnz	r2, 8005ec8 <__ieee754_logf+0x164>
 8005ec2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ec6:	e7ac      	b.n	8005e22 <__ieee754_logf+0xbe>
 8005ec8:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8005f1c <__ieee754_logf+0x1b8>
 8005ecc:	eee6 7a86 	vfma.f32	s15, s13, s12
 8005ed0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ed4:	ee37 0a40 	vsub.f32	s0, s14, s0
 8005ed8:	eddf 7a11 	vldr	s15, [pc, #68]	; 8005f20 <__ieee754_logf+0x1bc>
 8005edc:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8005ee0:	4770      	bx	lr
 8005ee2:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005ee6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005eea:	b912      	cbnz	r2, 8005ef2 <__ieee754_logf+0x18e>
 8005eec:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005ef0:	4770      	bx	lr
 8005ef2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8005f1c <__ieee754_logf+0x1b8>
 8005ef6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8005efa:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005efe:	e7eb      	b.n	8005ed8 <__ieee754_logf+0x174>
 8005f00:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8005f0c <__ieee754_logf+0x1a8>
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	cc000000 	.word	0xcc000000
 8005f0c:	00000000 	.word	0x00000000
 8005f10:	4c000000 	.word	0x4c000000
 8005f14:	004afb20 	.word	0x004afb20
 8005f18:	007ffff0 	.word	0x007ffff0
 8005f1c:	3717f7d1 	.word	0x3717f7d1
 8005f20:	3f317180 	.word	0x3f317180
 8005f24:	3eaaaaab 	.word	0x3eaaaaab
 8005f28:	3e1cd04f 	.word	0x3e1cd04f
 8005f2c:	3e178897 	.word	0x3e178897
 8005f30:	ffcf5c30 	.word	0xffcf5c30
 8005f34:	3e638e29 	.word	0x3e638e29
 8005f38:	3ecccccd 	.word	0x3ecccccd
 8005f3c:	3e3a3325 	.word	0x3e3a3325
 8005f40:	3e924925 	.word	0x3e924925
 8005f44:	3f2aaaab 	.word	0x3f2aaaab

08005f48 <with_errno>:
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	460d      	mov	r5, r1
 8005f4e:	4616      	mov	r6, r2
 8005f50:	f7fe ff6a 	bl	8004e28 <__errno>
 8005f54:	4629      	mov	r1, r5
 8005f56:	6006      	str	r6, [r0, #0]
 8005f58:	4620      	mov	r0, r4
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}

08005f5c <xflow>:
 8005f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f5e:	4614      	mov	r4, r2
 8005f60:	461d      	mov	r5, r3
 8005f62:	b108      	cbz	r0, 8005f68 <xflow+0xc>
 8005f64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005f68:	e9cd 2300 	strd	r2, r3, [sp]
 8005f6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f70:	4620      	mov	r0, r4
 8005f72:	4629      	mov	r1, r5
 8005f74:	f7fa fb40 	bl	80005f8 <__aeabi_dmul>
 8005f78:	2222      	movs	r2, #34	; 0x22
 8005f7a:	b003      	add	sp, #12
 8005f7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f80:	f7ff bfe2 	b.w	8005f48 <with_errno>

08005f84 <__math_uflow>:
 8005f84:	b508      	push	{r3, lr}
 8005f86:	2200      	movs	r2, #0
 8005f88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f8c:	f7ff ffe6 	bl	8005f5c <xflow>
 8005f90:	ec41 0b10 	vmov	d0, r0, r1
 8005f94:	bd08      	pop	{r3, pc}

08005f96 <__math_oflow>:
 8005f96:	b508      	push	{r3, lr}
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005f9e:	f7ff ffdd 	bl	8005f5c <xflow>
 8005fa2:	ec41 0b10 	vmov	d0, r0, r1
 8005fa6:	bd08      	pop	{r3, pc}

08005fa8 <_init>:
 8005fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005faa:	bf00      	nop
 8005fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fae:	bc08      	pop	{r3}
 8005fb0:	469e      	mov	lr, r3
 8005fb2:	4770      	bx	lr

08005fb4 <_fini>:
 8005fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb6:	bf00      	nop
 8005fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fba:	bc08      	pop	{r3}
 8005fbc:	469e      	mov	lr, r3
 8005fbe:	4770      	bx	lr
