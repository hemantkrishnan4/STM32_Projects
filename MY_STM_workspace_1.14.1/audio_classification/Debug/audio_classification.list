
audio_classification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  08007550  08007550  00017550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a68  08007a68  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007a68  08007a68  00017a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a70  08007a70  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a70  08007a70  00017a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a74  08007a74  00017a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ec0  200001e4  08007c5c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010a4  08007c5c  000210a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000087  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009fe0  00000000  00000000  0002029b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b15  00000000  00000000  0002a27b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000898  00000000  00000000  0002bd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000068c  00000000  00000000  0002c628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001782b  00000000  00000000  0002ccb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa65  00000000  00000000  000444df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000936f0  00000000  00000000  0004ef44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003650  00000000  00000000  000e2634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e5c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007538 	.word	0x08007538

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08007538 	.word	0x08007538

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <HAL_ADC_ConvCpltCallback>:
void Inference();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	mic = HAL_ADC_GetValue(&hadc1);
 8000f5c:	4806      	ldr	r0, [pc, #24]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x24>)
 8000f5e:	f000 feb7 	bl	8001cd0 <HAL_ADC_GetValue>
 8000f62:	ee07 0a90 	vmov	s15, r0
 8000f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x28>)
 8000f6c:	edc3 7a00 	vstr	s15, [r3]
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000200 	.word	0x20000200
 8000f7c:	20000290 	.word	0x20000290

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f86:	f000 fbfb 	bl	8001780 <HAL_Init>

  /* USER CODE BEGIN Init */
  enum neai_state error_code = neai_classification_init(knowledge);
 8000f8a:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <main+0x50>)
 8000f8c:	f002 fce6 	bl	800395c <neai_classification_init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	71fb      	strb	r3, [r7, #7]
  if(error_code!=NEAI_OK)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d008      	beq.n	8000fac <main+0x2c>
	  {
	  printf("Knowledge initialization ERROR;");
 8000f9a:	480e      	ldr	r0, [pc, #56]	; (8000fd4 <main+0x54>)
 8000f9c:	f003 ff3c 	bl	8004e18 <iprintf>
	  printf("%d", error_code);
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <main+0x58>)
 8000fa6:	f003 ff37 	bl	8004e18 <iprintf>
 8000faa:	e002      	b.n	8000fb2 <main+0x32>
	  }
  else
  {
	  printf("Knowledge initialization DONE;");
 8000fac:	480b      	ldr	r0, [pc, #44]	; (8000fdc <main+0x5c>)
 8000fae:	f003 ff33 	bl	8004e18 <iprintf>
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb2:	f000 f817 	bl	8000fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb6:	f000 f8fd 	bl	80011b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fba:	f000 f8d1 	bl	8001160 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fbe:	f000 f87b 	bl	80010b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <main+0x60>)
 8000fc4:	f000 fcb6 	bl	8001934 <HAL_ADC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Inference();
 8000fc8:	f000 f998 	bl	80012fc <Inference>
 8000fcc:	e7fc      	b.n	8000fc8 <main+0x48>
 8000fce:	bf00      	nop
 8000fd0:	080075cc 	.word	0x080075cc
 8000fd4:	08007574 	.word	0x08007574
 8000fd8:	08007594 	.word	0x08007594
 8000fdc:	08007598 	.word	0x08007598
 8000fe0:	20000200 	.word	0x20000200

08000fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b094      	sub	sp, #80	; 0x50
 8000fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fea:	f107 0320 	add.w	r3, r7, #32
 8000fee:	2230      	movs	r2, #48	; 0x30
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f004 f85e 	bl	80050b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <SystemClock_Config+0xcc>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	4a27      	ldr	r2, [pc, #156]	; (80010b0 <SystemClock_Config+0xcc>)
 8001012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001016:	6413      	str	r3, [r2, #64]	; 0x40
 8001018:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <SystemClock_Config+0xcc>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <SystemClock_Config+0xd0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a21      	ldr	r2, [pc, #132]	; (80010b4 <SystemClock_Config+0xd0>)
 800102e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <SystemClock_Config+0xd0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001040:	2302      	movs	r3, #2
 8001042:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001044:	2301      	movs	r3, #1
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001048:	2310      	movs	r3, #16
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104c:	2302      	movs	r3, #2
 800104e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001050:	2300      	movs	r3, #0
 8001052:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001054:	2310      	movs	r3, #16
 8001056:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001058:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800105c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800105e:	2304      	movs	r3, #4
 8001060:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001062:	2304      	movs	r3, #4
 8001064:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001066:	f107 0320 	add.w	r3, r7, #32
 800106a:	4618      	mov	r0, r3
 800106c:	f001 fb3a 	bl	80026e4 <HAL_RCC_OscConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001076:	f000 f98b 	bl	8001390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107a:	230f      	movs	r3, #15
 800107c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107e:	2302      	movs	r3, #2
 8001080:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2102      	movs	r1, #2
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fd9c 	bl	8002bd4 <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010a2:	f000 f975 	bl	8001390 <Error_Handler>
  }
}
 80010a6:	bf00      	nop
 80010a8:	3750      	adds	r7, #80	; 0x50
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40007000 	.word	0x40007000

080010b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010be:	463b      	mov	r3, r7
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010ca:	4b22      	ldr	r3, [pc, #136]	; (8001154 <MX_ADC1_Init+0x9c>)
 80010cc:	4a22      	ldr	r2, [pc, #136]	; (8001158 <MX_ADC1_Init+0xa0>)
 80010ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <MX_ADC1_Init+0x9c>)
 80010d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <MX_ADC1_Init+0x9c>)
 80010da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_ADC1_Init+0x9c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_ADC1_Init+0x9c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_ADC1_Init+0x9c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_ADC1_Init+0x9c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_ADC1_Init+0x9c>)
 80010fc:	4a17      	ldr	r2, [pc, #92]	; (800115c <MX_ADC1_Init+0xa4>)
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_ADC1_Init+0x9c>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <MX_ADC1_Init+0x9c>)
 8001108:	2201      	movs	r2, #1
 800110a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_ADC1_Init+0x9c>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_ADC1_Init+0x9c>)
 8001116:	2201      	movs	r2, #1
 8001118:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800111a:	480e      	ldr	r0, [pc, #56]	; (8001154 <MX_ADC1_Init+0x9c>)
 800111c:	f000 fbc6 	bl	80018ac <HAL_ADC_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001126:	f000 f933 	bl	8001390 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800112e:	2301      	movs	r3, #1
 8001130:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001136:	463b      	mov	r3, r7
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_ADC1_Init+0x9c>)
 800113c:	f000 fdea 	bl	8001d14 <HAL_ADC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001146:	f000 f923 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000200 	.word	0x20000200
 8001158:	40012000 	.word	0x40012000
 800115c:	0f000001 	.word	0x0f000001

08001160 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_USART2_UART_Init+0x50>)
 8001168:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800116c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001170:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001198:	f001 ff3c 	bl	8003014 <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011a2:	f000 f8f5 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000248 	.word	0x20000248
 80011b0:	40004400 	.word	0x40004400

080011b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <MX_GPIO_Init+0xd0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a2c      	ldr	r2, [pc, #176]	; (8001284 <MX_GPIO_Init+0xd0>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <MX_GPIO_Init+0xd0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <MX_GPIO_Init+0xd0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a25      	ldr	r2, [pc, #148]	; (8001284 <MX_GPIO_Init+0xd0>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b23      	ldr	r3, [pc, #140]	; (8001284 <MX_GPIO_Init+0xd0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <MX_GPIO_Init+0xd0>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a1e      	ldr	r2, [pc, #120]	; (8001284 <MX_GPIO_Init+0xd0>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <MX_GPIO_Init+0xd0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_GPIO_Init+0xd0>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a17      	ldr	r2, [pc, #92]	; (8001284 <MX_GPIO_Init+0xd0>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <MX_GPIO_Init+0xd0>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	2120      	movs	r1, #32
 800123e:	4812      	ldr	r0, [pc, #72]	; (8001288 <MX_GPIO_Init+0xd4>)
 8001240:	f001 fa36 	bl	80026b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001244:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800124a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	480c      	ldr	r0, [pc, #48]	; (800128c <MX_GPIO_Init+0xd8>)
 800125c:	f001 f8a4 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001260:	2320      	movs	r3, #32
 8001262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	4804      	ldr	r0, [pc, #16]	; (8001288 <MX_GPIO_Init+0xd4>)
 8001278:	f001 f896 	bl	80023a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40023800 	.word	0x40023800
 8001288:	40020000 	.word	0x40020000
 800128c:	40020800 	.word	0x40020800

08001290 <fill_mic_buffer>:

/* USER CODE BEGIN 4 */
void fill_mic_buffer(){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
	for (int i=0; i< DATA_INPUT_USER; i++){
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	e00f      	b.n	80012bc <fill_mic_buffer+0x2c>
		HAL_ADC_Start_IT(&hadc1);
 800129c:	480b      	ldr	r0, [pc, #44]	; (80012cc <fill_mic_buffer+0x3c>)
 800129e:	f000 fb49 	bl	8001934 <HAL_ADC_Start_IT>
		mic_buffer[AXIS_NUMBER * i] = mic;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <fill_mic_buffer+0x40>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	490b      	ldr	r1, [pc, #44]	; (80012d4 <fill_mic_buffer+0x44>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	601a      	str	r2, [r3, #0]
		HAL_Delay(3);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f000 fad7 	bl	8001864 <HAL_Delay>
	for (int i=0; i< DATA_INPUT_USER; i++){
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3301      	adds	r3, #1
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2bff      	cmp	r3, #255	; 0xff
 80012c0:	ddec      	ble.n	800129c <fill_mic_buffer+0xc>
	}
}
 80012c2:	bf00      	nop
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000200 	.word	0x20000200
 80012d0:	20000290 	.word	0x20000290
 80012d4:	20000294 	.word	0x20000294

080012d8 <__io_putchar>:

int __io_putchar(int ch){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80012e0:	1d39      	adds	r1, r7, #4
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	2201      	movs	r2, #1
 80012e8:	4803      	ldr	r0, [pc, #12]	; (80012f8 <__io_putchar+0x20>)
 80012ea:	f001 fee3 	bl	80030b4 <HAL_UART_Transmit>
	return ch;
 80012ee:	687b      	ldr	r3, [r7, #4]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000248 	.word	0x20000248

080012fc <Inference>:

void Inference()
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
	uint16_t i, id_class_t0, id_class_tn;
	fill_mic_buffer();
 8001302:	f7ff ffc5 	bl	8001290 <fill_mic_buffer>
	neai_classification(mic_buffer,output_class_buffer, &id_class_t0);
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	461a      	mov	r2, r3
 800130a:	491c      	ldr	r1, [pc, #112]	; (800137c <Inference+0x80>)
 800130c:	481c      	ldr	r0, [pc, #112]	; (8001380 <Inference+0x84>)
 800130e:	f002 fbcf 	bl	8003ab0 <neai_classification>
	for (i=0;i<CONFIRMATIONS_NB-1;i++)
 8001312:	2300      	movs	r3, #0
 8001314:	80fb      	strh	r3, [r7, #6]
 8001316:	e00e      	b.n	8001336 <Inference+0x3a>
	{
		fill_mic_buffer();
 8001318:	f7ff ffba 	bl	8001290 <fill_mic_buffer>
		neai_classification(mic_buffer,output_class_buffer,&id_class_tn);
 800131c:	1cbb      	adds	r3, r7, #2
 800131e:	461a      	mov	r2, r3
 8001320:	4916      	ldr	r1, [pc, #88]	; (800137c <Inference+0x80>)
 8001322:	4817      	ldr	r0, [pc, #92]	; (8001380 <Inference+0x84>)
 8001324:	f002 fbc4 	bl	8003ab0 <neai_classification>
		if (id_class_t0 != id_class_tn) { break; }
 8001328:	88ba      	ldrh	r2, [r7, #4]
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	429a      	cmp	r2, r3
 800132e:	d106      	bne.n	800133e <Inference+0x42>
	for (i=0;i<CONFIRMATIONS_NB-1;i++)
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	3301      	adds	r3, #1
 8001334:	80fb      	strh	r3, [r7, #6]
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d9ed      	bls.n	8001318 <Inference+0x1c>
 800133c:	e000      	b.n	8001340 <Inference+0x44>
		if (id_class_t0 != id_class_tn) { break; }
 800133e:	bf00      	nop
	}
	if (id_class_t0 == id_class_tn)
 8001340:	88ba      	ldrh	r2, [r7, #4]
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	429a      	cmp	r2, r3
 8001346:	d10e      	bne.n	8001366 <Inference+0x6a>
	{
		printf("Detected Class:");
 8001348:	480e      	ldr	r0, [pc, #56]	; (8001384 <Inference+0x88>)
 800134a:	f003 fd65 	bl	8004e18 <iprintf>
		printf(id2class[id_class_t0]);
 800134e:	88bb      	ldrh	r3, [r7, #4]
 8001350:	461a      	mov	r2, r3
 8001352:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <Inference+0x8c>)
 8001354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001358:	4618      	mov	r0, r3
 800135a:	f003 fd5d 	bl	8004e18 <iprintf>
		printf("\r\n");
 800135e:	480b      	ldr	r0, [pc, #44]	; (800138c <Inference+0x90>)
 8001360:	f003 fdc8 	bl	8004ef4 <puts>
	else
	{
		printf("?");
		printf("\r\n");
	}
}
 8001364:	e005      	b.n	8001372 <Inference+0x76>
		printf("?");
 8001366:	203f      	movs	r0, #63	; 0x3f
 8001368:	f003 fd68 	bl	8004e3c <putchar>
		printf("\r\n");
 800136c:	4807      	ldr	r0, [pc, #28]	; (800138c <Inference+0x90>)
 800136e:	f003 fdc1 	bl	8004ef4 <puts>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000694 	.word	0x20000694
 8001380:	20000294 	.word	0x20000294
 8001384:	080075b8 	.word	0x080075b8
 8001388:	20000000 	.word	0x20000000
 800138c:	080075c8 	.word	0x080075c8

08001390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001394:	b672      	cpsid	i
}
 8001396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001398:	e7fe      	b.n	8001398 <Error_Handler+0x8>
	...

0800139c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <HAL_MspInit+0x4c>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <HAL_MspInit+0x4c>)
 80013ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b0:	6453      	str	r3, [r2, #68]	; 0x44
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <HAL_MspInit+0x4c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_MspInit+0x4c>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <HAL_MspInit+0x4c>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_MspInit+0x4c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013da:	2007      	movs	r0, #7
 80013dc:	f000 ffa2 	bl	8002324 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800

080013ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a1b      	ldr	r2, [pc, #108]	; (8001478 <HAL_ADC_MspInit+0x8c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d12f      	bne.n	800146e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_ADC_MspInit+0x90>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a19      	ldr	r2, [pc, #100]	; (800147c <HAL_ADC_MspInit+0x90>)
 8001418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_ADC_MspInit+0x90>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_ADC_MspInit+0x90>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <HAL_ADC_MspInit+0x90>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_ADC_MspInit+0x90>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001446:	2301      	movs	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800144a:	2303      	movs	r3, #3
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4809      	ldr	r0, [pc, #36]	; (8001480 <HAL_ADC_MspInit+0x94>)
 800145a:	f000 ffa5 	bl	80023a8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2012      	movs	r0, #18
 8001464:	f000 ff69 	bl	800233a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001468:	2012      	movs	r0, #18
 800146a:	f000 ff82 	bl	8002372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800146e:	bf00      	nop
 8001470:	3728      	adds	r7, #40	; 0x28
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40012000 	.word	0x40012000
 800147c:	40023800 	.word	0x40023800
 8001480:	40020000 	.word	0x40020000

08001484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a19      	ldr	r2, [pc, #100]	; (8001508 <HAL_UART_MspInit+0x84>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d12b      	bne.n	80014fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_UART_MspInit+0x88>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a17      	ldr	r2, [pc, #92]	; (800150c <HAL_UART_MspInit+0x88>)
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_UART_MspInit+0x88>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_UART_MspInit+0x88>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a10      	ldr	r2, [pc, #64]	; (800150c <HAL_UART_MspInit+0x88>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <HAL_UART_MspInit+0x88>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014de:	230c      	movs	r3, #12
 80014e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ee:	2307      	movs	r3, #7
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	; (8001510 <HAL_UART_MspInit+0x8c>)
 80014fa:	f000 ff55 	bl	80023a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014fe:	bf00      	nop
 8001500:	3728      	adds	r7, #40	; 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40004400 	.word	0x40004400
 800150c:	40023800 	.word	0x40023800
 8001510:	40020000 	.word	0x40020000

08001514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001518:	e7fe      	b.n	8001518 <NMI_Handler+0x4>

0800151a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <HardFault_Handler+0x4>

08001520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <MemManage_Handler+0x4>

08001526 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <BusFault_Handler+0x4>

0800152c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <UsageFault_Handler+0x4>

08001532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001560:	f000 f960 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <ADC_IRQHandler+0x10>)
 800156e:	f000 fa9f 	bl	8001ab0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000200 	.word	0x20000200

0800157c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return 1;
 8001580:	2301      	movs	r3, #1
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_kill>:

int _kill(int pid, int sig)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001596:	f003 fddf 	bl	8005158 <__errno>
 800159a:	4603      	mov	r3, r0
 800159c:	2216      	movs	r2, #22
 800159e:	601a      	str	r2, [r3, #0]
  return -1;
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <_exit>:

void _exit (int status)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ffe7 	bl	800158c <_kill>
  while (1) {}    /* Make sure we hang here */
 80015be:	e7fe      	b.n	80015be <_exit+0x12>

080015c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	e00a      	b.n	80015e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015d2:	f3af 8000 	nop.w
 80015d6:	4601      	mov	r1, r0
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	60ba      	str	r2, [r7, #8]
 80015de:	b2ca      	uxtb	r2, r1
 80015e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3301      	adds	r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	dbf0      	blt.n	80015d2 <_read+0x12>
  }

  return len;
 80015f0:	687b      	ldr	r3, [r7, #4]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	e009      	b.n	8001620 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	60ba      	str	r2, [r7, #8]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fe5f 	bl	80012d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3301      	adds	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	429a      	cmp	r2, r3
 8001626:	dbf1      	blt.n	800160c <_write+0x12>
  }
  return len;
 8001628:	687b      	ldr	r3, [r7, #4]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <_close>:

int _close(int file)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800165a:	605a      	str	r2, [r3, #4]
  return 0;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <_isatty>:

int _isatty(int file)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a4:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <_sbrk+0x5c>)
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <_sbrk+0x60>)
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <_sbrk+0x64>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <_sbrk+0x68>)
 80016bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d207      	bcs.n	80016dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016cc:	f003 fd44 	bl	8005158 <__errno>
 80016d0:	4603      	mov	r3, r0
 80016d2:	220c      	movs	r2, #12
 80016d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	e009      	b.n	80016f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <_sbrk+0x64>)
 80016ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20020000 	.word	0x20020000
 80016fc:	00000400 	.word	0x00000400
 8001700:	200006a0 	.word	0x200006a0
 8001704:	200010a8 	.word	0x200010a8

08001708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <SystemInit+0x20>)
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <SystemInit+0x20>)
 8001714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001764 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001730:	f7ff ffea 	bl	8001708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001734:	480c      	ldr	r0, [pc, #48]	; (8001768 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001736:	490d      	ldr	r1, [pc, #52]	; (800176c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001738:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800174c:	4c0a      	ldr	r4, [pc, #40]	; (8001778 <LoopFillZerobss+0x22>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175a:	f003 fd03 	bl	8005164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175e:	f7ff fc0f 	bl	8000f80 <main>
  bx  lr    
 8001762:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001764:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001770:	08007a78 	.word	0x08007a78
  ldr r2, =_sbss
 8001774:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001778:	200010a4 	.word	0x200010a4

0800177c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800177c:	e7fe      	b.n	800177c <DMA1_Stream0_IRQHandler>
	...

08001780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <HAL_Init+0x40>)
 800178a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <HAL_Init+0x40>)
 8001796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <HAL_Init+0x40>)
 80017a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 fdbb 	bl	8002324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ae:	2000      	movs	r0, #0
 80017b0:	f000 f808 	bl	80017c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b4:	f7ff fdf2 	bl	800139c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023c00 	.word	0x40023c00

080017c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x54>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x58>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017da:	fbb3 f3f1 	udiv	r3, r3, r1
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 fdd3 	bl	800238e <HAL_SYSTICK_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00e      	b.n	8001810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d80a      	bhi.n	800180e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f000 fd9b 	bl	800233a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001804:	4a06      	ldr	r2, [pc, #24]	; (8001820 <HAL_InitTick+0x5c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000010 	.word	0x20000010
 800181c:	20000018 	.word	0x20000018
 8001820:	20000014 	.word	0x20000014

08001824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x20>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_IncTick+0x24>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_IncTick+0x24>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000018 	.word	0x20000018
 8001848:	200006a4 	.word	0x200006a4

0800184c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <HAL_GetTick+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	200006a4 	.word	0x200006a4

08001864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800186c:	f7ff ffee 	bl	800184c <HAL_GetTick>
 8001870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187c:	d005      	beq.n	800188a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_Delay+0x44>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800188a:	bf00      	nop
 800188c:	f7ff ffde 	bl	800184c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d8f7      	bhi.n	800188c <HAL_Delay+0x28>
  {
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000018 	.word	0x20000018

080018ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e033      	b.n	800192a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d109      	bne.n	80018de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff fd8e 	bl	80013ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f003 0310 	and.w	r3, r3, #16
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d118      	bne.n	800191c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018f2:	f023 0302 	bic.w	r3, r3, #2
 80018f6:	f043 0202 	orr.w	r2, r3, #2
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 fb3a 	bl	8001f78 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f023 0303 	bic.w	r3, r3, #3
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	641a      	str	r2, [r3, #64]	; 0x40
 800191a:	e001      	b.n	8001920 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001928:	7bfb      	ldrb	r3, [r7, #15]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001946:	2b01      	cmp	r3, #1
 8001948:	d101      	bne.n	800194e <HAL_ADC_Start_IT+0x1a>
 800194a:	2302      	movs	r3, #2
 800194c:	e0a1      	b.n	8001a92 <HAL_ADC_Start_IT+0x15e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b01      	cmp	r3, #1
 8001962:	d018      	beq.n	8001996 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0201 	orr.w	r2, r2, #1
 8001972:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001974:	4b4a      	ldr	r3, [pc, #296]	; (8001aa0 <HAL_ADC_Start_IT+0x16c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a4a      	ldr	r2, [pc, #296]	; (8001aa4 <HAL_ADC_Start_IT+0x170>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	0c9a      	lsrs	r2, r3, #18
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001988:	e002      	b.n	8001990 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	3b01      	subs	r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f9      	bne.n	800198a <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d169      	bne.n	8001a78 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d007      	beq.n	80019d6 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019e2:	d106      	bne.n	80019f2 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e8:	f023 0206 	bic.w	r2, r3, #6
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	645a      	str	r2, [r3, #68]	; 0x44
 80019f0:	e002      	b.n	80019f8 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a00:	4b29      	ldr	r3, [pc, #164]	; (8001aa8 <HAL_ADC_Start_IT+0x174>)
 8001a02:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a0c:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a1c:	f043 0320 	orr.w	r3, r3, #32
 8001a20:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10f      	bne.n	8001a4e <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d129      	bne.n	8001a90 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	e020      	b.n	8001a90 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a16      	ldr	r2, [pc, #88]	; (8001aac <HAL_ADC_Start_IT+0x178>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d11b      	bne.n	8001a90 <HAL_ADC_Start_IT+0x15c>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d114      	bne.n	8001a90 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	e00b      	b.n	8001a90 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	f043 0210 	orr.w	r2, r3, #16
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	f043 0201 	orr.w	r2, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000010 	.word	0x20000010
 8001aa4:	431bde83 	.word	0x431bde83
 8001aa8:	40012300 	.word	0x40012300
 8001aac:	40012000 	.word	0x40012000

08001ab0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d049      	beq.n	8001b7a <HAL_ADC_IRQHandler+0xca>
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d046      	beq.n	8001b7a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d105      	bne.n	8001b04 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d12b      	bne.n	8001b6a <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d127      	bne.n	8001b6a <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d119      	bne.n	8001b6a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0220 	bic.w	r2, r2, #32
 8001b44:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d105      	bne.n	8001b6a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f043 0201 	orr.w	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff f9f2 	bl	8000f54 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f06f 0212 	mvn.w	r2, #18
 8001b78:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b88:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d057      	beq.n	8001c40 <HAL_ADC_IRQHandler+0x190>
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d054      	beq.n	8001c40 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d105      	bne.n	8001bae <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d139      	bne.n	8001c30 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d006      	beq.n	8001bd8 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d12b      	bne.n	8001c30 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d124      	bne.n	8001c30 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d11d      	bne.n	8001c30 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d119      	bne.n	8001c30 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c0a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d105      	bne.n	8001c30 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f043 0201 	orr.w	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 fa9d 	bl	8002170 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f06f 020c 	mvn.w	r2, #12
 8001c3e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d017      	beq.n	8001c86 <HAL_ADC_IRQHandler+0x1d6>
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d014      	beq.n	8001c86 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d10d      	bne.n	8001c86 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f837 	bl	8001cea <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f06f 0201 	mvn.w	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f003 0320 	and.w	r3, r3, #32
 8001c8c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c94:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d015      	beq.n	8001cc8 <HAL_ADC_IRQHandler+0x218>
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d012      	beq.n	8001cc8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f043 0202 	orr.w	r2, r3, #2
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f06f 0220 	mvn.w	r2, #32
 8001cb6:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f820 	bl	8001cfe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f06f 0220 	mvn.w	r2, #32
 8001cc6:	601a      	str	r2, [r3, #0]
  }
}
 8001cc8:	bf00      	nop
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1c>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e113      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x244>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b09      	cmp	r3, #9
 8001d3e:	d925      	bls.n	8001d8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68d9      	ldr	r1, [r3, #12]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	3b1e      	subs	r3, #30
 8001d56:	2207      	movs	r2, #7
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43da      	mvns	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	400a      	ands	r2, r1
 8001d64:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68d9      	ldr	r1, [r3, #12]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	4603      	mov	r3, r0
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4403      	add	r3, r0
 8001d7e:	3b1e      	subs	r3, #30
 8001d80:	409a      	lsls	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	e022      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6919      	ldr	r1, [r3, #16]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	2207      	movs	r2, #7
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	400a      	ands	r2, r1
 8001dae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6919      	ldr	r1, [r3, #16]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4403      	add	r3, r0
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d824      	bhi.n	8001e24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	3b05      	subs	r3, #5
 8001dec:	221f      	movs	r2, #31
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	400a      	ands	r2, r1
 8001dfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	3b05      	subs	r3, #5
 8001e16:	fa00 f203 	lsl.w	r2, r0, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	635a      	str	r2, [r3, #52]	; 0x34
 8001e22:	e04c      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b0c      	cmp	r3, #12
 8001e2a:	d824      	bhi.n	8001e76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3b23      	subs	r3, #35	; 0x23
 8001e3e:	221f      	movs	r2, #31
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43da      	mvns	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	400a      	ands	r2, r1
 8001e4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	3b23      	subs	r3, #35	; 0x23
 8001e68:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	631a      	str	r2, [r3, #48]	; 0x30
 8001e74:	e023      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	3b41      	subs	r3, #65	; 0x41
 8001e88:	221f      	movs	r2, #31
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	400a      	ands	r2, r1
 8001e96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	3b41      	subs	r3, #65	; 0x41
 8001eb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ebe:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <HAL_ADC_ConfigChannel+0x250>)
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a28      	ldr	r2, [pc, #160]	; (8001f68 <HAL_ADC_ConfigChannel+0x254>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d10f      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x1d8>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b12      	cmp	r3, #18
 8001ed2:	d10b      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1d      	ldr	r2, [pc, #116]	; (8001f68 <HAL_ADC_ConfigChannel+0x254>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d12b      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x23a>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <HAL_ADC_ConfigChannel+0x258>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d003      	beq.n	8001f08 <HAL_ADC_ConfigChannel+0x1f4>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b11      	cmp	r3, #17
 8001f06:	d122      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a11      	ldr	r2, [pc, #68]	; (8001f6c <HAL_ADC_ConfigChannel+0x258>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d111      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_ADC_ConfigChannel+0x25c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a11      	ldr	r2, [pc, #68]	; (8001f74 <HAL_ADC_ConfigChannel+0x260>)
 8001f30:	fba2 2303 	umull	r2, r3, r2, r3
 8001f34:	0c9a      	lsrs	r2, r3, #18
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f40:	e002      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f9      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	40012300 	.word	0x40012300
 8001f68:	40012000 	.word	0x40012000
 8001f6c:	10000012 	.word	0x10000012
 8001f70:	20000010 	.word	0x20000010
 8001f74:	431bde83 	.word	0x431bde83

08001f78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f80:	4b79      	ldr	r3, [pc, #484]	; (8002168 <ADC_Init+0x1f0>)
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6859      	ldr	r1, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	021a      	lsls	r2, r3, #8
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6859      	ldr	r1, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ff2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6899      	ldr	r1, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	4a58      	ldr	r2, [pc, #352]	; (800216c <ADC_Init+0x1f4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d022      	beq.n	8002056 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800201e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6899      	ldr	r1, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002040:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6899      	ldr	r1, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	e00f      	b.n	8002076 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002064:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002074:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0202 	bic.w	r2, r2, #2
 8002084:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6899      	ldr	r1, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	7e1b      	ldrb	r3, [r3, #24]
 8002090:	005a      	lsls	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d01b      	beq.n	80020dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020b2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6859      	ldr	r1, [r3, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	3b01      	subs	r3, #1
 80020d0:	035a      	lsls	r2, r3, #13
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	e007      	b.n	80020ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	3b01      	subs	r3, #1
 8002108:	051a      	lsls	r2, r3, #20
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002120:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6899      	ldr	r1, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800212e:	025a      	lsls	r2, r3, #9
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002146:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6899      	ldr	r1, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	029a      	lsls	r2, r3, #10
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	609a      	str	r2, [r3, #8]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40012300 	.word	0x40012300
 800216c:	0f000001 	.word	0x0f000001

08002170 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a0:	4013      	ands	r3, r2
 80021a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b6:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60d3      	str	r3, [r2, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <__NVIC_GetPriorityGrouping+0x18>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0307 	and.w	r3, r3, #7
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db0b      	blt.n	8002212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4907      	ldr	r1, [pc, #28]	; (8002220 <__NVIC_EnableIRQ+0x38>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	2001      	movs	r0, #1
 800220a:	fa00 f202 	lsl.w	r2, r0, r2
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000e100 	.word	0xe000e100

08002224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	2b00      	cmp	r3, #0
 8002236:	db0a      	blt.n	800224e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	490c      	ldr	r1, [pc, #48]	; (8002270 <__NVIC_SetPriority+0x4c>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	0112      	lsls	r2, r2, #4
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	440b      	add	r3, r1
 8002248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800224c:	e00a      	b.n	8002264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4908      	ldr	r1, [pc, #32]	; (8002274 <__NVIC_SetPriority+0x50>)
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	3b04      	subs	r3, #4
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	440b      	add	r3, r1
 8002262:	761a      	strb	r2, [r3, #24]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000e100 	.word	0xe000e100
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	; 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f1c3 0307 	rsb	r3, r3, #7
 8002292:	2b04      	cmp	r3, #4
 8002294:	bf28      	it	cs
 8002296:	2304      	movcs	r3, #4
 8002298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3304      	adds	r3, #4
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d902      	bls.n	80022a8 <NVIC_EncodePriority+0x30>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3b03      	subs	r3, #3
 80022a6:	e000      	b.n	80022aa <NVIC_EncodePriority+0x32>
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43da      	mvns	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	401a      	ands	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	43d9      	mvns	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	4313      	orrs	r3, r2
         );
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3724      	adds	r7, #36	; 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f0:	d301      	bcc.n	80022f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00f      	b.n	8002316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f6:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <SysTick_Config+0x40>)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fe:	210f      	movs	r1, #15
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f7ff ff8e 	bl	8002224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <SysTick_Config+0x40>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230e:	4b04      	ldr	r3, [pc, #16]	; (8002320 <SysTick_Config+0x40>)
 8002310:	2207      	movs	r2, #7
 8002312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	e000e010 	.word	0xe000e010

08002324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ff29 	bl	8002184 <__NVIC_SetPriorityGrouping>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800234c:	f7ff ff3e 	bl	80021cc <__NVIC_GetPriorityGrouping>
 8002350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	6978      	ldr	r0, [r7, #20]
 8002358:	f7ff ff8e 	bl	8002278 <NVIC_EncodePriority>
 800235c:	4602      	mov	r2, r0
 800235e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff5d 	bl	8002224 <__NVIC_SetPriority>
}
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff31 	bl	80021e8 <__NVIC_EnableIRQ>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ffa2 	bl	80022e0 <SysTick_Config>
 800239c:	4603      	mov	r3, r0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	; 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
 80023c2:	e159      	b.n	8002678 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c4:	2201      	movs	r2, #1
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	429a      	cmp	r2, r3
 80023de:	f040 8148 	bne.w	8002672 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d005      	beq.n	80023fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d130      	bne.n	800245c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	2203      	movs	r2, #3
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002430:	2201      	movs	r2, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 0201 	and.w	r2, r3, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	2b03      	cmp	r3, #3
 8002466:	d017      	beq.n	8002498 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	2203      	movs	r2, #3
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d123      	bne.n	80024ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	08da      	lsrs	r2, r3, #3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3208      	adds	r2, #8
 80024ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	220f      	movs	r2, #15
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	08da      	lsrs	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3208      	adds	r2, #8
 80024e6:	69b9      	ldr	r1, [r7, #24]
 80024e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0203 	and.w	r2, r3, #3
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80a2 	beq.w	8002672 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	4b57      	ldr	r3, [pc, #348]	; (8002690 <HAL_GPIO_Init+0x2e8>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	4a56      	ldr	r2, [pc, #344]	; (8002690 <HAL_GPIO_Init+0x2e8>)
 8002538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800253c:	6453      	str	r3, [r2, #68]	; 0x44
 800253e:	4b54      	ldr	r3, [pc, #336]	; (8002690 <HAL_GPIO_Init+0x2e8>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800254a:	4a52      	ldr	r2, [pc, #328]	; (8002694 <HAL_GPIO_Init+0x2ec>)
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	089b      	lsrs	r3, r3, #2
 8002550:	3302      	adds	r3, #2
 8002552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	220f      	movs	r2, #15
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4013      	ands	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a49      	ldr	r2, [pc, #292]	; (8002698 <HAL_GPIO_Init+0x2f0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d019      	beq.n	80025aa <HAL_GPIO_Init+0x202>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a48      	ldr	r2, [pc, #288]	; (800269c <HAL_GPIO_Init+0x2f4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d013      	beq.n	80025a6 <HAL_GPIO_Init+0x1fe>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a47      	ldr	r2, [pc, #284]	; (80026a0 <HAL_GPIO_Init+0x2f8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00d      	beq.n	80025a2 <HAL_GPIO_Init+0x1fa>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a46      	ldr	r2, [pc, #280]	; (80026a4 <HAL_GPIO_Init+0x2fc>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d007      	beq.n	800259e <HAL_GPIO_Init+0x1f6>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a45      	ldr	r2, [pc, #276]	; (80026a8 <HAL_GPIO_Init+0x300>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d101      	bne.n	800259a <HAL_GPIO_Init+0x1f2>
 8002596:	2304      	movs	r3, #4
 8002598:	e008      	b.n	80025ac <HAL_GPIO_Init+0x204>
 800259a:	2307      	movs	r3, #7
 800259c:	e006      	b.n	80025ac <HAL_GPIO_Init+0x204>
 800259e:	2303      	movs	r3, #3
 80025a0:	e004      	b.n	80025ac <HAL_GPIO_Init+0x204>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e002      	b.n	80025ac <HAL_GPIO_Init+0x204>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_GPIO_Init+0x204>
 80025aa:	2300      	movs	r3, #0
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	f002 0203 	and.w	r2, r2, #3
 80025b2:	0092      	lsls	r2, r2, #2
 80025b4:	4093      	lsls	r3, r2
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025bc:	4935      	ldr	r1, [pc, #212]	; (8002694 <HAL_GPIO_Init+0x2ec>)
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	089b      	lsrs	r3, r3, #2
 80025c2:	3302      	adds	r3, #2
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ca:	4b38      	ldr	r3, [pc, #224]	; (80026ac <HAL_GPIO_Init+0x304>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ee:	4a2f      	ldr	r2, [pc, #188]	; (80026ac <HAL_GPIO_Init+0x304>)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025f4:	4b2d      	ldr	r3, [pc, #180]	; (80026ac <HAL_GPIO_Init+0x304>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002618:	4a24      	ldr	r2, [pc, #144]	; (80026ac <HAL_GPIO_Init+0x304>)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800261e:	4b23      	ldr	r3, [pc, #140]	; (80026ac <HAL_GPIO_Init+0x304>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002642:	4a1a      	ldr	r2, [pc, #104]	; (80026ac <HAL_GPIO_Init+0x304>)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002648:	4b18      	ldr	r3, [pc, #96]	; (80026ac <HAL_GPIO_Init+0x304>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800266c:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <HAL_GPIO_Init+0x304>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3301      	adds	r3, #1
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	2b0f      	cmp	r3, #15
 800267c:	f67f aea2 	bls.w	80023c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	3724      	adds	r7, #36	; 0x24
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800
 8002694:	40013800 	.word	0x40013800
 8002698:	40020000 	.word	0x40020000
 800269c:	40020400 	.word	0x40020400
 80026a0:	40020800 	.word	0x40020800
 80026a4:	40020c00 	.word	0x40020c00
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40013c00 	.word	0x40013c00

080026b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]
 80026bc:	4613      	mov	r3, r2
 80026be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026c0:	787b      	ldrb	r3, [r7, #1]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026cc:	e003      	b.n	80026d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ce:	887b      	ldrh	r3, [r7, #2]
 80026d0:	041a      	lsls	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	619a      	str	r2, [r3, #24]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e267      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d075      	beq.n	80027ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002702:	4b88      	ldr	r3, [pc, #544]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b04      	cmp	r3, #4
 800270c:	d00c      	beq.n	8002728 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800270e:	4b85      	ldr	r3, [pc, #532]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002716:	2b08      	cmp	r3, #8
 8002718:	d112      	bne.n	8002740 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271a:	4b82      	ldr	r3, [pc, #520]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002726:	d10b      	bne.n	8002740 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	4b7e      	ldr	r3, [pc, #504]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d05b      	beq.n	80027ec <HAL_RCC_OscConfig+0x108>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d157      	bne.n	80027ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e242      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002748:	d106      	bne.n	8002758 <HAL_RCC_OscConfig+0x74>
 800274a:	4b76      	ldr	r3, [pc, #472]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a75      	ldr	r2, [pc, #468]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 8002750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e01d      	b.n	8002794 <HAL_RCC_OscConfig+0xb0>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0x98>
 8002762:	4b70      	ldr	r3, [pc, #448]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a6f      	ldr	r2, [pc, #444]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 8002768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	4b6d      	ldr	r3, [pc, #436]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a6c      	ldr	r2, [pc, #432]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 8002774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e00b      	b.n	8002794 <HAL_RCC_OscConfig+0xb0>
 800277c:	4b69      	ldr	r3, [pc, #420]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a68      	ldr	r2, [pc, #416]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 8002782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b66      	ldr	r3, [pc, #408]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a65      	ldr	r2, [pc, #404]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 800278e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d013      	beq.n	80027c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7ff f856 	bl	800184c <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a4:	f7ff f852 	bl	800184c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	; 0x64
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e207      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	4b5b      	ldr	r3, [pc, #364]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0xc0>
 80027c2:	e014      	b.n	80027ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7ff f842 	bl	800184c <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027cc:	f7ff f83e 	bl	800184c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	; 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e1f3      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027de:	4b51      	ldr	r3, [pc, #324]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0xe8>
 80027ea:	e000      	b.n	80027ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d063      	beq.n	80028c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027fa:	4b4a      	ldr	r3, [pc, #296]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00b      	beq.n	800281e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002806:	4b47      	ldr	r3, [pc, #284]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800280e:	2b08      	cmp	r3, #8
 8002810:	d11c      	bne.n	800284c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002812:	4b44      	ldr	r3, [pc, #272]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d116      	bne.n	800284c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281e:	4b41      	ldr	r3, [pc, #260]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d005      	beq.n	8002836 <HAL_RCC_OscConfig+0x152>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d001      	beq.n	8002836 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e1c7      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002836:	4b3b      	ldr	r3, [pc, #236]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4937      	ldr	r1, [pc, #220]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 8002846:	4313      	orrs	r3, r2
 8002848:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284a:	e03a      	b.n	80028c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d020      	beq.n	8002896 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002854:	4b34      	ldr	r3, [pc, #208]	; (8002928 <HAL_RCC_OscConfig+0x244>)
 8002856:	2201      	movs	r2, #1
 8002858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285a:	f7fe fff7 	bl	800184c <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002862:	f7fe fff3 	bl	800184c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e1a8      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002874:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002880:	4b28      	ldr	r3, [pc, #160]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4925      	ldr	r1, [pc, #148]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 8002890:	4313      	orrs	r3, r2
 8002892:	600b      	str	r3, [r1, #0]
 8002894:	e015      	b.n	80028c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002896:	4b24      	ldr	r3, [pc, #144]	; (8002928 <HAL_RCC_OscConfig+0x244>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe ffd6 	bl	800184c <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a4:	f7fe ffd2 	bl	800184c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e187      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b6:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d036      	beq.n	800293c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d016      	beq.n	8002904 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_RCC_OscConfig+0x248>)
 80028d8:	2201      	movs	r2, #1
 80028da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028dc:	f7fe ffb6 	bl	800184c <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e4:	f7fe ffb2 	bl	800184c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e167      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f6:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_RCC_OscConfig+0x240>)
 80028f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x200>
 8002902:	e01b      	b.n	800293c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002904:	4b09      	ldr	r3, [pc, #36]	; (800292c <HAL_RCC_OscConfig+0x248>)
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290a:	f7fe ff9f 	bl	800184c <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002910:	e00e      	b.n	8002930 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002912:	f7fe ff9b 	bl	800184c <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d907      	bls.n	8002930 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e150      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
 8002924:	40023800 	.word	0x40023800
 8002928:	42470000 	.word	0x42470000
 800292c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002930:	4b88      	ldr	r3, [pc, #544]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1ea      	bne.n	8002912 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8097 	beq.w	8002a78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294a:	2300      	movs	r3, #0
 800294c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294e:	4b81      	ldr	r3, [pc, #516]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10f      	bne.n	800297a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	4b7d      	ldr	r3, [pc, #500]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	4a7c      	ldr	r2, [pc, #496]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b7a      	ldr	r3, [pc, #488]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002976:	2301      	movs	r3, #1
 8002978:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297a:	4b77      	ldr	r3, [pc, #476]	; (8002b58 <HAL_RCC_OscConfig+0x474>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d118      	bne.n	80029b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002986:	4b74      	ldr	r3, [pc, #464]	; (8002b58 <HAL_RCC_OscConfig+0x474>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a73      	ldr	r2, [pc, #460]	; (8002b58 <HAL_RCC_OscConfig+0x474>)
 800298c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002992:	f7fe ff5b 	bl	800184c <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299a:	f7fe ff57 	bl	800184c <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e10c      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ac:	4b6a      	ldr	r3, [pc, #424]	; (8002b58 <HAL_RCC_OscConfig+0x474>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x2ea>
 80029c0:	4b64      	ldr	r3, [pc, #400]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	4a63      	ldr	r2, [pc, #396]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6713      	str	r3, [r2, #112]	; 0x70
 80029cc:	e01c      	b.n	8002a08 <HAL_RCC_OscConfig+0x324>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x30c>
 80029d6:	4b5f      	ldr	r3, [pc, #380]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	4a5e      	ldr	r2, [pc, #376]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029dc:	f043 0304 	orr.w	r3, r3, #4
 80029e0:	6713      	str	r3, [r2, #112]	; 0x70
 80029e2:	4b5c      	ldr	r3, [pc, #368]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e6:	4a5b      	ldr	r2, [pc, #364]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6713      	str	r3, [r2, #112]	; 0x70
 80029ee:	e00b      	b.n	8002a08 <HAL_RCC_OscConfig+0x324>
 80029f0:	4b58      	ldr	r3, [pc, #352]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	4a57      	ldr	r2, [pc, #348]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029f6:	f023 0301 	bic.w	r3, r3, #1
 80029fa:	6713      	str	r3, [r2, #112]	; 0x70
 80029fc:	4b55      	ldr	r3, [pc, #340]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a00:	4a54      	ldr	r2, [pc, #336]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002a02:	f023 0304 	bic.w	r3, r3, #4
 8002a06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d015      	beq.n	8002a3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a10:	f7fe ff1c 	bl	800184c <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a18:	f7fe ff18 	bl	800184c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e0cb      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2e:	4b49      	ldr	r3, [pc, #292]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0ee      	beq.n	8002a18 <HAL_RCC_OscConfig+0x334>
 8002a3a:	e014      	b.n	8002a66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3c:	f7fe ff06 	bl	800184c <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a42:	e00a      	b.n	8002a5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a44:	f7fe ff02 	bl	800184c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e0b5      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5a:	4b3e      	ldr	r3, [pc, #248]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1ee      	bne.n	8002a44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a66:	7dfb      	ldrb	r3, [r7, #23]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d105      	bne.n	8002a78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6c:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	4a38      	ldr	r2, [pc, #224]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80a1 	beq.w	8002bc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a82:	4b34      	ldr	r3, [pc, #208]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d05c      	beq.n	8002b48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d141      	bne.n	8002b1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a96:	4b31      	ldr	r3, [pc, #196]	; (8002b5c <HAL_RCC_OscConfig+0x478>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fed6 	bl	800184c <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7fe fed2 	bl	800184c <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e087      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab6:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69da      	ldr	r2, [r3, #28]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	019b      	lsls	r3, r3, #6
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	3b01      	subs	r3, #1
 8002adc:	041b      	lsls	r3, r3, #16
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	061b      	lsls	r3, r3, #24
 8002ae6:	491b      	ldr	r1, [pc, #108]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aec:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <HAL_RCC_OscConfig+0x478>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af2:	f7fe feab 	bl	800184c <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002afa:	f7fe fea7 	bl	800184c <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e05c      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x416>
 8002b18:	e054      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <HAL_RCC_OscConfig+0x478>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7fe fe94 	bl	800184c <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b28:	f7fe fe90 	bl	800184c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e045      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x444>
 8002b46:	e03d      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d107      	bne.n	8002b60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e038      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40007000 	.word	0x40007000
 8002b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <HAL_RCC_OscConfig+0x4ec>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d028      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d121      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d11a      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b90:	4013      	ands	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d111      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	085b      	lsrs	r3, r3, #1
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d107      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800

08002bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0cc      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be8:	4b68      	ldr	r3, [pc, #416]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d90c      	bls.n	8002c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b65      	ldr	r3, [pc, #404]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b63      	ldr	r3, [pc, #396]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0b8      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d020      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c28:	4b59      	ldr	r3, [pc, #356]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4a58      	ldr	r2, [pc, #352]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c40:	4b53      	ldr	r3, [pc, #332]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4a52      	ldr	r2, [pc, #328]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4c:	4b50      	ldr	r3, [pc, #320]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	494d      	ldr	r1, [pc, #308]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d044      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b47      	ldr	r3, [pc, #284]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d119      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e07f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c92:	4b3f      	ldr	r3, [pc, #252]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e06f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca2:	4b3b      	ldr	r3, [pc, #236]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e067      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb2:	4b37      	ldr	r3, [pc, #220]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f023 0203 	bic.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4934      	ldr	r1, [pc, #208]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc4:	f7fe fdc2 	bl	800184c <HAL_GetTick>
 8002cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ccc:	f7fe fdbe 	bl	800184c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e04f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce2:	4b2b      	ldr	r3, [pc, #172]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 020c 	and.w	r2, r3, #12
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d1eb      	bne.n	8002ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d20c      	bcs.n	8002d1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b22      	ldr	r3, [pc, #136]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e032      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d28:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4916      	ldr	r1, [pc, #88]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d46:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	490e      	ldr	r1, [pc, #56]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d5a:	f000 f821 	bl	8002da0 <HAL_RCC_GetSysClockFreq>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	490a      	ldr	r1, [pc, #40]	; (8002d94 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	5ccb      	ldrb	r3, [r1, r3]
 8002d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d72:	4a09      	ldr	r2, [pc, #36]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe fd22 	bl	80017c4 <HAL_InitTick>

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023c00 	.word	0x40023c00
 8002d90:	40023800 	.word	0x40023800
 8002d94:	080076ac 	.word	0x080076ac
 8002d98:	20000010 	.word	0x20000010
 8002d9c:	20000014 	.word	0x20000014

08002da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002da4:	b094      	sub	sp, #80	; 0x50
 8002da6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	647b      	str	r3, [r7, #68]	; 0x44
 8002dac:	2300      	movs	r3, #0
 8002dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002db0:	2300      	movs	r3, #0
 8002db2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002db8:	4b79      	ldr	r3, [pc, #484]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 030c 	and.w	r3, r3, #12
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d00d      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0x40>
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	f200 80e1 	bhi.w	8002f8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x34>
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d003      	beq.n	8002dda <HAL_RCC_GetSysClockFreq+0x3a>
 8002dd2:	e0db      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dd4:	4b73      	ldr	r3, [pc, #460]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dd6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002dd8:	e0db      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dda:	4b73      	ldr	r3, [pc, #460]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ddc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dde:	e0d8      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002de0:	4b6f      	ldr	r3, [pc, #444]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dea:	4b6d      	ldr	r3, [pc, #436]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d063      	beq.n	8002ebe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df6:	4b6a      	ldr	r3, [pc, #424]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	099b      	lsrs	r3, r3, #6
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e08:	633b      	str	r3, [r7, #48]	; 0x30
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e12:	4622      	mov	r2, r4
 8002e14:	462b      	mov	r3, r5
 8002e16:	f04f 0000 	mov.w	r0, #0
 8002e1a:	f04f 0100 	mov.w	r1, #0
 8002e1e:	0159      	lsls	r1, r3, #5
 8002e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e24:	0150      	lsls	r0, r2, #5
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	1a51      	subs	r1, r2, r1
 8002e2e:	6139      	str	r1, [r7, #16]
 8002e30:	4629      	mov	r1, r5
 8002e32:	eb63 0301 	sbc.w	r3, r3, r1
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e44:	4659      	mov	r1, fp
 8002e46:	018b      	lsls	r3, r1, #6
 8002e48:	4651      	mov	r1, sl
 8002e4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e4e:	4651      	mov	r1, sl
 8002e50:	018a      	lsls	r2, r1, #6
 8002e52:	4651      	mov	r1, sl
 8002e54:	ebb2 0801 	subs.w	r8, r2, r1
 8002e58:	4659      	mov	r1, fp
 8002e5a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e72:	4690      	mov	r8, r2
 8002e74:	4699      	mov	r9, r3
 8002e76:	4623      	mov	r3, r4
 8002e78:	eb18 0303 	adds.w	r3, r8, r3
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	462b      	mov	r3, r5
 8002e80:	eb49 0303 	adc.w	r3, r9, r3
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e92:	4629      	mov	r1, r5
 8002e94:	024b      	lsls	r3, r1, #9
 8002e96:	4621      	mov	r1, r4
 8002e98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e9c:	4621      	mov	r1, r4
 8002e9e:	024a      	lsls	r2, r1, #9
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002eac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002eb0:	f7fd fed2 	bl	8000c58 <__aeabi_uldivmod>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4613      	mov	r3, r2
 8002eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ebc:	e058      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ebe:	4b38      	ldr	r3, [pc, #224]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	099b      	lsrs	r3, r3, #6
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	4611      	mov	r1, r2
 8002eca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ece:	623b      	str	r3, [r7, #32]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ed8:	4642      	mov	r2, r8
 8002eda:	464b      	mov	r3, r9
 8002edc:	f04f 0000 	mov.w	r0, #0
 8002ee0:	f04f 0100 	mov.w	r1, #0
 8002ee4:	0159      	lsls	r1, r3, #5
 8002ee6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eea:	0150      	lsls	r0, r2, #5
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4641      	mov	r1, r8
 8002ef2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ef6:	4649      	mov	r1, r9
 8002ef8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f10:	ebb2 040a 	subs.w	r4, r2, sl
 8002f14:	eb63 050b 	sbc.w	r5, r3, fp
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	00eb      	lsls	r3, r5, #3
 8002f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f26:	00e2      	lsls	r2, r4, #3
 8002f28:	4614      	mov	r4, r2
 8002f2a:	461d      	mov	r5, r3
 8002f2c:	4643      	mov	r3, r8
 8002f2e:	18e3      	adds	r3, r4, r3
 8002f30:	603b      	str	r3, [r7, #0]
 8002f32:	464b      	mov	r3, r9
 8002f34:	eb45 0303 	adc.w	r3, r5, r3
 8002f38:	607b      	str	r3, [r7, #4]
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f46:	4629      	mov	r1, r5
 8002f48:	028b      	lsls	r3, r1, #10
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f50:	4621      	mov	r1, r4
 8002f52:	028a      	lsls	r2, r1, #10
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	61fa      	str	r2, [r7, #28]
 8002f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f64:	f7fd fe78 	bl	8000c58 <__aeabi_uldivmod>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f8a:	e002      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3750      	adds	r7, #80	; 0x50
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	00f42400 	.word	0x00f42400
 8002fa8:	007a1200 	.word	0x007a1200

08002fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000010 	.word	0x20000010

08002fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fc8:	f7ff fff0 	bl	8002fac <HAL_RCC_GetHCLKFreq>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	0a9b      	lsrs	r3, r3, #10
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	4903      	ldr	r1, [pc, #12]	; (8002fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fda:	5ccb      	ldrb	r3, [r1, r3]
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	080076bc 	.word	0x080076bc

08002fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ff0:	f7ff ffdc 	bl	8002fac <HAL_RCC_GetHCLKFreq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	0b5b      	lsrs	r3, r3, #13
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	4903      	ldr	r1, [pc, #12]	; (8003010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003002:	5ccb      	ldrb	r3, [r1, r3]
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003008:	4618      	mov	r0, r3
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40023800 	.word	0x40023800
 8003010:	080076bc 	.word	0x080076bc

08003014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e042      	b.n	80030ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fe fa22 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2224      	movs	r2, #36	; 0x24
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f973 	bl	8003344 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800306c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800307c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800308c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d175      	bne.n	80031c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <HAL_UART_Transmit+0x2c>
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e06e      	b.n	80031c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2221      	movs	r2, #33	; 0x21
 80030ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030f2:	f7fe fbab 	bl	800184c <HAL_GetTick>
 80030f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	88fa      	ldrh	r2, [r7, #6]
 80030fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	88fa      	ldrh	r2, [r7, #6]
 8003102:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310c:	d108      	bne.n	8003120 <HAL_UART_Transmit+0x6c>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d104      	bne.n	8003120 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	61bb      	str	r3, [r7, #24]
 800311e:	e003      	b.n	8003128 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003124:	2300      	movs	r3, #0
 8003126:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003128:	e02e      	b.n	8003188 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2200      	movs	r2, #0
 8003132:	2180      	movs	r1, #128	; 0x80
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f848 	bl	80031ca <UART_WaitOnFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e03a      	b.n	80031c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10b      	bne.n	800316a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003160:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	3302      	adds	r3, #2
 8003166:	61bb      	str	r3, [r7, #24]
 8003168:	e007      	b.n	800317a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	781a      	ldrb	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	3301      	adds	r3, #1
 8003178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1cb      	bne.n	800312a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2200      	movs	r2, #0
 800319a:	2140      	movs	r1, #64	; 0x40
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f814 	bl	80031ca <UART_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e006      	b.n	80031c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	e000      	b.n	80031c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
  }
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b086      	sub	sp, #24
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	603b      	str	r3, [r7, #0]
 80031d6:	4613      	mov	r3, r2
 80031d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031da:	e03b      	b.n	8003254 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e2:	d037      	beq.n	8003254 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e4:	f7fe fb32 	bl	800184c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	6a3a      	ldr	r2, [r7, #32]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d302      	bcc.n	80031fa <UART_WaitOnFlagUntilTimeout+0x30>
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e03a      	b.n	8003274 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d023      	beq.n	8003254 <UART_WaitOnFlagUntilTimeout+0x8a>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b80      	cmp	r3, #128	; 0x80
 8003210:	d020      	beq.n	8003254 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b40      	cmp	r3, #64	; 0x40
 8003216:	d01d      	beq.n	8003254 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b08      	cmp	r3, #8
 8003224:	d116      	bne.n	8003254 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f81d 	bl	800327c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2208      	movs	r2, #8
 8003246:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e00f      	b.n	8003274 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	4013      	ands	r3, r2
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	429a      	cmp	r2, r3
 8003262:	bf0c      	ite	eq
 8003264:	2301      	moveq	r3, #1
 8003266:	2300      	movne	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	429a      	cmp	r2, r3
 8003270:	d0b4      	beq.n	80031dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800327c:	b480      	push	{r7}
 800327e:	b095      	sub	sp, #84	; 0x54
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	330c      	adds	r3, #12
 800328a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328e:	e853 3f00 	ldrex	r3, [r3]
 8003292:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800329a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	330c      	adds	r3, #12
 80032a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032a4:	643a      	str	r2, [r7, #64]	; 0x40
 80032a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032ac:	e841 2300 	strex	r3, r2, [r1]
 80032b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1e5      	bne.n	8003284 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3314      	adds	r3, #20
 80032be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	e853 3f00 	ldrex	r3, [r3]
 80032c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f023 0301 	bic.w	r3, r3, #1
 80032ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3314      	adds	r3, #20
 80032d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e0:	e841 2300 	strex	r3, r2, [r1]
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e5      	bne.n	80032b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d119      	bne.n	8003328 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	330c      	adds	r3, #12
 80032fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	e853 3f00 	ldrex	r3, [r3]
 8003302:	60bb      	str	r3, [r7, #8]
   return(result);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f023 0310 	bic.w	r3, r3, #16
 800330a:	647b      	str	r3, [r7, #68]	; 0x44
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	330c      	adds	r3, #12
 8003312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003314:	61ba      	str	r2, [r7, #24]
 8003316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003318:	6979      	ldr	r1, [r7, #20]
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	e841 2300 	strex	r3, r2, [r1]
 8003320:	613b      	str	r3, [r7, #16]
   return(result);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1e5      	bne.n	80032f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003336:	bf00      	nop
 8003338:	3754      	adds	r7, #84	; 0x54
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003348:	b0c0      	sub	sp, #256	; 0x100
 800334a:	af00      	add	r7, sp, #0
 800334c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003360:	68d9      	ldr	r1, [r3, #12]
 8003362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	ea40 0301 	orr.w	r3, r0, r1
 800336c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800336e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	431a      	orrs	r2, r3
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	431a      	orrs	r2, r3
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800339c:	f021 010c 	bic.w	r1, r1, #12
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033aa:	430b      	orrs	r3, r1
 80033ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033be:	6999      	ldr	r1, [r3, #24]
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	ea40 0301 	orr.w	r3, r0, r1
 80033ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4b8f      	ldr	r3, [pc, #572]	; (8003610 <UART_SetConfig+0x2cc>)
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d005      	beq.n	80033e4 <UART_SetConfig+0xa0>
 80033d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	4b8d      	ldr	r3, [pc, #564]	; (8003614 <UART_SetConfig+0x2d0>)
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d104      	bne.n	80033ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033e4:	f7ff fe02 	bl	8002fec <HAL_RCC_GetPCLK2Freq>
 80033e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033ec:	e003      	b.n	80033f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033ee:	f7ff fde9 	bl	8002fc4 <HAL_RCC_GetPCLK1Freq>
 80033f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003400:	f040 810c 	bne.w	800361c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003408:	2200      	movs	r2, #0
 800340a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800340e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003412:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003416:	4622      	mov	r2, r4
 8003418:	462b      	mov	r3, r5
 800341a:	1891      	adds	r1, r2, r2
 800341c:	65b9      	str	r1, [r7, #88]	; 0x58
 800341e:	415b      	adcs	r3, r3
 8003420:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003422:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003426:	4621      	mov	r1, r4
 8003428:	eb12 0801 	adds.w	r8, r2, r1
 800342c:	4629      	mov	r1, r5
 800342e:	eb43 0901 	adc.w	r9, r3, r1
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800343e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003442:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003446:	4690      	mov	r8, r2
 8003448:	4699      	mov	r9, r3
 800344a:	4623      	mov	r3, r4
 800344c:	eb18 0303 	adds.w	r3, r8, r3
 8003450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003454:	462b      	mov	r3, r5
 8003456:	eb49 0303 	adc.w	r3, r9, r3
 800345a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800346a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800346e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003472:	460b      	mov	r3, r1
 8003474:	18db      	adds	r3, r3, r3
 8003476:	653b      	str	r3, [r7, #80]	; 0x50
 8003478:	4613      	mov	r3, r2
 800347a:	eb42 0303 	adc.w	r3, r2, r3
 800347e:	657b      	str	r3, [r7, #84]	; 0x54
 8003480:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003484:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003488:	f7fd fbe6 	bl	8000c58 <__aeabi_uldivmod>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4b61      	ldr	r3, [pc, #388]	; (8003618 <UART_SetConfig+0x2d4>)
 8003492:	fba3 2302 	umull	r2, r3, r3, r2
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	011c      	lsls	r4, r3, #4
 800349a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800349e:	2200      	movs	r2, #0
 80034a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034ac:	4642      	mov	r2, r8
 80034ae:	464b      	mov	r3, r9
 80034b0:	1891      	adds	r1, r2, r2
 80034b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80034b4:	415b      	adcs	r3, r3
 80034b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034bc:	4641      	mov	r1, r8
 80034be:	eb12 0a01 	adds.w	sl, r2, r1
 80034c2:	4649      	mov	r1, r9
 80034c4:	eb43 0b01 	adc.w	fp, r3, r1
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034dc:	4692      	mov	sl, r2
 80034de:	469b      	mov	fp, r3
 80034e0:	4643      	mov	r3, r8
 80034e2:	eb1a 0303 	adds.w	r3, sl, r3
 80034e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034ea:	464b      	mov	r3, r9
 80034ec:	eb4b 0303 	adc.w	r3, fp, r3
 80034f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003500:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003504:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003508:	460b      	mov	r3, r1
 800350a:	18db      	adds	r3, r3, r3
 800350c:	643b      	str	r3, [r7, #64]	; 0x40
 800350e:	4613      	mov	r3, r2
 8003510:	eb42 0303 	adc.w	r3, r2, r3
 8003514:	647b      	str	r3, [r7, #68]	; 0x44
 8003516:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800351a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800351e:	f7fd fb9b 	bl	8000c58 <__aeabi_uldivmod>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4611      	mov	r1, r2
 8003528:	4b3b      	ldr	r3, [pc, #236]	; (8003618 <UART_SetConfig+0x2d4>)
 800352a:	fba3 2301 	umull	r2, r3, r3, r1
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	2264      	movs	r2, #100	; 0x64
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	1acb      	subs	r3, r1, r3
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800353e:	4b36      	ldr	r3, [pc, #216]	; (8003618 <UART_SetConfig+0x2d4>)
 8003540:	fba3 2302 	umull	r2, r3, r3, r2
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800354c:	441c      	add	r4, r3
 800354e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003552:	2200      	movs	r2, #0
 8003554:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003558:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800355c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003560:	4642      	mov	r2, r8
 8003562:	464b      	mov	r3, r9
 8003564:	1891      	adds	r1, r2, r2
 8003566:	63b9      	str	r1, [r7, #56]	; 0x38
 8003568:	415b      	adcs	r3, r3
 800356a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800356c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003570:	4641      	mov	r1, r8
 8003572:	1851      	adds	r1, r2, r1
 8003574:	6339      	str	r1, [r7, #48]	; 0x30
 8003576:	4649      	mov	r1, r9
 8003578:	414b      	adcs	r3, r1
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003588:	4659      	mov	r1, fp
 800358a:	00cb      	lsls	r3, r1, #3
 800358c:	4651      	mov	r1, sl
 800358e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003592:	4651      	mov	r1, sl
 8003594:	00ca      	lsls	r2, r1, #3
 8003596:	4610      	mov	r0, r2
 8003598:	4619      	mov	r1, r3
 800359a:	4603      	mov	r3, r0
 800359c:	4642      	mov	r2, r8
 800359e:	189b      	adds	r3, r3, r2
 80035a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035a4:	464b      	mov	r3, r9
 80035a6:	460a      	mov	r2, r1
 80035a8:	eb42 0303 	adc.w	r3, r2, r3
 80035ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035c4:	460b      	mov	r3, r1
 80035c6:	18db      	adds	r3, r3, r3
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ca:	4613      	mov	r3, r2
 80035cc:	eb42 0303 	adc.w	r3, r2, r3
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035da:	f7fd fb3d 	bl	8000c58 <__aeabi_uldivmod>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <UART_SetConfig+0x2d4>)
 80035e4:	fba3 1302 	umull	r1, r3, r3, r2
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	2164      	movs	r1, #100	; 0x64
 80035ec:	fb01 f303 	mul.w	r3, r1, r3
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	3332      	adds	r3, #50	; 0x32
 80035f6:	4a08      	ldr	r2, [pc, #32]	; (8003618 <UART_SetConfig+0x2d4>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	095b      	lsrs	r3, r3, #5
 80035fe:	f003 0207 	and.w	r2, r3, #7
 8003602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4422      	add	r2, r4
 800360a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800360c:	e106      	b.n	800381c <UART_SetConfig+0x4d8>
 800360e:	bf00      	nop
 8003610:	40011000 	.word	0x40011000
 8003614:	40011400 	.word	0x40011400
 8003618:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800361c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003620:	2200      	movs	r2, #0
 8003622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003626:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800362a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800362e:	4642      	mov	r2, r8
 8003630:	464b      	mov	r3, r9
 8003632:	1891      	adds	r1, r2, r2
 8003634:	6239      	str	r1, [r7, #32]
 8003636:	415b      	adcs	r3, r3
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
 800363a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800363e:	4641      	mov	r1, r8
 8003640:	1854      	adds	r4, r2, r1
 8003642:	4649      	mov	r1, r9
 8003644:	eb43 0501 	adc.w	r5, r3, r1
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	00eb      	lsls	r3, r5, #3
 8003652:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003656:	00e2      	lsls	r2, r4, #3
 8003658:	4614      	mov	r4, r2
 800365a:	461d      	mov	r5, r3
 800365c:	4643      	mov	r3, r8
 800365e:	18e3      	adds	r3, r4, r3
 8003660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003664:	464b      	mov	r3, r9
 8003666:	eb45 0303 	adc.w	r3, r5, r3
 800366a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800367a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800368a:	4629      	mov	r1, r5
 800368c:	008b      	lsls	r3, r1, #2
 800368e:	4621      	mov	r1, r4
 8003690:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003694:	4621      	mov	r1, r4
 8003696:	008a      	lsls	r2, r1, #2
 8003698:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800369c:	f7fd fadc 	bl	8000c58 <__aeabi_uldivmod>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4b60      	ldr	r3, [pc, #384]	; (8003828 <UART_SetConfig+0x4e4>)
 80036a6:	fba3 2302 	umull	r2, r3, r3, r2
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	011c      	lsls	r4, r3, #4
 80036ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036b2:	2200      	movs	r2, #0
 80036b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036c0:	4642      	mov	r2, r8
 80036c2:	464b      	mov	r3, r9
 80036c4:	1891      	adds	r1, r2, r2
 80036c6:	61b9      	str	r1, [r7, #24]
 80036c8:	415b      	adcs	r3, r3
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036d0:	4641      	mov	r1, r8
 80036d2:	1851      	adds	r1, r2, r1
 80036d4:	6139      	str	r1, [r7, #16]
 80036d6:	4649      	mov	r1, r9
 80036d8:	414b      	adcs	r3, r1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036e8:	4659      	mov	r1, fp
 80036ea:	00cb      	lsls	r3, r1, #3
 80036ec:	4651      	mov	r1, sl
 80036ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036f2:	4651      	mov	r1, sl
 80036f4:	00ca      	lsls	r2, r1, #3
 80036f6:	4610      	mov	r0, r2
 80036f8:	4619      	mov	r1, r3
 80036fa:	4603      	mov	r3, r0
 80036fc:	4642      	mov	r2, r8
 80036fe:	189b      	adds	r3, r3, r2
 8003700:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003704:	464b      	mov	r3, r9
 8003706:	460a      	mov	r2, r1
 8003708:	eb42 0303 	adc.w	r3, r2, r3
 800370c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	67bb      	str	r3, [r7, #120]	; 0x78
 800371a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003728:	4649      	mov	r1, r9
 800372a:	008b      	lsls	r3, r1, #2
 800372c:	4641      	mov	r1, r8
 800372e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003732:	4641      	mov	r1, r8
 8003734:	008a      	lsls	r2, r1, #2
 8003736:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800373a:	f7fd fa8d 	bl	8000c58 <__aeabi_uldivmod>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4611      	mov	r1, r2
 8003744:	4b38      	ldr	r3, [pc, #224]	; (8003828 <UART_SetConfig+0x4e4>)
 8003746:	fba3 2301 	umull	r2, r3, r3, r1
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	2264      	movs	r2, #100	; 0x64
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	1acb      	subs	r3, r1, r3
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	3332      	adds	r3, #50	; 0x32
 8003758:	4a33      	ldr	r2, [pc, #204]	; (8003828 <UART_SetConfig+0x4e4>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003764:	441c      	add	r4, r3
 8003766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800376a:	2200      	movs	r2, #0
 800376c:	673b      	str	r3, [r7, #112]	; 0x70
 800376e:	677a      	str	r2, [r7, #116]	; 0x74
 8003770:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003774:	4642      	mov	r2, r8
 8003776:	464b      	mov	r3, r9
 8003778:	1891      	adds	r1, r2, r2
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	415b      	adcs	r3, r3
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003784:	4641      	mov	r1, r8
 8003786:	1851      	adds	r1, r2, r1
 8003788:	6039      	str	r1, [r7, #0]
 800378a:	4649      	mov	r1, r9
 800378c:	414b      	adcs	r3, r1
 800378e:	607b      	str	r3, [r7, #4]
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800379c:	4659      	mov	r1, fp
 800379e:	00cb      	lsls	r3, r1, #3
 80037a0:	4651      	mov	r1, sl
 80037a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037a6:	4651      	mov	r1, sl
 80037a8:	00ca      	lsls	r2, r1, #3
 80037aa:	4610      	mov	r0, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	4642      	mov	r2, r8
 80037b2:	189b      	adds	r3, r3, r2
 80037b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80037b6:	464b      	mov	r3, r9
 80037b8:	460a      	mov	r2, r1
 80037ba:	eb42 0303 	adc.w	r3, r2, r3
 80037be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	663b      	str	r3, [r7, #96]	; 0x60
 80037ca:	667a      	str	r2, [r7, #100]	; 0x64
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037d8:	4649      	mov	r1, r9
 80037da:	008b      	lsls	r3, r1, #2
 80037dc:	4641      	mov	r1, r8
 80037de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037e2:	4641      	mov	r1, r8
 80037e4:	008a      	lsls	r2, r1, #2
 80037e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037ea:	f7fd fa35 	bl	8000c58 <__aeabi_uldivmod>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <UART_SetConfig+0x4e4>)
 80037f4:	fba3 1302 	umull	r1, r3, r3, r2
 80037f8:	095b      	lsrs	r3, r3, #5
 80037fa:	2164      	movs	r1, #100	; 0x64
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	3332      	adds	r3, #50	; 0x32
 8003806:	4a08      	ldr	r2, [pc, #32]	; (8003828 <UART_SetConfig+0x4e4>)
 8003808:	fba2 2303 	umull	r2, r3, r2, r3
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	f003 020f 	and.w	r2, r3, #15
 8003812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4422      	add	r2, r4
 800381a:	609a      	str	r2, [r3, #8]
}
 800381c:	bf00      	nop
 800381e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003822:	46bd      	mov	sp, r7
 8003824:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003828:	51eb851f 	.word	0x51eb851f

0800382c <funchclassifier77.constprop.0>:
 800382c:	4288      	cmp	r0, r1
 800382e:	d300      	bcc.n	8003832 <funchclassifier77.constprop.0+0x6>
 8003830:	4770      	bx	lr
 8003832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003836:	1847      	adds	r7, r0, r1
 8003838:	ea4f 0867 	mov.w	r8, r7, asr #1
 800383c:	087f      	lsrs	r7, r7, #1
 800383e:	1c7c      	adds	r4, r7, #1
 8003840:	460d      	mov	r5, r1
 8003842:	b2a4      	uxth	r4, r4
 8003844:	4639      	mov	r1, r7
 8003846:	4606      	mov	r6, r0
 8003848:	f7ff fff0 	bl	800382c <funchclassifier77.constprop.0>
 800384c:	4629      	mov	r1, r5
 800384e:	4620      	mov	r0, r4
 8003850:	f7ff ffec 	bl	800382c <funchclassifier77.constprop.0>
 8003854:	493f      	ldr	r1, [pc, #252]	; (8003954 <funchclassifier77.constprop.0+0x128>)
 8003856:	eb01 0388 	add.w	r3, r1, r8, lsl #2
 800385a:	ed93 7a00 	vldr	s14, [r3]
 800385e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003862:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386a:	dc01      	bgt.n	8003870 <funchclassifier77.constprop.0+0x44>
 800386c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003870:	42be      	cmp	r6, r7
 8003872:	d867      	bhi.n	8003944 <funchclassifier77.constprop.0+0x118>
 8003874:	42a5      	cmp	r5, r4
 8003876:	d369      	bcc.n	800394c <funchclassifier77.constprop.0+0x120>
 8003878:	4837      	ldr	r0, [pc, #220]	; (8003958 <funchclassifier77.constprop.0+0x12c>)
 800387a:	4632      	mov	r2, r6
 800387c:	2300      	movs	r3, #0
 800387e:	e001      	b.n	8003884 <funchclassifier77.constprop.0+0x58>
 8003880:	42a5      	cmp	r5, r4
 8003882:	d337      	bcc.n	80038f4 <funchclassifier77.constprop.0+0xc8>
 8003884:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 8003888:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800388c:	edde 7a00 	vldr	s15, [lr]
 8003890:	ed9c 7a00 	vldr	s14, [ip]
 8003894:	f103 0e01 	add.w	lr, r3, #1
 8003898:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800389c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a0:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 80038a4:	fa1f f38e 	uxth.w	r3, lr
 80038a8:	f102 0e01 	add.w	lr, r2, #1
 80038ac:	bf53      	iteet	pl
 80038ae:	3401      	addpl	r4, #1
 80038b0:	fa1f f28e 	uxthmi.w	r2, lr
 80038b4:	eef0 7a47 	vmovmi.f32	s15, s14
 80038b8:	b2a4      	uxthpl	r4, r4
 80038ba:	4297      	cmp	r7, r2
 80038bc:	edcc 7a00 	vstr	s15, [ip]
 80038c0:	d2de      	bcs.n	8003880 <funchclassifier77.constprop.0+0x54>
 80038c2:	42a5      	cmp	r5, r4
 80038c4:	d32e      	bcc.n	8003924 <funchclassifier77.constprop.0+0xf8>
 80038c6:	eba4 0803 	sub.w	r8, r4, r3
 80038ca:	fa1f f888 	uxth.w	r8, r8
 80038ce:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80038d2:	469c      	mov	ip, r3
 80038d4:	f103 0e01 	add.w	lr, r3, #1
 80038d8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80038dc:	fa1f f38e 	uxth.w	r3, lr
 80038e0:	f854 eb04 	ldr.w	lr, [r4], #4
 80038e4:	f8cc e000 	str.w	lr, [ip]
 80038e8:	eb03 0c08 	add.w	ip, r3, r8
 80038ec:	fa1f fc8c 	uxth.w	ip, ip
 80038f0:	4565      	cmp	r5, ip
 80038f2:	d2ee      	bcs.n	80038d2 <funchclassifier77.constprop.0+0xa6>
 80038f4:	4297      	cmp	r7, r2
 80038f6:	d315      	bcc.n	8003924 <funchclassifier77.constprop.0+0xf8>
 80038f8:	eba2 0e03 	sub.w	lr, r2, r3
 80038fc:	fa1f fe8e 	uxth.w	lr, lr
 8003900:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003904:	461c      	mov	r4, r3
 8003906:	f103 0c01 	add.w	ip, r3, #1
 800390a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800390e:	fa1f f38c 	uxth.w	r3, ip
 8003912:	f852 cb04 	ldr.w	ip, [r2], #4
 8003916:	f8c4 c000 	str.w	ip, [r4]
 800391a:	eb03 040e 	add.w	r4, r3, lr
 800391e:	b2a4      	uxth	r4, r4
 8003920:	42a7      	cmp	r7, r4
 8003922:	d2ef      	bcs.n	8003904 <funchclassifier77.constprop.0+0xd8>
 8003924:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8003928:	2300      	movs	r3, #0
 800392a:	b29a      	uxth	r2, r3
 800392c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003930:	3301      	adds	r3, #1
 8003932:	6814      	ldr	r4, [r2, #0]
 8003934:	f841 4b04 	str.w	r4, [r1], #4
 8003938:	18f2      	adds	r2, r6, r3
 800393a:	b292      	uxth	r2, r2
 800393c:	4295      	cmp	r5, r2
 800393e:	d2f4      	bcs.n	800392a <funchclassifier77.constprop.0+0xfe>
 8003940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003944:	4804      	ldr	r0, [pc, #16]	; (8003958 <funchclassifier77.constprop.0+0x12c>)
 8003946:	4632      	mov	r2, r6
 8003948:	2300      	movs	r3, #0
 800394a:	e7ba      	b.n	80038c2 <funchclassifier77.constprop.0+0x96>
 800394c:	4802      	ldr	r0, [pc, #8]	; (8003958 <funchclassifier77.constprop.0+0x12c>)
 800394e:	4632      	mov	r2, r6
 8003950:	2300      	movs	r3, #0
 8003952:	e7d1      	b.n	80038f8 <funchclassifier77.constprop.0+0xcc>
 8003954:	20000abc 	.word	0x20000abc
 8003958:	200006bc 	.word	0x200006bc

0800395c <neai_classification_init>:
 800395c:	ed90 7a27 	vldr	s14, [r0, #156]	; 0x9c
 8003960:	4a4c      	ldr	r2, [pc, #304]	; (8003a94 <neai_classification_init+0x138>)
 8003962:	494d      	ldr	r1, [pc, #308]	; (8003a98 <neai_classification_init+0x13c>)
 8003964:	4b4d      	ldr	r3, [pc, #308]	; (8003a9c <neai_classification_init+0x140>)
 8003966:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800396a:	b410      	push	{r4}
 800396c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003970:	240c      	movs	r4, #12
 8003972:	6014      	str	r4, [r2, #0]
 8003974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003978:	f100 0290 	add.w	r2, r0, #144	; 0x90
 800397c:	6008      	str	r0, [r1, #0]
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	f040 8081 	bne.w	8003a86 <neai_classification_init+0x12a>
 8003984:	ed90 7a28 	vldr	s14, [r0, #160]	; 0xa0
 8003988:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800398c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003994:	d177      	bne.n	8003a86 <neai_classification_init+0x12a>
 8003996:	eddf 7a42 	vldr	s15, [pc, #264]	; 8003aa0 <neai_classification_init+0x144>
 800399a:	ed90 7a29 	vldr	s14, [r0, #164]	; 0xa4
 800399e:	eeb4 7a67 	vcmp.f32	s14, s15
 80039a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a6:	d16e      	bne.n	8003a86 <neai_classification_init+0x12a>
 80039a8:	edd0 7a2a 	vldr	s15, [r0, #168]	; 0xa8
 80039ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b4:	d167      	bne.n	8003a86 <neai_classification_init+0x12a>
 80039b6:	edd0 7a2b 	vldr	s15, [r0, #172]	; 0xac
 80039ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c2:	d160      	bne.n	8003a86 <neai_classification_init+0x12a>
 80039c4:	edd0 7a2c 	vldr	s15, [r0, #176]	; 0xb0
 80039c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d0:	d159      	bne.n	8003a86 <neai_classification_init+0x12a>
 80039d2:	edd0 7a2d 	vldr	s15, [r0, #180]	; 0xb4
 80039d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039de:	d152      	bne.n	8003a86 <neai_classification_init+0x12a>
 80039e0:	edd0 7a2e 	vldr	s15, [r0, #184]	; 0xb8
 80039e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ec:	d14b      	bne.n	8003a86 <neai_classification_init+0x12a>
 80039ee:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8003aa4 <neai_classification_init+0x148>
 80039f2:	ed90 7a2f 	vldr	s14, [r0, #188]	; 0xbc
 80039f6:	eeb4 7a67 	vcmp.f32	s14, s15
 80039fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fe:	d142      	bne.n	8003a86 <neai_classification_init+0x12a>
 8003a00:	ed90 7a30 	vldr	s14, [r0, #192]	; 0xc0
 8003a04:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8003a08:	eeb4 7a67 	vcmp.f32	s14, s15
 8003a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a10:	d139      	bne.n	8003a86 <neai_classification_init+0x12a>
 8003a12:	edd0 7a31 	vldr	s15, [r0, #196]	; 0xc4
 8003a16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1e:	d132      	bne.n	8003a86 <neai_classification_init+0x12a>
 8003a20:	ed90 7a32 	vldr	s14, [r0, #200]	; 0xc8
 8003a24:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8003a28:	eeb4 7a67 	vcmp.f32	s14, s15
 8003a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a30:	d129      	bne.n	8003a86 <neai_classification_init+0x12a>
 8003a32:	ed90 7a33 	vldr	s14, [r0, #204]	; 0xcc
 8003a36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003a3a:	eeb4 7a67 	vcmp.f32	s14, s15
 8003a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a42:	d120      	bne.n	8003a86 <neai_classification_init+0x12a>
 8003a44:	edd0 7a34 	vldr	s15, [r0, #208]	; 0xd0
 8003a48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a50:	d119      	bne.n	8003a86 <neai_classification_init+0x12a>
 8003a52:	edd0 7a35 	vldr	s15, [r0, #212]	; 0xd4
 8003a56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5e:	d112      	bne.n	8003a86 <neai_classification_init+0x12a>
 8003a60:	edd0 7a36 	vldr	s15, [r0, #216]	; 0xd8
 8003a64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6c:	d10b      	bne.n	8003a86 <neai_classification_init+0x12a>
 8003a6e:	ed90 7a37 	vldr	s14, [r0, #220]	; 0xdc
 8003a72:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8003aa8 <neai_classification_init+0x14c>
 8003a76:	eeb4 7a67 	vcmp.f32	s14, s15
 8003a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7e:	bf14      	ite	ne
 8003a80:	207d      	movne	r0, #125	; 0x7d
 8003a82:	2000      	moveq	r0, #0
 8003a84:	e000      	b.n	8003a88 <neai_classification_init+0x12c>
 8003a86:	207d      	movs	r0, #125	; 0x7d
 8003a88:	4b08      	ldr	r3, [pc, #32]	; (8003aac <neai_classification_init+0x150>)
 8003a8a:	7018      	strb	r0, [r3, #0]
 8003a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	200006b8 	.word	0x200006b8
 8003a98:	200006b4 	.word	0x200006b4
 8003a9c:	200006b0 	.word	0x200006b0
 8003aa0:	43800000 	.word	0x43800000
 8003aa4:	42340000 	.word	0x42340000
 8003aa8:	49742400 	.word	0x49742400
 8003aac:	20000019 	.word	0x20000019

08003ab0 <neai_classification>:
 8003ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab4:	ed2d 8b06 	vpush	{d8-d10}
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <neai_classification+0x20>)
 8003aba:	b087      	sub	sp, #28
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	9303      	str	r3, [sp, #12]
 8003ac0:	9205      	str	r2, [sp, #20]
 8003ac2:	b13b      	cbz	r3, 8003ad4 <neai_classification+0x24>
 8003ac4:	9803      	ldr	r0, [sp, #12]
 8003ac6:	b007      	add	sp, #28
 8003ac8:	ecbd 8b06 	vpop	{d8-d10}
 8003acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ad0:	20000019 	.word	0x20000019
 8003ad4:	edd0 7a00 	vldr	s15, [r0]
 8003ad8:	4605      	mov	r5, r0
 8003ada:	468b      	mov	fp, r1
 8003adc:	4606      	mov	r6, r0
 8003ade:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	ecb3 7a01 	vldmia	r3!, {s14}
 8003ae8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af0:	bfd8      	it	le
 8003af2:	eef0 7a47 	vmovle.f32	s15, s14
 8003af6:	429c      	cmp	r4, r3
 8003af8:	d1f4      	bne.n	8003ae4 <neai_classification+0x34>
 8003afa:	4be0      	ldr	r3, [pc, #896]	; (8003e7c <neai_classification+0x3cc>)
 8003afc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8003b00:	edd5 7a00 	vldr	s15, [r5]
 8003b04:	462b      	mov	r3, r5
 8003b06:	ecb3 7a01 	vldmia	r3!, {s14}
 8003b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b12:	bf58      	it	pl
 8003b14:	eef0 7a47 	vmovpl.f32	s15, s14
 8003b18:	429c      	cmp	r4, r3
 8003b1a:	d1f4      	bne.n	8003b06 <neai_classification+0x56>
 8003b1c:	4bd7      	ldr	r3, [pc, #860]	; (8003e7c <neai_classification+0x3cc>)
 8003b1e:	edc3 7a02 	vstr	s15, [r3, #8]
 8003b22:	ed95 7a00 	vldr	s14, [r5]
 8003b26:	462b      	mov	r3, r5
 8003b28:	eef0 7a47 	vmov.f32	s15, s14
 8003b2c:	ecf3 6a01 	vldmia	r3!, {s13}
 8003b30:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b38:	bf58      	it	pl
 8003b3a:	eef0 7a66 	vmovpl.f32	s15, s13
 8003b3e:	429c      	cmp	r4, r3
 8003b40:	d1f4      	bne.n	8003b2c <neai_classification+0x7c>
 8003b42:	462b      	mov	r3, r5
 8003b44:	ecf3 6a01 	vldmia	r3!, {s13}
 8003b48:	eef4 6ac7 	vcmpe.f32	s13, s14
 8003b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b50:	bfd8      	it	le
 8003b52:	eeb0 7a66 	vmovle.f32	s14, s13
 8003b56:	429c      	cmp	r4, r3
 8003b58:	d1f4      	bne.n	8003b44 <neai_classification+0x94>
 8003b5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b5e:	4bc7      	ldr	r3, [pc, #796]	; (8003e7c <neai_classification+0x3cc>)
 8003b60:	edc3 7a07 	vstr	s15, [r3, #28]
 8003b64:	ed95 7a00 	vldr	s14, [r5]
 8003b68:	462b      	mov	r3, r5
 8003b6a:	eef0 7a47 	vmov.f32	s15, s14
 8003b6e:	ecf3 6a01 	vldmia	r3!, {s13}
 8003b72:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b7a:	bfd8      	it	le
 8003b7c:	eef0 7a66 	vmovle.f32	s15, s13
 8003b80:	429c      	cmp	r4, r3
 8003b82:	d1f4      	bne.n	8003b6e <neai_classification+0xbe>
 8003b84:	eef0 7ae7 	vabs.f32	s15, s15
 8003b88:	462b      	mov	r3, r5
 8003b8a:	ecf3 6a01 	vldmia	r3!, {s13}
 8003b8e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8003b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b96:	bf58      	it	pl
 8003b98:	eeb0 7a66 	vmovpl.f32	s14, s13
 8003b9c:	429c      	cmp	r4, r3
 8003b9e:	d1f4      	bne.n	8003b8a <neai_classification+0xda>
 8003ba0:	eeb0 7ac7 	vabs.f32	s14, s14
 8003ba4:	eef4 7a47 	vcmp.f32	s15, s14
 8003ba8:	4bb4      	ldr	r3, [pc, #720]	; (8003e7c <neai_classification+0x3cc>)
 8003baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bae:	bf48      	it	mi
 8003bb0:	eef0 7a47 	vmovmi.f32	s15, s14
 8003bb4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8003bb8:	462f      	mov	r7, r5
 8003bba:	ecf7 8a01 	vldmia	r7!, {s17}
 8003bbe:	eef0 7a68 	vmov.f32	s15, s17
 8003bc2:	463b      	mov	r3, r7
 8003bc4:	ecb3 7a01 	vldmia	r3!, {s14}
 8003bc8:	429c      	cmp	r4, r3
 8003bca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bce:	d1f9      	bne.n	8003bc4 <neai_classification+0x114>
 8003bd0:	eddf 6aab 	vldr	s13, [pc, #684]	; 8003e80 <neai_classification+0x3d0>
 8003bd4:	ee27 8aa6 	vmul.f32	s16, s15, s13
 8003bd8:	eeb0 7a68 	vmov.f32	s14, s17
 8003bdc:	463b      	mov	r3, r7
 8003bde:	ecf3 7a01 	vldmia	r3!, {s15}
 8003be2:	429c      	cmp	r4, r3
 8003be4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003be8:	d1f9      	bne.n	8003bde <neai_classification+0x12e>
 8003bea:	eddf 7aa5 	vldr	s15, [pc, #660]	; 8003e80 <neai_classification+0x3d0>
 8003bee:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003bf2:	463b      	mov	r3, r7
 8003bf4:	ee38 7ae6 	vsub.f32	s14, s17, s13
 8003bf8:	ee27 7a07 	vmul.f32	s14, s14, s14
 8003bfc:	ecf3 7a01 	vldmia	r3!, {s15}
 8003c00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003c04:	429c      	cmp	r4, r3
 8003c06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c0e:	d1f5      	bne.n	8003bfc <neai_classification+0x14c>
 8003c10:	eddf 7a9b 	vldr	s15, [pc, #620]	; 8003e80 <neai_classification+0x3d0>
 8003c14:	ee27 0a27 	vmul.f32	s0, s14, s15
 8003c18:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c20:	f100 83ad 	bmi.w	800437e <neai_classification+0x8ce>
 8003c24:	eeb1 7ac0 	vsqrt.f32	s14, s0
 8003c28:	463b      	mov	r3, r7
 8003c2a:	ee78 8ac8 	vsub.f32	s17, s17, s16
 8003c2e:	ee68 6aa8 	vmul.f32	s13, s17, s17
 8003c32:	ee66 6aa8 	vmul.f32	s13, s13, s17
 8003c36:	ecf3 7a01 	vldmia	r3!, {s15}
 8003c3a:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8003c3e:	429c      	cmp	r4, r3
 8003c40:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8003c44:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003c48:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003c4c:	d1f3      	bne.n	8003c36 <neai_classification+0x186>
 8003c4e:	ee67 7a07 	vmul.f32	s15, s14, s14
 8003c52:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 8003e80 <neai_classification+0x3d0>
 8003c56:	4b89      	ldr	r3, [pc, #548]	; (8003e7c <neai_classification+0x3cc>)
 8003c58:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c60:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003c64:	edc3 7a08 	vstr	s15, [r3, #32]
 8003c68:	edd5 8a00 	vldr	s17, [r5]
 8003c6c:	463b      	mov	r3, r7
 8003c6e:	eef0 7a68 	vmov.f32	s15, s17
 8003c72:	ecb3 7a01 	vldmia	r3!, {s14}
 8003c76:	429c      	cmp	r4, r3
 8003c78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c7c:	d1f9      	bne.n	8003c72 <neai_classification+0x1c2>
 8003c7e:	eddf 6a80 	vldr	s13, [pc, #512]	; 8003e80 <neai_classification+0x3d0>
 8003c82:	ee27 8aa6 	vmul.f32	s16, s15, s13
 8003c86:	eeb0 7a68 	vmov.f32	s14, s17
 8003c8a:	463b      	mov	r3, r7
 8003c8c:	ecf3 7a01 	vldmia	r3!, {s15}
 8003c90:	429c      	cmp	r4, r3
 8003c92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c96:	d1f9      	bne.n	8003c8c <neai_classification+0x1dc>
 8003c98:	eddf 7a79 	vldr	s15, [pc, #484]	; 8003e80 <neai_classification+0x3d0>
 8003c9c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003ca0:	463b      	mov	r3, r7
 8003ca2:	ee38 7ae6 	vsub.f32	s14, s17, s13
 8003ca6:	ee27 7a07 	vmul.f32	s14, s14, s14
 8003caa:	ecf3 7a01 	vldmia	r3!, {s15}
 8003cae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003cb2:	429c      	cmp	r4, r3
 8003cb4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003cb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cbc:	d1f5      	bne.n	8003caa <neai_classification+0x1fa>
 8003cbe:	eddf 7a70 	vldr	s15, [pc, #448]	; 8003e80 <neai_classification+0x3d0>
 8003cc2:	ee27 0a27 	vmul.f32	s0, s14, s15
 8003cc6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cce:	f100 8376 	bmi.w	80043be <neai_classification+0x90e>
 8003cd2:	eeb1 7ac0 	vsqrt.f32	s14, s0
 8003cd6:	463b      	mov	r3, r7
 8003cd8:	ee78 8ac8 	vsub.f32	s17, s17, s16
 8003cdc:	ee68 6aa8 	vmul.f32	s13, s17, s17
 8003ce0:	ee66 6aa8 	vmul.f32	s13, s13, s17
 8003ce4:	ee66 6aa8 	vmul.f32	s13, s13, s17
 8003ce8:	ecf3 7a01 	vldmia	r3!, {s15}
 8003cec:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8003cf0:	42a3      	cmp	r3, r4
 8003cf2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8003cf6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003cfa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003cfe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003d02:	d1f1      	bne.n	8003ce8 <neai_classification+0x238>
 8003d04:	ee67 7a07 	vmul.f32	s15, s14, s14
 8003d08:	eddf 5a5d 	vldr	s11, [pc, #372]	; 8003e80 <neai_classification+0x3d0>
 8003d0c:	4b5b      	ldr	r3, [pc, #364]	; (8003e7c <neai_classification+0x3cc>)
 8003d0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d12:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8003d16:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d1e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003d22:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8003d26:	edc3 7a00 	vstr	s15, [r3]
 8003d2a:	ed95 7a00 	vldr	s14, [r5]
 8003d2e:	463b      	mov	r3, r7
 8003d30:	eef0 6ac7 	vabs.f32	s13, s14
 8003d34:	ecf3 7a01 	vldmia	r3!, {s15}
 8003d38:	eef0 7ae7 	vabs.f32	s15, s15
 8003d3c:	429c      	cmp	r4, r3
 8003d3e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003d42:	d1f7      	bne.n	8003d34 <neai_classification+0x284>
 8003d44:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8003e80 <neai_classification+0x3d0>
 8003d48:	ee26 6a86 	vmul.f32	s12, s13, s12
 8003d4c:	eef0 7a47 	vmov.f32	s15, s14
 8003d50:	462b      	mov	r3, r5
 8003d52:	ecf3 6a01 	vldmia	r3!, {s13}
 8003d56:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5e:	bfd8      	it	le
 8003d60:	eef0 7a66 	vmovle.f32	s15, s13
 8003d64:	429c      	cmp	r4, r3
 8003d66:	d1f4      	bne.n	8003d52 <neai_classification+0x2a2>
 8003d68:	eef0 7ae7 	vabs.f32	s15, s15
 8003d6c:	462b      	mov	r3, r5
 8003d6e:	ecf3 6a01 	vldmia	r3!, {s13}
 8003d72:	eef4 6ac7 	vcmpe.f32	s13, s14
 8003d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7a:	bf58      	it	pl
 8003d7c:	eeb0 7a66 	vmovpl.f32	s14, s13
 8003d80:	429c      	cmp	r4, r3
 8003d82:	d1f4      	bne.n	8003d6e <neai_classification+0x2be>
 8003d84:	eeb0 7ac7 	vabs.f32	s14, s14
 8003d88:	eef4 7a47 	vcmp.f32	s15, s14
 8003d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d90:	bf48      	it	mi
 8003d92:	eef0 7a47 	vmovmi.f32	s15, s14
 8003d96:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8003d9a:	4b38      	ldr	r3, [pc, #224]	; (8003e7c <neai_classification+0x3cc>)
 8003d9c:	ed83 7a03 	vstr	s14, [r3, #12]
 8003da0:	ed95 7a00 	vldr	s14, [r5]
 8003da4:	eef0 7ac7 	vabs.f32	s15, s14
 8003da8:	eef1 6ae7 	vsqrt.f32	s13, s15
 8003dac:	463b      	mov	r3, r7
 8003dae:	ecf3 7a01 	vldmia	r3!, {s15}
 8003db2:	eef0 7ae7 	vabs.f32	s15, s15
 8003db6:	eeb1 6ae7 	vsqrt.f32	s12, s15
 8003dba:	42a3      	cmp	r3, r4
 8003dbc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003dc0:	d1f5      	bne.n	8003dae <neai_classification+0x2fe>
 8003dc2:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8003e80 <neai_classification+0x3d0>
 8003dc6:	ee66 6a86 	vmul.f32	s13, s13, s12
 8003dca:	eef0 7a47 	vmov.f32	s15, s14
 8003dce:	462b      	mov	r3, r5
 8003dd0:	ecb3 6a01 	vldmia	r3!, {s12}
 8003dd4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8003dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ddc:	bfd8      	it	le
 8003dde:	eef0 7a46 	vmovle.f32	s15, s12
 8003de2:	429c      	cmp	r4, r3
 8003de4:	d1f4      	bne.n	8003dd0 <neai_classification+0x320>
 8003de6:	eef0 7ae7 	vabs.f32	s15, s15
 8003dea:	462b      	mov	r3, r5
 8003dec:	ecb3 6a01 	vldmia	r3!, {s12}
 8003df0:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8003df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df8:	bf58      	it	pl
 8003dfa:	eeb0 7a46 	vmovpl.f32	s14, s12
 8003dfe:	42a3      	cmp	r3, r4
 8003e00:	d1f4      	bne.n	8003dec <neai_classification+0x33c>
 8003e02:	eeb0 7ac7 	vabs.f32	s14, s14
 8003e06:	eef4 7a47 	vcmp.f32	s15, s14
 8003e0a:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8003e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e12:	bf48      	it	mi
 8003e14:	eef0 7a47 	vmovmi.f32	s15, s14
 8003e18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003e1c:	4b17      	ldr	r3, [pc, #92]	; (8003e7c <neai_classification+0x3cc>)
 8003e1e:	ed83 7a06 	vstr	s14, [r3, #24]
 8003e22:	ed95 7a00 	vldr	s14, [r5]
 8003e26:	462b      	mov	r3, r5
 8003e28:	eef0 7a47 	vmov.f32	s15, s14
 8003e2c:	ecf3 6a01 	vldmia	r3!, {s13}
 8003e30:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e38:	bfd8      	it	le
 8003e3a:	eef0 7a66 	vmovle.f32	s15, s13
 8003e3e:	42a3      	cmp	r3, r4
 8003e40:	d1f4      	bne.n	8003e2c <neai_classification+0x37c>
 8003e42:	eef0 6a47 	vmov.f32	s13, s14
 8003e46:	eeb0 8ae7 	vabs.f32	s16, s15
 8003e4a:	462b      	mov	r3, r5
 8003e4c:	ecf3 7a01 	vldmia	r3!, {s15}
 8003e50:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e58:	bf58      	it	pl
 8003e5a:	eef0 6a67 	vmovpl.f32	s13, s15
 8003e5e:	42a3      	cmp	r3, r4
 8003e60:	d1f4      	bne.n	8003e4c <neai_classification+0x39c>
 8003e62:	eef0 6ae6 	vabs.f32	s13, s13
 8003e66:	eeb4 8a66 	vcmp.f32	s16, s13
 8003e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8003e72:	bf48      	it	mi
 8003e74:	eeb0 8a66 	vmovmi.f32	s16, s13
 8003e78:	e004      	b.n	8003e84 <neai_classification+0x3d4>
 8003e7a:	bf00      	nop
 8003e7c:	20000ebc 	.word	0x20000ebc
 8003e80:	3b800000 	.word	0x3b800000
 8003e84:	ecf7 7a01 	vldmia	r7!, {s15}
 8003e88:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003e8c:	42bc      	cmp	r4, r7
 8003e8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e92:	d1f7      	bne.n	8003e84 <neai_classification+0x3d4>
 8003e94:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 8003e80 <neai_classification+0x3d0>
 8003e98:	ee27 0a27 	vmul.f32	s0, s14, s15
 8003e9c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea4:	f100 8286 	bmi.w	80043b4 <neai_classification+0x904>
 8003ea8:	eef1 7ac0 	vsqrt.f32	s15, s0
 8003eac:	f8df 831c 	ldr.w	r8, [pc, #796]	; 80041cc <neai_classification+0x71c>
 8003eb0:	4abb      	ldr	r2, [pc, #748]	; (80041a0 <neai_classification+0x6f0>)
 8003eb2:	f5a8 6480 	sub.w	r4, r8, #1024	; 0x400
 8003eb6:	462b      	mov	r3, r5
 8003eb8:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003ebc:	ed82 7a05 	vstr	s14, [r2, #20]
 8003ec0:	4622      	mov	r2, r4
 8003ec2:	f853 1b04 	ldr.w	r1, [r3], #4
 8003ec6:	f842 1b04 	str.w	r1, [r2], #4
 8003eca:	4590      	cmp	r8, r2
 8003ecc:	d1f9      	bne.n	8003ec2 <neai_classification+0x412>
 8003ece:	f8df a300 	ldr.w	sl, [pc, #768]	; 80041d0 <neai_classification+0x720>
 8003ed2:	ed9f 9ac1 	vldr	s18, [pc, #772]	; 80041d8 <neai_classification+0x728>
 8003ed6:	21ff      	movs	r1, #255	; 0xff
 8003ed8:	2000      	movs	r0, #0
 8003eda:	f7ff fca7 	bl	800382c <funchclassifier77.constprop.0>
 8003ede:	edd4 7a00 	vldr	s15, [r4]
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	4655      	mov	r5, sl
 8003ee6:	ecf5 8a01 	vldmia	r5!, {s17}
 8003eea:	eef4 7a68 	vcmp.f32	s15, s17
 8003eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef2:	f103 0201 	add.w	r2, r3, #1
 8003ef6:	f040 822c 	bne.w	8004352 <neai_classification+0x8a2>
 8003efa:	4545      	cmp	r5, r8
 8003efc:	b293      	uxth	r3, r2
 8003efe:	d1f2      	bne.n	8003ee6 <neai_classification+0x436>
 8003f00:	ee08 3a10 	vmov	s16, r3
 8003f04:	eeba 8acc 	vcvt.f32.s32	s16, s16, #8
 8003f08:	f8df 929c 	ldr.w	r9, [pc, #668]	; 80041a8 <neai_classification+0x6f8>
 8003f0c:	eeb0 0a48 	vmov.f32	s0, s16
 8003f10:	f003 f80a 	bl	8006f28 <logf>
 8003f14:	ee68 7a00 	vmul.f32	s15, s16, s0
 8003f18:	4ba1      	ldr	r3, [pc, #644]	; (80041a0 <neai_classification+0x6f0>)
 8003f1a:	ee77 7a89 	vadd.f32	s15, s15, s18
 8003f1e:	2000      	movs	r0, #0
 8003f20:	eef1 7a67 	vneg.f32	s15, s15
 8003f24:	edc3 7a01 	vstr	s15, [r3, #4]
 8003f28:	4b9e      	ldr	r3, [pc, #632]	; (80041a4 <neai_classification+0x6f4>)
 8003f2a:	464d      	mov	r5, r9
 8003f2c:	464a      	mov	r2, r9
 8003f2e:	f856 1b04 	ldr.w	r1, [r6], #4
 8003f32:	f843 1b04 	str.w	r1, [r3], #4
 8003f36:	4598      	cmp	r8, r3
 8003f38:	f842 0b04 	str.w	r0, [r2], #4
 8003f3c:	d1f7      	bne.n	8003f2e <neai_classification+0x47e>
 8003f3e:	2100      	movs	r1, #0
 8003f40:	4898      	ldr	r0, [pc, #608]	; (80041a4 <neai_classification+0x6f4>)
 8003f42:	460a      	mov	r2, r1
 8003f44:	b28b      	uxth	r3, r1
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d205      	bcs.n	8003f56 <neai_classification+0x4a6>
 8003f4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003f4e:	6806      	ldr	r6, [r0, #0]
 8003f50:	681f      	ldr	r7, [r3, #0]
 8003f52:	6007      	str	r7, [r0, #0]
 8003f54:	601e      	str	r6, [r3, #0]
 8003f56:	2a7f      	cmp	r2, #127	; 0x7f
 8003f58:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003f5c:	d904      	bls.n	8003f68 <neai_classification+0x4b8>
 8003f5e:	1ad2      	subs	r2, r2, r3
 8003f60:	b292      	uxth	r2, r2
 8003f62:	085b      	lsrs	r3, r3, #1
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d2fa      	bcs.n	8003f5e <neai_classification+0x4ae>
 8003f68:	3101      	adds	r1, #1
 8003f6a:	441a      	add	r2, r3
 8003f6c:	29ff      	cmp	r1, #255	; 0xff
 8003f6e:	b292      	uxth	r2, r2
 8003f70:	f100 0004 	add.w	r0, r0, #4
 8003f74:	d1e6      	bne.n	8003f44 <neai_classification+0x494>
 8003f76:	ed9f 8a98 	vldr	s16, [pc, #608]	; 80041d8 <neai_classification+0x728>
 8003f7a:	f8cd a004 	str.w	sl, [sp, #4]
 8003f7e:	2708      	movs	r7, #8
 8003f80:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 8003f84:	eeb0 aa48 	vmov.f32	s20, s16
 8003f88:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8003f8c:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8003f90:	2601      	movs	r6, #1
 8003f92:	46ba      	mov	sl, r7
 8003f94:	4637      	mov	r7, r6
 8003f96:	0076      	lsls	r6, r6, #1
 8003f98:	b2b6      	uxth	r6, r6
 8003f9a:	2f00      	cmp	r7, #0
 8003f9c:	d051      	beq.n	8004042 <neai_classification+0x592>
 8003f9e:	1e78      	subs	r0, r7, #1
 8003fa0:	b280      	uxth	r0, r0
 8003fa2:	28ff      	cmp	r0, #255	; 0xff
 8003fa4:	f04f 0100 	mov.w	r1, #0
 8003fa8:	eef0 5a4a 	vmov.f32	s11, s20
 8003fac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003fb0:	bf28      	it	cs
 8003fb2:	20ff      	movcs	r0, #255	; 0xff
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	18fa      	adds	r2, r7, r3
 8003fb8:	b292      	uxth	r2, r2
 8003fba:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8003fbe:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8003fc2:	eddc 6a00 	vldr	s13, [ip]
 8003fc6:	edd2 7a00 	vldr	s15, [r2]
 8003fca:	ee26 7a26 	vmul.f32	s14, s12, s13
 8003fce:	ee25 5aa7 	vmul.f32	s10, s11, s15
 8003fd2:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8003fd6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003fda:	eb04 0e83 	add.w	lr, r4, r3, lsl #2
 8003fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fe2:	ee37 7a45 	vsub.f32	s14, s14, s10
 8003fe6:	edde 6a00 	vldr	s13, [lr]
 8003fea:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8003fee:	edcc 6a00 	vstr	s13, [ip]
 8003ff2:	edde 6a00 	vldr	s13, [lr]
 8003ff6:	ee36 7a87 	vadd.f32	s14, s13, s14
 8003ffa:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
 8003ffe:	ed8e 7a00 	vstr	s14, [lr]
 8004002:	ed9c 7a00 	vldr	s14, [ip]
 8004006:	ee37 7a67 	vsub.f32	s14, s14, s15
 800400a:	4433      	add	r3, r6
 800400c:	ed82 7a00 	vstr	s14, [r2]
 8004010:	ed9c 7a00 	vldr	s14, [ip]
 8004014:	b29b      	uxth	r3, r3
 8004016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800401a:	2bff      	cmp	r3, #255	; 0xff
 800401c:	edcc 7a00 	vstr	s15, [ip]
 8004020:	d9c9      	bls.n	8003fb6 <neai_classification+0x506>
 8004022:	3101      	adds	r1, #1
 8004024:	ee65 6a88 	vmul.f32	s13, s11, s16
 8004028:	ee26 7a08 	vmul.f32	s14, s12, s16
 800402c:	ee66 7a28 	vmul.f32	s15, s12, s17
 8004030:	ee65 5aa8 	vmul.f32	s11, s11, s17
 8004034:	b28b      	uxth	r3, r1
 8004036:	4283      	cmp	r3, r0
 8004038:	ee37 6ae6 	vsub.f32	s12, s15, s13
 800403c:	ee77 5a25 	vadd.f32	s11, s14, s11
 8004040:	d9b9      	bls.n	8003fb6 <neai_classification+0x506>
 8004042:	ee39 0ae8 	vsub.f32	s0, s19, s17
 8004046:	ee20 0a09 	vmul.f32	s0, s0, s18
 800404a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800404e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004052:	f100 81a6 	bmi.w	80043a2 <neai_classification+0x8f2>
 8004056:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800405a:	ee38 0aa9 	vadd.f32	s0, s17, s19
 800405e:	eeb1 8a48 	vneg.f32	s16, s16
 8004062:	ee20 0a09 	vmul.f32	s0, s0, s18
 8004066:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800406a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406e:	f100 8193 	bmi.w	8004398 <neai_classification+0x8e8>
 8004072:	eef1 8ac0 	vsqrt.f32	s17, s0
 8004076:	f10a 3aff 	add.w	sl, sl, #4294967295
 800407a:	fa1f fa8a 	uxth.w	sl, sl
 800407e:	f1ba 0f00 	cmp.w	sl, #0
 8004082:	d187      	bne.n	8003f94 <neai_classification+0x4e4>
 8004084:	4657      	mov	r7, sl
 8004086:	4a48      	ldr	r2, [pc, #288]	; (80041a8 <neai_classification+0x6f8>)
 8004088:	f8dd a004 	ldr.w	sl, [sp, #4]
 800408c:	4b45      	ldr	r3, [pc, #276]	; (80041a4 <neai_classification+0x6f4>)
 800408e:	eddf 6a47 	vldr	s13, [pc, #284]	; 80041ac <neai_classification+0x6fc>
 8004092:	ed93 7a00 	vldr	s14, [r3]
 8004096:	edd2 7a00 	vldr	s15, [r2]
 800409a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800409e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80040a2:	eca3 7a01 	vstmia	r3!, {s14}
 80040a6:	4598      	cmp	r8, r3
 80040a8:	ece2 7a01 	vstmia	r2!, {s15}
 80040ac:	d1f1      	bne.n	8004092 <neai_classification+0x5e2>
 80040ae:	4a40      	ldr	r2, [pc, #256]	; (80041b0 <neai_classification+0x700>)
 80040b0:	4b3d      	ldr	r3, [pc, #244]	; (80041a8 <neai_classification+0x6f8>)
 80040b2:	ed93 7a01 	vldr	s14, [r3, #4]
 80040b6:	ecfa 7a01 	vldmia	sl!, {s15}
 80040ba:	ee27 7a07 	vmul.f32	s14, s14, s14
 80040be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80040c2:	4552      	cmp	r2, sl
 80040c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040c8:	ece3 7a01 	vstmia	r3!, {s15}
 80040cc:	d1f1      	bne.n	80040b2 <neai_classification+0x602>
 80040ce:	4c39      	ldr	r4, [pc, #228]	; (80041b4 <neai_classification+0x704>)
 80040d0:	ecb9 0a01 	vldmia	r9!, {s0}
 80040d4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80040d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040dc:	f100 8154 	bmi.w	8004388 <neai_classification+0x8d8>
 80040e0:	eef1 7ac0 	vsqrt.f32	s15, s0
 80040e4:	454c      	cmp	r4, r9
 80040e6:	ed49 7a01 	vstr	s15, [r9, #-4]
 80040ea:	d1f1      	bne.n	80040d0 <neai_classification+0x620>
 80040ec:	edd5 7a00 	vldr	s15, [r5]
 80040f0:	4a31      	ldr	r2, [pc, #196]	; (80041b8 <neai_classification+0x708>)
 80040f2:	eef0 6a67 	vmov.f32	s13, s15
 80040f6:	2000      	movs	r0, #0
 80040f8:	4611      	mov	r1, r2
 80040fa:	2301      	movs	r3, #1
 80040fc:	ecb1 7a01 	vldmia	r1!, {s14}
 8004100:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8004104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004108:	d403      	bmi.n	8004112 <neai_classification+0x662>
 800410a:	bfc4      	itt	gt
 800410c:	eef0 6a47 	vmovgt.f32	s13, s14
 8004110:	b298      	uxthgt	r0, r3
 8004112:	3301      	adds	r3, #1
 8004114:	2b80      	cmp	r3, #128	; 0x80
 8004116:	d1f1      	bne.n	80040fc <neai_classification+0x64c>
 8004118:	ee07 0a10 	vmov	s14, r0
 800411c:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <neai_classification+0x6f0>)
 800411e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004122:	ed83 7a04 	vstr	s14, [r3, #16]
 8004126:	ecb2 7a01 	vldmia	r2!, {s14}
 800412a:	42a2      	cmp	r2, r4
 800412c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004130:	d1f9      	bne.n	8004126 <neai_classification+0x676>
 8004132:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <neai_classification+0x6f0>)
 8004134:	4d21      	ldr	r5, [pc, #132]	; (80041bc <neai_classification+0x70c>)
 8004136:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 800413a:	461e      	mov	r6, r3
 800413c:	4b20      	ldr	r3, [pc, #128]	; (80041c0 <neai_classification+0x710>)
 800413e:	f8df a094 	ldr.w	sl, [pc, #148]	; 80041d4 <neai_classification+0x724>
 8004142:	f8d3 8000 	ldr.w	r8, [r3]
 8004146:	4b1f      	ldr	r3, [pc, #124]	; (80041c4 <neai_classification+0x714>)
 8004148:	f8d3 c000 	ldr.w	ip, [r3]
 800414c:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <neai_classification+0x718>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	9304      	str	r3, [sp, #16]
 8004152:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8004156:	eb03 0488 	add.w	r4, r3, r8, lsl #2
 800415a:	f10c 030c 	add.w	r3, ip, #12
 800415e:	9202      	str	r2, [sp, #8]
 8004160:	9301      	str	r3, [sp, #4]
 8004162:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004166:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800416a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800416e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004172:	46d1      	mov	r9, sl
 8004174:	f04f 0e00 	mov.w	lr, #0
 8004178:	f1b8 0f00 	cmp.w	r8, #0
 800417c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80041d8 <neai_classification+0x728>
 8004180:	dd2c      	ble.n	80041dc <neai_classification+0x72c>
 8004182:	9b04      	ldr	r3, [sp, #16]
 8004184:	4a0d      	ldr	r2, [pc, #52]	; (80041bc <neai_classification+0x70c>)
 8004186:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 800418a:	ecf3 6a01 	vldmia	r3!, {s13}
 800418e:	ecf2 7a01 	vldmia	r2!, {s15}
 8004192:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004196:	42a3      	cmp	r3, r4
 8004198:	ee37 7a27 	vadd.f32	s14, s14, s15
 800419c:	d1f5      	bne.n	800418a <neai_classification+0x6da>
 800419e:	e01d      	b.n	80041dc <neai_classification+0x72c>
 80041a0:	20000ebc 	.word	0x20000ebc
 80041a4:	20000abc 	.word	0x20000abc
 80041a8:	200006bc 	.word	0x200006bc
 80041ac:	3c000000 	.word	0x3c000000
 80041b0:	20000cc0 	.word	0x20000cc0
 80041b4:	200008bc 	.word	0x200008bc
 80041b8:	200006c0 	.word	0x200006c0
 80041bc:	20000f28 	.word	0x20000f28
 80041c0:	200006b8 	.word	0x200006b8
 80041c4:	200006b0 	.word	0x200006b0
 80041c8:	200006b4 	.word	0x200006b4
 80041cc:	20000ebc 	.word	0x20000ebc
 80041d0:	20000ac0 	.word	0x20000ac0
 80041d4:	200006a8 	.word	0x200006a8
 80041d8:	00000000 	.word	0x00000000
 80041dc:	ecfc 7a01 	vldmia	ip!, {s15}
 80041e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041e4:	44c6      	add	lr, r8
 80041e6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80041ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ee:	bfd4      	ite	le
 80041f0:	2301      	movle	r3, #1
 80041f2:	2302      	movgt	r3, #2
 80041f4:	f829 3b02 	strh.w	r3, [r9], #2
 80041f8:	9b02      	ldr	r3, [sp, #8]
 80041fa:	441c      	add	r4, r3
 80041fc:	9b01      	ldr	r3, [sp, #4]
 80041fe:	4563      	cmp	r3, ip
 8004200:	d1ba      	bne.n	8004178 <neai_classification+0x6c8>
 8004202:	f8ba 3000 	ldrh.w	r3, [sl]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d005      	beq.n	8004216 <neai_classification+0x766>
 800420a:	f1a3 0302 	sub.w	r3, r3, #2
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 800421a:	f8aa 3000 	strh.w	r3, [sl]
 800421e:	2901      	cmp	r1, #1
 8004220:	d003      	beq.n	800422a <neai_classification+0x77a>
 8004222:	2902      	cmp	r1, #2
 8004224:	bf14      	ite	ne
 8004226:	2100      	movne	r1, #0
 8004228:	2103      	moveq	r1, #3
 800422a:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800422e:	f8aa 1002 	strh.w	r1, [sl, #2]
 8004232:	2a01      	cmp	r2, #1
 8004234:	f000 80a1 	beq.w	800437a <neai_classification+0x8ca>
 8004238:	2a02      	cmp	r2, #2
 800423a:	bf08      	it	eq
 800423c:	2703      	moveq	r7, #3
 800423e:	ed1f 8a1a 	vldr	s16, [pc, #-104]	; 80041d8 <neai_classification+0x728>
 8004242:	f8aa 7004 	strh.w	r7, [sl, #4]
 8004246:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800424a:	4403      	add	r3, r0
 800424c:	ed8b 8a00 	vstr	s16, [fp]
 8004250:	ed8b 8a01 	vstr	s16, [fp, #4]
 8004254:	ed8b 8a02 	vstr	s16, [fp, #8]
 8004258:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
 800425c:	edd2 7a00 	vldr	s15, [r2]
 8004260:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004264:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004268:	4401      	add	r1, r0
 800426a:	edc2 7a00 	vstr	s15, [r2]
 800426e:	eb0b 0281 	add.w	r2, fp, r1, lsl #2
 8004272:	edd2 7a00 	vldr	s15, [r2]
 8004276:	ee77 7a87 	vadd.f32	s15, s15, s14
 800427a:	183b      	adds	r3, r7, r0
 800427c:	edc2 7a00 	vstr	s15, [r2]
 8004280:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8004284:	edd3 7a00 	vldr	s15, [r3]
 8004288:	ee77 7a87 	vadd.f32	s15, s15, s14
 800428c:	eeb1 9a04 	vmov.f32	s18, #20	; 0x40a00000  5.0
 8004290:	edc3 7a00 	vstr	s15, [r3]
 8004294:	ed9b 7a00 	vldr	s14, [fp]
 8004298:	eddb 7a01 	vldr	s15, [fp, #4]
 800429c:	eddb 8a02 	vldr	s17, [fp, #8]
 80042a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a8:	bfd8      	it	le
 80042aa:	eef0 7a47 	vmovle.f32	s15, s14
 80042ae:	eef4 7ae8 	vcmpe.f32	s15, s17
 80042b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b6:	465c      	mov	r4, fp
 80042b8:	bf58      	it	pl
 80042ba:	eef0 8a67 	vmovpl.f32	s17, s15
 80042be:	f10b 050c 	add.w	r5, fp, #12
 80042c2:	edd4 7a00 	vldr	s15, [r4]
 80042c6:	ee77 7ae8 	vsub.f32	s15, s15, s17
 80042ca:	ee67 7a89 	vmul.f32	s15, s15, s18
 80042ce:	ee17 0a90 	vmov	r0, s15
 80042d2:	f7fc f941 	bl	8000558 <__aeabi_f2d>
 80042d6:	ec41 0b10 	vmov	d0, r0, r1
 80042da:	f002 fddd 	bl	8006e98 <exp>
 80042de:	ec51 0b10 	vmov	r0, r1, d0
 80042e2:	f7fc fc69 	bl	8000bb8 <__aeabi_d2f>
 80042e6:	f844 0b04 	str.w	r0, [r4], #4
 80042ea:	ee07 0a90 	vmov	s15, r0
 80042ee:	42ac      	cmp	r4, r5
 80042f0:	ee38 8a27 	vadd.f32	s16, s16, s15
 80042f4:	d1e5      	bne.n	80042c2 <neai_classification+0x812>
 80042f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042fa:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80042fe:	9a05      	ldr	r2, [sp, #20]
 8004300:	9803      	ldr	r0, [sp, #12]
 8004302:	eddb 6a00 	vldr	s13, [fp]
 8004306:	ed9b 7a01 	vldr	s14, [fp, #4]
 800430a:	ed9b 6a02 	vldr	s12, [fp, #8]
 800430e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004312:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004316:	ee67 7a86 	vmul.f32	s15, s15, s12
 800431a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800431e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004322:	ed8b 7a01 	vstr	s14, [fp, #4]
 8004326:	bf58      	it	pl
 8004328:	eeb0 7a66 	vmovpl.f32	s14, s13
 800432c:	eeb4 7a67 	vcmp.f32	s14, s15
 8004330:	bf54      	ite	pl
 8004332:	2301      	movpl	r3, #1
 8004334:	2302      	movmi	r3, #2
 8004336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433a:	bf48      	it	mi
 800433c:	2303      	movmi	r3, #3
 800433e:	edcb 6a00 	vstr	s13, [fp]
 8004342:	edcb 7a02 	vstr	s15, [fp, #8]
 8004346:	8013      	strh	r3, [r2, #0]
 8004348:	b007      	add	sp, #28
 800434a:	ecbd 8b06 	vpop	{d8-d10}
 800434e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004352:	ee08 3a10 	vmov	s16, r3
 8004356:	eeba 8acc 	vcvt.f32.s32	s16, s16, #8
 800435a:	eeb0 0a48 	vmov.f32	s0, s16
 800435e:	f002 fde3 	bl	8006f28 <logf>
 8004362:	ee28 8a00 	vmul.f32	s16, s16, s0
 8004366:	4545      	cmp	r5, r8
 8004368:	ee39 9a08 	vadd.f32	s18, s18, s16
 800436c:	f04f 0301 	mov.w	r3, #1
 8004370:	eef0 7a68 	vmov.f32	s15, s17
 8004374:	f47f adb7 	bne.w	8003ee6 <neai_classification+0x436>
 8004378:	e5c2      	b.n	8003f00 <neai_classification+0x450>
 800437a:	2702      	movs	r7, #2
 800437c:	e75f      	b.n	800423e <neai_classification+0x78e>
 800437e:	f002 fe01 	bl	8006f84 <sqrtf>
 8004382:	eeb0 7a40 	vmov.f32	s14, s0
 8004386:	e44f      	b.n	8003c28 <neai_classification+0x178>
 8004388:	f002 fdfc 	bl	8006f84 <sqrtf>
 800438c:	454c      	cmp	r4, r9
 800438e:	ed09 0a01 	vstr	s0, [r9, #-4]
 8004392:	f47f ae9d 	bne.w	80040d0 <neai_classification+0x620>
 8004396:	e6a9      	b.n	80040ec <neai_classification+0x63c>
 8004398:	f002 fdf4 	bl	8006f84 <sqrtf>
 800439c:	eef0 8a40 	vmov.f32	s17, s0
 80043a0:	e669      	b.n	8004076 <neai_classification+0x5c6>
 80043a2:	f002 fdef 	bl	8006f84 <sqrtf>
 80043a6:	ee78 8aa9 	vadd.f32	s17, s17, s19
 80043aa:	eeb1 8a40 	vneg.f32	s16, s0
 80043ae:	ee28 0a89 	vmul.f32	s0, s17, s18
 80043b2:	e65e      	b.n	8004072 <neai_classification+0x5c2>
 80043b4:	f002 fde6 	bl	8006f84 <sqrtf>
 80043b8:	eef0 7a40 	vmov.f32	s15, s0
 80043bc:	e576      	b.n	8003eac <neai_classification+0x3fc>
 80043be:	f002 fde1 	bl	8006f84 <sqrtf>
 80043c2:	eeb0 7a40 	vmov.f32	s14, s0
 80043c6:	e486      	b.n	8003cd6 <neai_classification+0x226>

080043c8 <__cvt>:
 80043c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043cc:	ec55 4b10 	vmov	r4, r5, d0
 80043d0:	2d00      	cmp	r5, #0
 80043d2:	460e      	mov	r6, r1
 80043d4:	4619      	mov	r1, r3
 80043d6:	462b      	mov	r3, r5
 80043d8:	bfbb      	ittet	lt
 80043da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80043de:	461d      	movlt	r5, r3
 80043e0:	2300      	movge	r3, #0
 80043e2:	232d      	movlt	r3, #45	; 0x2d
 80043e4:	700b      	strb	r3, [r1, #0]
 80043e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80043ec:	4691      	mov	r9, r2
 80043ee:	f023 0820 	bic.w	r8, r3, #32
 80043f2:	bfbc      	itt	lt
 80043f4:	4622      	movlt	r2, r4
 80043f6:	4614      	movlt	r4, r2
 80043f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043fc:	d005      	beq.n	800440a <__cvt+0x42>
 80043fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004402:	d100      	bne.n	8004406 <__cvt+0x3e>
 8004404:	3601      	adds	r6, #1
 8004406:	2102      	movs	r1, #2
 8004408:	e000      	b.n	800440c <__cvt+0x44>
 800440a:	2103      	movs	r1, #3
 800440c:	ab03      	add	r3, sp, #12
 800440e:	9301      	str	r3, [sp, #4]
 8004410:	ab02      	add	r3, sp, #8
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	ec45 4b10 	vmov	d0, r4, r5
 8004418:	4653      	mov	r3, sl
 800441a:	4632      	mov	r2, r6
 800441c:	f000 ff54 	bl	80052c8 <_dtoa_r>
 8004420:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004424:	4607      	mov	r7, r0
 8004426:	d102      	bne.n	800442e <__cvt+0x66>
 8004428:	f019 0f01 	tst.w	r9, #1
 800442c:	d022      	beq.n	8004474 <__cvt+0xac>
 800442e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004432:	eb07 0906 	add.w	r9, r7, r6
 8004436:	d110      	bne.n	800445a <__cvt+0x92>
 8004438:	783b      	ldrb	r3, [r7, #0]
 800443a:	2b30      	cmp	r3, #48	; 0x30
 800443c:	d10a      	bne.n	8004454 <__cvt+0x8c>
 800443e:	2200      	movs	r2, #0
 8004440:	2300      	movs	r3, #0
 8004442:	4620      	mov	r0, r4
 8004444:	4629      	mov	r1, r5
 8004446:	f7fc fb47 	bl	8000ad8 <__aeabi_dcmpeq>
 800444a:	b918      	cbnz	r0, 8004454 <__cvt+0x8c>
 800444c:	f1c6 0601 	rsb	r6, r6, #1
 8004450:	f8ca 6000 	str.w	r6, [sl]
 8004454:	f8da 3000 	ldr.w	r3, [sl]
 8004458:	4499      	add	r9, r3
 800445a:	2200      	movs	r2, #0
 800445c:	2300      	movs	r3, #0
 800445e:	4620      	mov	r0, r4
 8004460:	4629      	mov	r1, r5
 8004462:	f7fc fb39 	bl	8000ad8 <__aeabi_dcmpeq>
 8004466:	b108      	cbz	r0, 800446c <__cvt+0xa4>
 8004468:	f8cd 900c 	str.w	r9, [sp, #12]
 800446c:	2230      	movs	r2, #48	; 0x30
 800446e:	9b03      	ldr	r3, [sp, #12]
 8004470:	454b      	cmp	r3, r9
 8004472:	d307      	bcc.n	8004484 <__cvt+0xbc>
 8004474:	9b03      	ldr	r3, [sp, #12]
 8004476:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004478:	1bdb      	subs	r3, r3, r7
 800447a:	4638      	mov	r0, r7
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	b004      	add	sp, #16
 8004480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004484:	1c59      	adds	r1, r3, #1
 8004486:	9103      	str	r1, [sp, #12]
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	e7f0      	b.n	800446e <__cvt+0xa6>

0800448c <__exponent>:
 800448c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800448e:	4603      	mov	r3, r0
 8004490:	2900      	cmp	r1, #0
 8004492:	bfb8      	it	lt
 8004494:	4249      	neglt	r1, r1
 8004496:	f803 2b02 	strb.w	r2, [r3], #2
 800449a:	bfb4      	ite	lt
 800449c:	222d      	movlt	r2, #45	; 0x2d
 800449e:	222b      	movge	r2, #43	; 0x2b
 80044a0:	2909      	cmp	r1, #9
 80044a2:	7042      	strb	r2, [r0, #1]
 80044a4:	dd2a      	ble.n	80044fc <__exponent+0x70>
 80044a6:	f10d 0207 	add.w	r2, sp, #7
 80044aa:	4617      	mov	r7, r2
 80044ac:	260a      	movs	r6, #10
 80044ae:	4694      	mov	ip, r2
 80044b0:	fb91 f5f6 	sdiv	r5, r1, r6
 80044b4:	fb06 1415 	mls	r4, r6, r5, r1
 80044b8:	3430      	adds	r4, #48	; 0x30
 80044ba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80044be:	460c      	mov	r4, r1
 80044c0:	2c63      	cmp	r4, #99	; 0x63
 80044c2:	f102 32ff 	add.w	r2, r2, #4294967295
 80044c6:	4629      	mov	r1, r5
 80044c8:	dcf1      	bgt.n	80044ae <__exponent+0x22>
 80044ca:	3130      	adds	r1, #48	; 0x30
 80044cc:	f1ac 0402 	sub.w	r4, ip, #2
 80044d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80044d4:	1c41      	adds	r1, r0, #1
 80044d6:	4622      	mov	r2, r4
 80044d8:	42ba      	cmp	r2, r7
 80044da:	d30a      	bcc.n	80044f2 <__exponent+0x66>
 80044dc:	f10d 0209 	add.w	r2, sp, #9
 80044e0:	eba2 020c 	sub.w	r2, r2, ip
 80044e4:	42bc      	cmp	r4, r7
 80044e6:	bf88      	it	hi
 80044e8:	2200      	movhi	r2, #0
 80044ea:	4413      	add	r3, r2
 80044ec:	1a18      	subs	r0, r3, r0
 80044ee:	b003      	add	sp, #12
 80044f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044f2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80044f6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80044fa:	e7ed      	b.n	80044d8 <__exponent+0x4c>
 80044fc:	2330      	movs	r3, #48	; 0x30
 80044fe:	3130      	adds	r1, #48	; 0x30
 8004500:	7083      	strb	r3, [r0, #2]
 8004502:	70c1      	strb	r1, [r0, #3]
 8004504:	1d03      	adds	r3, r0, #4
 8004506:	e7f1      	b.n	80044ec <__exponent+0x60>

08004508 <_printf_float>:
 8004508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450c:	ed2d 8b02 	vpush	{d8}
 8004510:	b08d      	sub	sp, #52	; 0x34
 8004512:	460c      	mov	r4, r1
 8004514:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004518:	4616      	mov	r6, r2
 800451a:	461f      	mov	r7, r3
 800451c:	4605      	mov	r5, r0
 800451e:	f000 fdd1 	bl	80050c4 <_localeconv_r>
 8004522:	f8d0 a000 	ldr.w	sl, [r0]
 8004526:	4650      	mov	r0, sl
 8004528:	f7fb feaa 	bl	8000280 <strlen>
 800452c:	2300      	movs	r3, #0
 800452e:	930a      	str	r3, [sp, #40]	; 0x28
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	9305      	str	r3, [sp, #20]
 8004534:	f8d8 3000 	ldr.w	r3, [r8]
 8004538:	f894 b018 	ldrb.w	fp, [r4, #24]
 800453c:	3307      	adds	r3, #7
 800453e:	f023 0307 	bic.w	r3, r3, #7
 8004542:	f103 0208 	add.w	r2, r3, #8
 8004546:	f8c8 2000 	str.w	r2, [r8]
 800454a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800454e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004552:	9307      	str	r3, [sp, #28]
 8004554:	f8cd 8018 	str.w	r8, [sp, #24]
 8004558:	ee08 0a10 	vmov	s16, r0
 800455c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004560:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004564:	4b9e      	ldr	r3, [pc, #632]	; (80047e0 <_printf_float+0x2d8>)
 8004566:	f04f 32ff 	mov.w	r2, #4294967295
 800456a:	f7fc fae7 	bl	8000b3c <__aeabi_dcmpun>
 800456e:	bb88      	cbnz	r0, 80045d4 <_printf_float+0xcc>
 8004570:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004574:	4b9a      	ldr	r3, [pc, #616]	; (80047e0 <_printf_float+0x2d8>)
 8004576:	f04f 32ff 	mov.w	r2, #4294967295
 800457a:	f7fc fac1 	bl	8000b00 <__aeabi_dcmple>
 800457e:	bb48      	cbnz	r0, 80045d4 <_printf_float+0xcc>
 8004580:	2200      	movs	r2, #0
 8004582:	2300      	movs	r3, #0
 8004584:	4640      	mov	r0, r8
 8004586:	4649      	mov	r1, r9
 8004588:	f7fc fab0 	bl	8000aec <__aeabi_dcmplt>
 800458c:	b110      	cbz	r0, 8004594 <_printf_float+0x8c>
 800458e:	232d      	movs	r3, #45	; 0x2d
 8004590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004594:	4a93      	ldr	r2, [pc, #588]	; (80047e4 <_printf_float+0x2dc>)
 8004596:	4b94      	ldr	r3, [pc, #592]	; (80047e8 <_printf_float+0x2e0>)
 8004598:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800459c:	bf94      	ite	ls
 800459e:	4690      	movls	r8, r2
 80045a0:	4698      	movhi	r8, r3
 80045a2:	2303      	movs	r3, #3
 80045a4:	6123      	str	r3, [r4, #16]
 80045a6:	9b05      	ldr	r3, [sp, #20]
 80045a8:	f023 0304 	bic.w	r3, r3, #4
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	f04f 0900 	mov.w	r9, #0
 80045b2:	9700      	str	r7, [sp, #0]
 80045b4:	4633      	mov	r3, r6
 80045b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80045b8:	4621      	mov	r1, r4
 80045ba:	4628      	mov	r0, r5
 80045bc:	f000 f9da 	bl	8004974 <_printf_common>
 80045c0:	3001      	adds	r0, #1
 80045c2:	f040 8090 	bne.w	80046e6 <_printf_float+0x1de>
 80045c6:	f04f 30ff 	mov.w	r0, #4294967295
 80045ca:	b00d      	add	sp, #52	; 0x34
 80045cc:	ecbd 8b02 	vpop	{d8}
 80045d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d4:	4642      	mov	r2, r8
 80045d6:	464b      	mov	r3, r9
 80045d8:	4640      	mov	r0, r8
 80045da:	4649      	mov	r1, r9
 80045dc:	f7fc faae 	bl	8000b3c <__aeabi_dcmpun>
 80045e0:	b140      	cbz	r0, 80045f4 <_printf_float+0xec>
 80045e2:	464b      	mov	r3, r9
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bfbc      	itt	lt
 80045e8:	232d      	movlt	r3, #45	; 0x2d
 80045ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80045ee:	4a7f      	ldr	r2, [pc, #508]	; (80047ec <_printf_float+0x2e4>)
 80045f0:	4b7f      	ldr	r3, [pc, #508]	; (80047f0 <_printf_float+0x2e8>)
 80045f2:	e7d1      	b.n	8004598 <_printf_float+0x90>
 80045f4:	6863      	ldr	r3, [r4, #4]
 80045f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80045fa:	9206      	str	r2, [sp, #24]
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	d13f      	bne.n	8004680 <_printf_float+0x178>
 8004600:	2306      	movs	r3, #6
 8004602:	6063      	str	r3, [r4, #4]
 8004604:	9b05      	ldr	r3, [sp, #20]
 8004606:	6861      	ldr	r1, [r4, #4]
 8004608:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800460c:	2300      	movs	r3, #0
 800460e:	9303      	str	r3, [sp, #12]
 8004610:	ab0a      	add	r3, sp, #40	; 0x28
 8004612:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004616:	ab09      	add	r3, sp, #36	; 0x24
 8004618:	ec49 8b10 	vmov	d0, r8, r9
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	6022      	str	r2, [r4, #0]
 8004620:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004624:	4628      	mov	r0, r5
 8004626:	f7ff fecf 	bl	80043c8 <__cvt>
 800462a:	9b06      	ldr	r3, [sp, #24]
 800462c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800462e:	2b47      	cmp	r3, #71	; 0x47
 8004630:	4680      	mov	r8, r0
 8004632:	d108      	bne.n	8004646 <_printf_float+0x13e>
 8004634:	1cc8      	adds	r0, r1, #3
 8004636:	db02      	blt.n	800463e <_printf_float+0x136>
 8004638:	6863      	ldr	r3, [r4, #4]
 800463a:	4299      	cmp	r1, r3
 800463c:	dd41      	ble.n	80046c2 <_printf_float+0x1ba>
 800463e:	f1ab 0302 	sub.w	r3, fp, #2
 8004642:	fa5f fb83 	uxtb.w	fp, r3
 8004646:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800464a:	d820      	bhi.n	800468e <_printf_float+0x186>
 800464c:	3901      	subs	r1, #1
 800464e:	465a      	mov	r2, fp
 8004650:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004654:	9109      	str	r1, [sp, #36]	; 0x24
 8004656:	f7ff ff19 	bl	800448c <__exponent>
 800465a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800465c:	1813      	adds	r3, r2, r0
 800465e:	2a01      	cmp	r2, #1
 8004660:	4681      	mov	r9, r0
 8004662:	6123      	str	r3, [r4, #16]
 8004664:	dc02      	bgt.n	800466c <_printf_float+0x164>
 8004666:	6822      	ldr	r2, [r4, #0]
 8004668:	07d2      	lsls	r2, r2, #31
 800466a:	d501      	bpl.n	8004670 <_printf_float+0x168>
 800466c:	3301      	adds	r3, #1
 800466e:	6123      	str	r3, [r4, #16]
 8004670:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004674:	2b00      	cmp	r3, #0
 8004676:	d09c      	beq.n	80045b2 <_printf_float+0xaa>
 8004678:	232d      	movs	r3, #45	; 0x2d
 800467a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800467e:	e798      	b.n	80045b2 <_printf_float+0xaa>
 8004680:	9a06      	ldr	r2, [sp, #24]
 8004682:	2a47      	cmp	r2, #71	; 0x47
 8004684:	d1be      	bne.n	8004604 <_printf_float+0xfc>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1bc      	bne.n	8004604 <_printf_float+0xfc>
 800468a:	2301      	movs	r3, #1
 800468c:	e7b9      	b.n	8004602 <_printf_float+0xfa>
 800468e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004692:	d118      	bne.n	80046c6 <_printf_float+0x1be>
 8004694:	2900      	cmp	r1, #0
 8004696:	6863      	ldr	r3, [r4, #4]
 8004698:	dd0b      	ble.n	80046b2 <_printf_float+0x1aa>
 800469a:	6121      	str	r1, [r4, #16]
 800469c:	b913      	cbnz	r3, 80046a4 <_printf_float+0x19c>
 800469e:	6822      	ldr	r2, [r4, #0]
 80046a0:	07d0      	lsls	r0, r2, #31
 80046a2:	d502      	bpl.n	80046aa <_printf_float+0x1a2>
 80046a4:	3301      	adds	r3, #1
 80046a6:	440b      	add	r3, r1
 80046a8:	6123      	str	r3, [r4, #16]
 80046aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80046ac:	f04f 0900 	mov.w	r9, #0
 80046b0:	e7de      	b.n	8004670 <_printf_float+0x168>
 80046b2:	b913      	cbnz	r3, 80046ba <_printf_float+0x1b2>
 80046b4:	6822      	ldr	r2, [r4, #0]
 80046b6:	07d2      	lsls	r2, r2, #31
 80046b8:	d501      	bpl.n	80046be <_printf_float+0x1b6>
 80046ba:	3302      	adds	r3, #2
 80046bc:	e7f4      	b.n	80046a8 <_printf_float+0x1a0>
 80046be:	2301      	movs	r3, #1
 80046c0:	e7f2      	b.n	80046a8 <_printf_float+0x1a0>
 80046c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80046c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046c8:	4299      	cmp	r1, r3
 80046ca:	db05      	blt.n	80046d8 <_printf_float+0x1d0>
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	6121      	str	r1, [r4, #16]
 80046d0:	07d8      	lsls	r0, r3, #31
 80046d2:	d5ea      	bpl.n	80046aa <_printf_float+0x1a2>
 80046d4:	1c4b      	adds	r3, r1, #1
 80046d6:	e7e7      	b.n	80046a8 <_printf_float+0x1a0>
 80046d8:	2900      	cmp	r1, #0
 80046da:	bfd4      	ite	le
 80046dc:	f1c1 0202 	rsble	r2, r1, #2
 80046e0:	2201      	movgt	r2, #1
 80046e2:	4413      	add	r3, r2
 80046e4:	e7e0      	b.n	80046a8 <_printf_float+0x1a0>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	055a      	lsls	r2, r3, #21
 80046ea:	d407      	bmi.n	80046fc <_printf_float+0x1f4>
 80046ec:	6923      	ldr	r3, [r4, #16]
 80046ee:	4642      	mov	r2, r8
 80046f0:	4631      	mov	r1, r6
 80046f2:	4628      	mov	r0, r5
 80046f4:	47b8      	blx	r7
 80046f6:	3001      	adds	r0, #1
 80046f8:	d12c      	bne.n	8004754 <_printf_float+0x24c>
 80046fa:	e764      	b.n	80045c6 <_printf_float+0xbe>
 80046fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004700:	f240 80e0 	bls.w	80048c4 <_printf_float+0x3bc>
 8004704:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004708:	2200      	movs	r2, #0
 800470a:	2300      	movs	r3, #0
 800470c:	f7fc f9e4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004710:	2800      	cmp	r0, #0
 8004712:	d034      	beq.n	800477e <_printf_float+0x276>
 8004714:	4a37      	ldr	r2, [pc, #220]	; (80047f4 <_printf_float+0x2ec>)
 8004716:	2301      	movs	r3, #1
 8004718:	4631      	mov	r1, r6
 800471a:	4628      	mov	r0, r5
 800471c:	47b8      	blx	r7
 800471e:	3001      	adds	r0, #1
 8004720:	f43f af51 	beq.w	80045c6 <_printf_float+0xbe>
 8004724:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004728:	429a      	cmp	r2, r3
 800472a:	db02      	blt.n	8004732 <_printf_float+0x22a>
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	07d8      	lsls	r0, r3, #31
 8004730:	d510      	bpl.n	8004754 <_printf_float+0x24c>
 8004732:	ee18 3a10 	vmov	r3, s16
 8004736:	4652      	mov	r2, sl
 8004738:	4631      	mov	r1, r6
 800473a:	4628      	mov	r0, r5
 800473c:	47b8      	blx	r7
 800473e:	3001      	adds	r0, #1
 8004740:	f43f af41 	beq.w	80045c6 <_printf_float+0xbe>
 8004744:	f04f 0800 	mov.w	r8, #0
 8004748:	f104 091a 	add.w	r9, r4, #26
 800474c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800474e:	3b01      	subs	r3, #1
 8004750:	4543      	cmp	r3, r8
 8004752:	dc09      	bgt.n	8004768 <_printf_float+0x260>
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	079b      	lsls	r3, r3, #30
 8004758:	f100 8107 	bmi.w	800496a <_printf_float+0x462>
 800475c:	68e0      	ldr	r0, [r4, #12]
 800475e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004760:	4298      	cmp	r0, r3
 8004762:	bfb8      	it	lt
 8004764:	4618      	movlt	r0, r3
 8004766:	e730      	b.n	80045ca <_printf_float+0xc2>
 8004768:	2301      	movs	r3, #1
 800476a:	464a      	mov	r2, r9
 800476c:	4631      	mov	r1, r6
 800476e:	4628      	mov	r0, r5
 8004770:	47b8      	blx	r7
 8004772:	3001      	adds	r0, #1
 8004774:	f43f af27 	beq.w	80045c6 <_printf_float+0xbe>
 8004778:	f108 0801 	add.w	r8, r8, #1
 800477c:	e7e6      	b.n	800474c <_printf_float+0x244>
 800477e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004780:	2b00      	cmp	r3, #0
 8004782:	dc39      	bgt.n	80047f8 <_printf_float+0x2f0>
 8004784:	4a1b      	ldr	r2, [pc, #108]	; (80047f4 <_printf_float+0x2ec>)
 8004786:	2301      	movs	r3, #1
 8004788:	4631      	mov	r1, r6
 800478a:	4628      	mov	r0, r5
 800478c:	47b8      	blx	r7
 800478e:	3001      	adds	r0, #1
 8004790:	f43f af19 	beq.w	80045c6 <_printf_float+0xbe>
 8004794:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004798:	4313      	orrs	r3, r2
 800479a:	d102      	bne.n	80047a2 <_printf_float+0x29a>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	07d9      	lsls	r1, r3, #31
 80047a0:	d5d8      	bpl.n	8004754 <_printf_float+0x24c>
 80047a2:	ee18 3a10 	vmov	r3, s16
 80047a6:	4652      	mov	r2, sl
 80047a8:	4631      	mov	r1, r6
 80047aa:	4628      	mov	r0, r5
 80047ac:	47b8      	blx	r7
 80047ae:	3001      	adds	r0, #1
 80047b0:	f43f af09 	beq.w	80045c6 <_printf_float+0xbe>
 80047b4:	f04f 0900 	mov.w	r9, #0
 80047b8:	f104 0a1a 	add.w	sl, r4, #26
 80047bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047be:	425b      	negs	r3, r3
 80047c0:	454b      	cmp	r3, r9
 80047c2:	dc01      	bgt.n	80047c8 <_printf_float+0x2c0>
 80047c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047c6:	e792      	b.n	80046ee <_printf_float+0x1e6>
 80047c8:	2301      	movs	r3, #1
 80047ca:	4652      	mov	r2, sl
 80047cc:	4631      	mov	r1, r6
 80047ce:	4628      	mov	r0, r5
 80047d0:	47b8      	blx	r7
 80047d2:	3001      	adds	r0, #1
 80047d4:	f43f aef7 	beq.w	80045c6 <_printf_float+0xbe>
 80047d8:	f109 0901 	add.w	r9, r9, #1
 80047dc:	e7ee      	b.n	80047bc <_printf_float+0x2b4>
 80047de:	bf00      	nop
 80047e0:	7fefffff 	.word	0x7fefffff
 80047e4:	080076c4 	.word	0x080076c4
 80047e8:	080076c8 	.word	0x080076c8
 80047ec:	080076cc 	.word	0x080076cc
 80047f0:	080076d0 	.word	0x080076d0
 80047f4:	080076d4 	.word	0x080076d4
 80047f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047fc:	429a      	cmp	r2, r3
 80047fe:	bfa8      	it	ge
 8004800:	461a      	movge	r2, r3
 8004802:	2a00      	cmp	r2, #0
 8004804:	4691      	mov	r9, r2
 8004806:	dc37      	bgt.n	8004878 <_printf_float+0x370>
 8004808:	f04f 0b00 	mov.w	fp, #0
 800480c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004810:	f104 021a 	add.w	r2, r4, #26
 8004814:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004816:	9305      	str	r3, [sp, #20]
 8004818:	eba3 0309 	sub.w	r3, r3, r9
 800481c:	455b      	cmp	r3, fp
 800481e:	dc33      	bgt.n	8004888 <_printf_float+0x380>
 8004820:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004824:	429a      	cmp	r2, r3
 8004826:	db3b      	blt.n	80048a0 <_printf_float+0x398>
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	07da      	lsls	r2, r3, #31
 800482c:	d438      	bmi.n	80048a0 <_printf_float+0x398>
 800482e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004832:	eba2 0903 	sub.w	r9, r2, r3
 8004836:	9b05      	ldr	r3, [sp, #20]
 8004838:	1ad2      	subs	r2, r2, r3
 800483a:	4591      	cmp	r9, r2
 800483c:	bfa8      	it	ge
 800483e:	4691      	movge	r9, r2
 8004840:	f1b9 0f00 	cmp.w	r9, #0
 8004844:	dc35      	bgt.n	80048b2 <_printf_float+0x3aa>
 8004846:	f04f 0800 	mov.w	r8, #0
 800484a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800484e:	f104 0a1a 	add.w	sl, r4, #26
 8004852:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004856:	1a9b      	subs	r3, r3, r2
 8004858:	eba3 0309 	sub.w	r3, r3, r9
 800485c:	4543      	cmp	r3, r8
 800485e:	f77f af79 	ble.w	8004754 <_printf_float+0x24c>
 8004862:	2301      	movs	r3, #1
 8004864:	4652      	mov	r2, sl
 8004866:	4631      	mov	r1, r6
 8004868:	4628      	mov	r0, r5
 800486a:	47b8      	blx	r7
 800486c:	3001      	adds	r0, #1
 800486e:	f43f aeaa 	beq.w	80045c6 <_printf_float+0xbe>
 8004872:	f108 0801 	add.w	r8, r8, #1
 8004876:	e7ec      	b.n	8004852 <_printf_float+0x34a>
 8004878:	4613      	mov	r3, r2
 800487a:	4631      	mov	r1, r6
 800487c:	4642      	mov	r2, r8
 800487e:	4628      	mov	r0, r5
 8004880:	47b8      	blx	r7
 8004882:	3001      	adds	r0, #1
 8004884:	d1c0      	bne.n	8004808 <_printf_float+0x300>
 8004886:	e69e      	b.n	80045c6 <_printf_float+0xbe>
 8004888:	2301      	movs	r3, #1
 800488a:	4631      	mov	r1, r6
 800488c:	4628      	mov	r0, r5
 800488e:	9205      	str	r2, [sp, #20]
 8004890:	47b8      	blx	r7
 8004892:	3001      	adds	r0, #1
 8004894:	f43f ae97 	beq.w	80045c6 <_printf_float+0xbe>
 8004898:	9a05      	ldr	r2, [sp, #20]
 800489a:	f10b 0b01 	add.w	fp, fp, #1
 800489e:	e7b9      	b.n	8004814 <_printf_float+0x30c>
 80048a0:	ee18 3a10 	vmov	r3, s16
 80048a4:	4652      	mov	r2, sl
 80048a6:	4631      	mov	r1, r6
 80048a8:	4628      	mov	r0, r5
 80048aa:	47b8      	blx	r7
 80048ac:	3001      	adds	r0, #1
 80048ae:	d1be      	bne.n	800482e <_printf_float+0x326>
 80048b0:	e689      	b.n	80045c6 <_printf_float+0xbe>
 80048b2:	9a05      	ldr	r2, [sp, #20]
 80048b4:	464b      	mov	r3, r9
 80048b6:	4442      	add	r2, r8
 80048b8:	4631      	mov	r1, r6
 80048ba:	4628      	mov	r0, r5
 80048bc:	47b8      	blx	r7
 80048be:	3001      	adds	r0, #1
 80048c0:	d1c1      	bne.n	8004846 <_printf_float+0x33e>
 80048c2:	e680      	b.n	80045c6 <_printf_float+0xbe>
 80048c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048c6:	2a01      	cmp	r2, #1
 80048c8:	dc01      	bgt.n	80048ce <_printf_float+0x3c6>
 80048ca:	07db      	lsls	r3, r3, #31
 80048cc:	d53a      	bpl.n	8004944 <_printf_float+0x43c>
 80048ce:	2301      	movs	r3, #1
 80048d0:	4642      	mov	r2, r8
 80048d2:	4631      	mov	r1, r6
 80048d4:	4628      	mov	r0, r5
 80048d6:	47b8      	blx	r7
 80048d8:	3001      	adds	r0, #1
 80048da:	f43f ae74 	beq.w	80045c6 <_printf_float+0xbe>
 80048de:	ee18 3a10 	vmov	r3, s16
 80048e2:	4652      	mov	r2, sl
 80048e4:	4631      	mov	r1, r6
 80048e6:	4628      	mov	r0, r5
 80048e8:	47b8      	blx	r7
 80048ea:	3001      	adds	r0, #1
 80048ec:	f43f ae6b 	beq.w	80045c6 <_printf_float+0xbe>
 80048f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048f4:	2200      	movs	r2, #0
 80048f6:	2300      	movs	r3, #0
 80048f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80048fc:	f7fc f8ec 	bl	8000ad8 <__aeabi_dcmpeq>
 8004900:	b9d8      	cbnz	r0, 800493a <_printf_float+0x432>
 8004902:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004906:	f108 0201 	add.w	r2, r8, #1
 800490a:	4631      	mov	r1, r6
 800490c:	4628      	mov	r0, r5
 800490e:	47b8      	blx	r7
 8004910:	3001      	adds	r0, #1
 8004912:	d10e      	bne.n	8004932 <_printf_float+0x42a>
 8004914:	e657      	b.n	80045c6 <_printf_float+0xbe>
 8004916:	2301      	movs	r3, #1
 8004918:	4652      	mov	r2, sl
 800491a:	4631      	mov	r1, r6
 800491c:	4628      	mov	r0, r5
 800491e:	47b8      	blx	r7
 8004920:	3001      	adds	r0, #1
 8004922:	f43f ae50 	beq.w	80045c6 <_printf_float+0xbe>
 8004926:	f108 0801 	add.w	r8, r8, #1
 800492a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800492c:	3b01      	subs	r3, #1
 800492e:	4543      	cmp	r3, r8
 8004930:	dcf1      	bgt.n	8004916 <_printf_float+0x40e>
 8004932:	464b      	mov	r3, r9
 8004934:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004938:	e6da      	b.n	80046f0 <_printf_float+0x1e8>
 800493a:	f04f 0800 	mov.w	r8, #0
 800493e:	f104 0a1a 	add.w	sl, r4, #26
 8004942:	e7f2      	b.n	800492a <_printf_float+0x422>
 8004944:	2301      	movs	r3, #1
 8004946:	4642      	mov	r2, r8
 8004948:	e7df      	b.n	800490a <_printf_float+0x402>
 800494a:	2301      	movs	r3, #1
 800494c:	464a      	mov	r2, r9
 800494e:	4631      	mov	r1, r6
 8004950:	4628      	mov	r0, r5
 8004952:	47b8      	blx	r7
 8004954:	3001      	adds	r0, #1
 8004956:	f43f ae36 	beq.w	80045c6 <_printf_float+0xbe>
 800495a:	f108 0801 	add.w	r8, r8, #1
 800495e:	68e3      	ldr	r3, [r4, #12]
 8004960:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004962:	1a5b      	subs	r3, r3, r1
 8004964:	4543      	cmp	r3, r8
 8004966:	dcf0      	bgt.n	800494a <_printf_float+0x442>
 8004968:	e6f8      	b.n	800475c <_printf_float+0x254>
 800496a:	f04f 0800 	mov.w	r8, #0
 800496e:	f104 0919 	add.w	r9, r4, #25
 8004972:	e7f4      	b.n	800495e <_printf_float+0x456>

08004974 <_printf_common>:
 8004974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004978:	4616      	mov	r6, r2
 800497a:	4699      	mov	r9, r3
 800497c:	688a      	ldr	r2, [r1, #8]
 800497e:	690b      	ldr	r3, [r1, #16]
 8004980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004984:	4293      	cmp	r3, r2
 8004986:	bfb8      	it	lt
 8004988:	4613      	movlt	r3, r2
 800498a:	6033      	str	r3, [r6, #0]
 800498c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004990:	4607      	mov	r7, r0
 8004992:	460c      	mov	r4, r1
 8004994:	b10a      	cbz	r2, 800499a <_printf_common+0x26>
 8004996:	3301      	adds	r3, #1
 8004998:	6033      	str	r3, [r6, #0]
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	0699      	lsls	r1, r3, #26
 800499e:	bf42      	ittt	mi
 80049a0:	6833      	ldrmi	r3, [r6, #0]
 80049a2:	3302      	addmi	r3, #2
 80049a4:	6033      	strmi	r3, [r6, #0]
 80049a6:	6825      	ldr	r5, [r4, #0]
 80049a8:	f015 0506 	ands.w	r5, r5, #6
 80049ac:	d106      	bne.n	80049bc <_printf_common+0x48>
 80049ae:	f104 0a19 	add.w	sl, r4, #25
 80049b2:	68e3      	ldr	r3, [r4, #12]
 80049b4:	6832      	ldr	r2, [r6, #0]
 80049b6:	1a9b      	subs	r3, r3, r2
 80049b8:	42ab      	cmp	r3, r5
 80049ba:	dc26      	bgt.n	8004a0a <_printf_common+0x96>
 80049bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049c0:	1e13      	subs	r3, r2, #0
 80049c2:	6822      	ldr	r2, [r4, #0]
 80049c4:	bf18      	it	ne
 80049c6:	2301      	movne	r3, #1
 80049c8:	0692      	lsls	r2, r2, #26
 80049ca:	d42b      	bmi.n	8004a24 <_printf_common+0xb0>
 80049cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049d0:	4649      	mov	r1, r9
 80049d2:	4638      	mov	r0, r7
 80049d4:	47c0      	blx	r8
 80049d6:	3001      	adds	r0, #1
 80049d8:	d01e      	beq.n	8004a18 <_printf_common+0xa4>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	6922      	ldr	r2, [r4, #16]
 80049de:	f003 0306 	and.w	r3, r3, #6
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	bf02      	ittt	eq
 80049e6:	68e5      	ldreq	r5, [r4, #12]
 80049e8:	6833      	ldreq	r3, [r6, #0]
 80049ea:	1aed      	subeq	r5, r5, r3
 80049ec:	68a3      	ldr	r3, [r4, #8]
 80049ee:	bf0c      	ite	eq
 80049f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049f4:	2500      	movne	r5, #0
 80049f6:	4293      	cmp	r3, r2
 80049f8:	bfc4      	itt	gt
 80049fa:	1a9b      	subgt	r3, r3, r2
 80049fc:	18ed      	addgt	r5, r5, r3
 80049fe:	2600      	movs	r6, #0
 8004a00:	341a      	adds	r4, #26
 8004a02:	42b5      	cmp	r5, r6
 8004a04:	d11a      	bne.n	8004a3c <_printf_common+0xc8>
 8004a06:	2000      	movs	r0, #0
 8004a08:	e008      	b.n	8004a1c <_printf_common+0xa8>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	4652      	mov	r2, sl
 8004a0e:	4649      	mov	r1, r9
 8004a10:	4638      	mov	r0, r7
 8004a12:	47c0      	blx	r8
 8004a14:	3001      	adds	r0, #1
 8004a16:	d103      	bne.n	8004a20 <_printf_common+0xac>
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a20:	3501      	adds	r5, #1
 8004a22:	e7c6      	b.n	80049b2 <_printf_common+0x3e>
 8004a24:	18e1      	adds	r1, r4, r3
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	2030      	movs	r0, #48	; 0x30
 8004a2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a2e:	4422      	add	r2, r4
 8004a30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a38:	3302      	adds	r3, #2
 8004a3a:	e7c7      	b.n	80049cc <_printf_common+0x58>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	4622      	mov	r2, r4
 8004a40:	4649      	mov	r1, r9
 8004a42:	4638      	mov	r0, r7
 8004a44:	47c0      	blx	r8
 8004a46:	3001      	adds	r0, #1
 8004a48:	d0e6      	beq.n	8004a18 <_printf_common+0xa4>
 8004a4a:	3601      	adds	r6, #1
 8004a4c:	e7d9      	b.n	8004a02 <_printf_common+0x8e>
	...

08004a50 <_printf_i>:
 8004a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a54:	7e0f      	ldrb	r7, [r1, #24]
 8004a56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a58:	2f78      	cmp	r7, #120	; 0x78
 8004a5a:	4691      	mov	r9, r2
 8004a5c:	4680      	mov	r8, r0
 8004a5e:	460c      	mov	r4, r1
 8004a60:	469a      	mov	sl, r3
 8004a62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a66:	d807      	bhi.n	8004a78 <_printf_i+0x28>
 8004a68:	2f62      	cmp	r7, #98	; 0x62
 8004a6a:	d80a      	bhi.n	8004a82 <_printf_i+0x32>
 8004a6c:	2f00      	cmp	r7, #0
 8004a6e:	f000 80d4 	beq.w	8004c1a <_printf_i+0x1ca>
 8004a72:	2f58      	cmp	r7, #88	; 0x58
 8004a74:	f000 80c0 	beq.w	8004bf8 <_printf_i+0x1a8>
 8004a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a80:	e03a      	b.n	8004af8 <_printf_i+0xa8>
 8004a82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a86:	2b15      	cmp	r3, #21
 8004a88:	d8f6      	bhi.n	8004a78 <_printf_i+0x28>
 8004a8a:	a101      	add	r1, pc, #4	; (adr r1, 8004a90 <_printf_i+0x40>)
 8004a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a90:	08004ae9 	.word	0x08004ae9
 8004a94:	08004afd 	.word	0x08004afd
 8004a98:	08004a79 	.word	0x08004a79
 8004a9c:	08004a79 	.word	0x08004a79
 8004aa0:	08004a79 	.word	0x08004a79
 8004aa4:	08004a79 	.word	0x08004a79
 8004aa8:	08004afd 	.word	0x08004afd
 8004aac:	08004a79 	.word	0x08004a79
 8004ab0:	08004a79 	.word	0x08004a79
 8004ab4:	08004a79 	.word	0x08004a79
 8004ab8:	08004a79 	.word	0x08004a79
 8004abc:	08004c01 	.word	0x08004c01
 8004ac0:	08004b29 	.word	0x08004b29
 8004ac4:	08004bbb 	.word	0x08004bbb
 8004ac8:	08004a79 	.word	0x08004a79
 8004acc:	08004a79 	.word	0x08004a79
 8004ad0:	08004c23 	.word	0x08004c23
 8004ad4:	08004a79 	.word	0x08004a79
 8004ad8:	08004b29 	.word	0x08004b29
 8004adc:	08004a79 	.word	0x08004a79
 8004ae0:	08004a79 	.word	0x08004a79
 8004ae4:	08004bc3 	.word	0x08004bc3
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	1d1a      	adds	r2, r3, #4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	602a      	str	r2, [r5, #0]
 8004af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004af4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004af8:	2301      	movs	r3, #1
 8004afa:	e09f      	b.n	8004c3c <_printf_i+0x1ec>
 8004afc:	6820      	ldr	r0, [r4, #0]
 8004afe:	682b      	ldr	r3, [r5, #0]
 8004b00:	0607      	lsls	r7, r0, #24
 8004b02:	f103 0104 	add.w	r1, r3, #4
 8004b06:	6029      	str	r1, [r5, #0]
 8004b08:	d501      	bpl.n	8004b0e <_printf_i+0xbe>
 8004b0a:	681e      	ldr	r6, [r3, #0]
 8004b0c:	e003      	b.n	8004b16 <_printf_i+0xc6>
 8004b0e:	0646      	lsls	r6, r0, #25
 8004b10:	d5fb      	bpl.n	8004b0a <_printf_i+0xba>
 8004b12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004b16:	2e00      	cmp	r6, #0
 8004b18:	da03      	bge.n	8004b22 <_printf_i+0xd2>
 8004b1a:	232d      	movs	r3, #45	; 0x2d
 8004b1c:	4276      	negs	r6, r6
 8004b1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b22:	485a      	ldr	r0, [pc, #360]	; (8004c8c <_printf_i+0x23c>)
 8004b24:	230a      	movs	r3, #10
 8004b26:	e012      	b.n	8004b4e <_printf_i+0xfe>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	6820      	ldr	r0, [r4, #0]
 8004b2c:	1d19      	adds	r1, r3, #4
 8004b2e:	6029      	str	r1, [r5, #0]
 8004b30:	0605      	lsls	r5, r0, #24
 8004b32:	d501      	bpl.n	8004b38 <_printf_i+0xe8>
 8004b34:	681e      	ldr	r6, [r3, #0]
 8004b36:	e002      	b.n	8004b3e <_printf_i+0xee>
 8004b38:	0641      	lsls	r1, r0, #25
 8004b3a:	d5fb      	bpl.n	8004b34 <_printf_i+0xe4>
 8004b3c:	881e      	ldrh	r6, [r3, #0]
 8004b3e:	4853      	ldr	r0, [pc, #332]	; (8004c8c <_printf_i+0x23c>)
 8004b40:	2f6f      	cmp	r7, #111	; 0x6f
 8004b42:	bf0c      	ite	eq
 8004b44:	2308      	moveq	r3, #8
 8004b46:	230a      	movne	r3, #10
 8004b48:	2100      	movs	r1, #0
 8004b4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b4e:	6865      	ldr	r5, [r4, #4]
 8004b50:	60a5      	str	r5, [r4, #8]
 8004b52:	2d00      	cmp	r5, #0
 8004b54:	bfa2      	ittt	ge
 8004b56:	6821      	ldrge	r1, [r4, #0]
 8004b58:	f021 0104 	bicge.w	r1, r1, #4
 8004b5c:	6021      	strge	r1, [r4, #0]
 8004b5e:	b90e      	cbnz	r6, 8004b64 <_printf_i+0x114>
 8004b60:	2d00      	cmp	r5, #0
 8004b62:	d04b      	beq.n	8004bfc <_printf_i+0x1ac>
 8004b64:	4615      	mov	r5, r2
 8004b66:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b6a:	fb03 6711 	mls	r7, r3, r1, r6
 8004b6e:	5dc7      	ldrb	r7, [r0, r7]
 8004b70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b74:	4637      	mov	r7, r6
 8004b76:	42bb      	cmp	r3, r7
 8004b78:	460e      	mov	r6, r1
 8004b7a:	d9f4      	bls.n	8004b66 <_printf_i+0x116>
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d10b      	bne.n	8004b98 <_printf_i+0x148>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	07de      	lsls	r6, r3, #31
 8004b84:	d508      	bpl.n	8004b98 <_printf_i+0x148>
 8004b86:	6923      	ldr	r3, [r4, #16]
 8004b88:	6861      	ldr	r1, [r4, #4]
 8004b8a:	4299      	cmp	r1, r3
 8004b8c:	bfde      	ittt	le
 8004b8e:	2330      	movle	r3, #48	; 0x30
 8004b90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b98:	1b52      	subs	r2, r2, r5
 8004b9a:	6122      	str	r2, [r4, #16]
 8004b9c:	f8cd a000 	str.w	sl, [sp]
 8004ba0:	464b      	mov	r3, r9
 8004ba2:	aa03      	add	r2, sp, #12
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	4640      	mov	r0, r8
 8004ba8:	f7ff fee4 	bl	8004974 <_printf_common>
 8004bac:	3001      	adds	r0, #1
 8004bae:	d14a      	bne.n	8004c46 <_printf_i+0x1f6>
 8004bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb4:	b004      	add	sp, #16
 8004bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	f043 0320 	orr.w	r3, r3, #32
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	4833      	ldr	r0, [pc, #204]	; (8004c90 <_printf_i+0x240>)
 8004bc4:	2778      	movs	r7, #120	; 0x78
 8004bc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	6829      	ldr	r1, [r5, #0]
 8004bce:	061f      	lsls	r7, r3, #24
 8004bd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bd4:	d402      	bmi.n	8004bdc <_printf_i+0x18c>
 8004bd6:	065f      	lsls	r7, r3, #25
 8004bd8:	bf48      	it	mi
 8004bda:	b2b6      	uxthmi	r6, r6
 8004bdc:	07df      	lsls	r7, r3, #31
 8004bde:	bf48      	it	mi
 8004be0:	f043 0320 	orrmi.w	r3, r3, #32
 8004be4:	6029      	str	r1, [r5, #0]
 8004be6:	bf48      	it	mi
 8004be8:	6023      	strmi	r3, [r4, #0]
 8004bea:	b91e      	cbnz	r6, 8004bf4 <_printf_i+0x1a4>
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	f023 0320 	bic.w	r3, r3, #32
 8004bf2:	6023      	str	r3, [r4, #0]
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	e7a7      	b.n	8004b48 <_printf_i+0xf8>
 8004bf8:	4824      	ldr	r0, [pc, #144]	; (8004c8c <_printf_i+0x23c>)
 8004bfa:	e7e4      	b.n	8004bc6 <_printf_i+0x176>
 8004bfc:	4615      	mov	r5, r2
 8004bfe:	e7bd      	b.n	8004b7c <_printf_i+0x12c>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	6826      	ldr	r6, [r4, #0]
 8004c04:	6961      	ldr	r1, [r4, #20]
 8004c06:	1d18      	adds	r0, r3, #4
 8004c08:	6028      	str	r0, [r5, #0]
 8004c0a:	0635      	lsls	r5, r6, #24
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	d501      	bpl.n	8004c14 <_printf_i+0x1c4>
 8004c10:	6019      	str	r1, [r3, #0]
 8004c12:	e002      	b.n	8004c1a <_printf_i+0x1ca>
 8004c14:	0670      	lsls	r0, r6, #25
 8004c16:	d5fb      	bpl.n	8004c10 <_printf_i+0x1c0>
 8004c18:	8019      	strh	r1, [r3, #0]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	6123      	str	r3, [r4, #16]
 8004c1e:	4615      	mov	r5, r2
 8004c20:	e7bc      	b.n	8004b9c <_printf_i+0x14c>
 8004c22:	682b      	ldr	r3, [r5, #0]
 8004c24:	1d1a      	adds	r2, r3, #4
 8004c26:	602a      	str	r2, [r5, #0]
 8004c28:	681d      	ldr	r5, [r3, #0]
 8004c2a:	6862      	ldr	r2, [r4, #4]
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f7fb fad6 	bl	80001e0 <memchr>
 8004c34:	b108      	cbz	r0, 8004c3a <_printf_i+0x1ea>
 8004c36:	1b40      	subs	r0, r0, r5
 8004c38:	6060      	str	r0, [r4, #4]
 8004c3a:	6863      	ldr	r3, [r4, #4]
 8004c3c:	6123      	str	r3, [r4, #16]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c44:	e7aa      	b.n	8004b9c <_printf_i+0x14c>
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	462a      	mov	r2, r5
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	4640      	mov	r0, r8
 8004c4e:	47d0      	blx	sl
 8004c50:	3001      	adds	r0, #1
 8004c52:	d0ad      	beq.n	8004bb0 <_printf_i+0x160>
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	079b      	lsls	r3, r3, #30
 8004c58:	d413      	bmi.n	8004c82 <_printf_i+0x232>
 8004c5a:	68e0      	ldr	r0, [r4, #12]
 8004c5c:	9b03      	ldr	r3, [sp, #12]
 8004c5e:	4298      	cmp	r0, r3
 8004c60:	bfb8      	it	lt
 8004c62:	4618      	movlt	r0, r3
 8004c64:	e7a6      	b.n	8004bb4 <_printf_i+0x164>
 8004c66:	2301      	movs	r3, #1
 8004c68:	4632      	mov	r2, r6
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	4640      	mov	r0, r8
 8004c6e:	47d0      	blx	sl
 8004c70:	3001      	adds	r0, #1
 8004c72:	d09d      	beq.n	8004bb0 <_printf_i+0x160>
 8004c74:	3501      	adds	r5, #1
 8004c76:	68e3      	ldr	r3, [r4, #12]
 8004c78:	9903      	ldr	r1, [sp, #12]
 8004c7a:	1a5b      	subs	r3, r3, r1
 8004c7c:	42ab      	cmp	r3, r5
 8004c7e:	dcf2      	bgt.n	8004c66 <_printf_i+0x216>
 8004c80:	e7eb      	b.n	8004c5a <_printf_i+0x20a>
 8004c82:	2500      	movs	r5, #0
 8004c84:	f104 0619 	add.w	r6, r4, #25
 8004c88:	e7f5      	b.n	8004c76 <_printf_i+0x226>
 8004c8a:	bf00      	nop
 8004c8c:	080076d6 	.word	0x080076d6
 8004c90:	080076e7 	.word	0x080076e7

08004c94 <std>:
 8004c94:	2300      	movs	r3, #0
 8004c96:	b510      	push	{r4, lr}
 8004c98:	4604      	mov	r4, r0
 8004c9a:	e9c0 3300 	strd	r3, r3, [r0]
 8004c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ca2:	6083      	str	r3, [r0, #8]
 8004ca4:	8181      	strh	r1, [r0, #12]
 8004ca6:	6643      	str	r3, [r0, #100]	; 0x64
 8004ca8:	81c2      	strh	r2, [r0, #14]
 8004caa:	6183      	str	r3, [r0, #24]
 8004cac:	4619      	mov	r1, r3
 8004cae:	2208      	movs	r2, #8
 8004cb0:	305c      	adds	r0, #92	; 0x5c
 8004cb2:	f000 f9ff 	bl	80050b4 <memset>
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <std+0x58>)
 8004cb8:	6263      	str	r3, [r4, #36]	; 0x24
 8004cba:	4b0d      	ldr	r3, [pc, #52]	; (8004cf0 <std+0x5c>)
 8004cbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <std+0x60>)
 8004cc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <std+0x64>)
 8004cc4:	6323      	str	r3, [r4, #48]	; 0x30
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <std+0x68>)
 8004cc8:	6224      	str	r4, [r4, #32]
 8004cca:	429c      	cmp	r4, r3
 8004ccc:	d006      	beq.n	8004cdc <std+0x48>
 8004cce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004cd2:	4294      	cmp	r4, r2
 8004cd4:	d002      	beq.n	8004cdc <std+0x48>
 8004cd6:	33d0      	adds	r3, #208	; 0xd0
 8004cd8:	429c      	cmp	r4, r3
 8004cda:	d105      	bne.n	8004ce8 <std+0x54>
 8004cdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ce4:	f000 ba62 	b.w	80051ac <__retarget_lock_init_recursive>
 8004ce8:	bd10      	pop	{r4, pc}
 8004cea:	bf00      	nop
 8004cec:	08004f05 	.word	0x08004f05
 8004cf0:	08004f27 	.word	0x08004f27
 8004cf4:	08004f5f 	.word	0x08004f5f
 8004cf8:	08004f83 	.word	0x08004f83
 8004cfc:	20000f58 	.word	0x20000f58

08004d00 <stdio_exit_handler>:
 8004d00:	4a02      	ldr	r2, [pc, #8]	; (8004d0c <stdio_exit_handler+0xc>)
 8004d02:	4903      	ldr	r1, [pc, #12]	; (8004d10 <stdio_exit_handler+0x10>)
 8004d04:	4803      	ldr	r0, [pc, #12]	; (8004d14 <stdio_exit_handler+0x14>)
 8004d06:	f000 b869 	b.w	8004ddc <_fwalk_sglue>
 8004d0a:	bf00      	nop
 8004d0c:	2000001c 	.word	0x2000001c
 8004d10:	08006b39 	.word	0x08006b39
 8004d14:	20000028 	.word	0x20000028

08004d18 <cleanup_stdio>:
 8004d18:	6841      	ldr	r1, [r0, #4]
 8004d1a:	4b0c      	ldr	r3, [pc, #48]	; (8004d4c <cleanup_stdio+0x34>)
 8004d1c:	4299      	cmp	r1, r3
 8004d1e:	b510      	push	{r4, lr}
 8004d20:	4604      	mov	r4, r0
 8004d22:	d001      	beq.n	8004d28 <cleanup_stdio+0x10>
 8004d24:	f001 ff08 	bl	8006b38 <_fflush_r>
 8004d28:	68a1      	ldr	r1, [r4, #8]
 8004d2a:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <cleanup_stdio+0x38>)
 8004d2c:	4299      	cmp	r1, r3
 8004d2e:	d002      	beq.n	8004d36 <cleanup_stdio+0x1e>
 8004d30:	4620      	mov	r0, r4
 8004d32:	f001 ff01 	bl	8006b38 <_fflush_r>
 8004d36:	68e1      	ldr	r1, [r4, #12]
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <cleanup_stdio+0x3c>)
 8004d3a:	4299      	cmp	r1, r3
 8004d3c:	d004      	beq.n	8004d48 <cleanup_stdio+0x30>
 8004d3e:	4620      	mov	r0, r4
 8004d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d44:	f001 bef8 	b.w	8006b38 <_fflush_r>
 8004d48:	bd10      	pop	{r4, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000f58 	.word	0x20000f58
 8004d50:	20000fc0 	.word	0x20000fc0
 8004d54:	20001028 	.word	0x20001028

08004d58 <global_stdio_init.part.0>:
 8004d58:	b510      	push	{r4, lr}
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <global_stdio_init.part.0+0x30>)
 8004d5c:	4c0b      	ldr	r4, [pc, #44]	; (8004d8c <global_stdio_init.part.0+0x34>)
 8004d5e:	4a0c      	ldr	r2, [pc, #48]	; (8004d90 <global_stdio_init.part.0+0x38>)
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	4620      	mov	r0, r4
 8004d64:	2200      	movs	r2, #0
 8004d66:	2104      	movs	r1, #4
 8004d68:	f7ff ff94 	bl	8004c94 <std>
 8004d6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004d70:	2201      	movs	r2, #1
 8004d72:	2109      	movs	r1, #9
 8004d74:	f7ff ff8e 	bl	8004c94 <std>
 8004d78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d82:	2112      	movs	r1, #18
 8004d84:	f7ff bf86 	b.w	8004c94 <std>
 8004d88:	20001090 	.word	0x20001090
 8004d8c:	20000f58 	.word	0x20000f58
 8004d90:	08004d01 	.word	0x08004d01

08004d94 <__sfp_lock_acquire>:
 8004d94:	4801      	ldr	r0, [pc, #4]	; (8004d9c <__sfp_lock_acquire+0x8>)
 8004d96:	f000 ba0a 	b.w	80051ae <__retarget_lock_acquire_recursive>
 8004d9a:	bf00      	nop
 8004d9c:	20001099 	.word	0x20001099

08004da0 <__sfp_lock_release>:
 8004da0:	4801      	ldr	r0, [pc, #4]	; (8004da8 <__sfp_lock_release+0x8>)
 8004da2:	f000 ba05 	b.w	80051b0 <__retarget_lock_release_recursive>
 8004da6:	bf00      	nop
 8004da8:	20001099 	.word	0x20001099

08004dac <__sinit>:
 8004dac:	b510      	push	{r4, lr}
 8004dae:	4604      	mov	r4, r0
 8004db0:	f7ff fff0 	bl	8004d94 <__sfp_lock_acquire>
 8004db4:	6a23      	ldr	r3, [r4, #32]
 8004db6:	b11b      	cbz	r3, 8004dc0 <__sinit+0x14>
 8004db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dbc:	f7ff bff0 	b.w	8004da0 <__sfp_lock_release>
 8004dc0:	4b04      	ldr	r3, [pc, #16]	; (8004dd4 <__sinit+0x28>)
 8004dc2:	6223      	str	r3, [r4, #32]
 8004dc4:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <__sinit+0x2c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1f5      	bne.n	8004db8 <__sinit+0xc>
 8004dcc:	f7ff ffc4 	bl	8004d58 <global_stdio_init.part.0>
 8004dd0:	e7f2      	b.n	8004db8 <__sinit+0xc>
 8004dd2:	bf00      	nop
 8004dd4:	08004d19 	.word	0x08004d19
 8004dd8:	20001090 	.word	0x20001090

08004ddc <_fwalk_sglue>:
 8004ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004de0:	4607      	mov	r7, r0
 8004de2:	4688      	mov	r8, r1
 8004de4:	4614      	mov	r4, r2
 8004de6:	2600      	movs	r6, #0
 8004de8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004dec:	f1b9 0901 	subs.w	r9, r9, #1
 8004df0:	d505      	bpl.n	8004dfe <_fwalk_sglue+0x22>
 8004df2:	6824      	ldr	r4, [r4, #0]
 8004df4:	2c00      	cmp	r4, #0
 8004df6:	d1f7      	bne.n	8004de8 <_fwalk_sglue+0xc>
 8004df8:	4630      	mov	r0, r6
 8004dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dfe:	89ab      	ldrh	r3, [r5, #12]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d907      	bls.n	8004e14 <_fwalk_sglue+0x38>
 8004e04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	d003      	beq.n	8004e14 <_fwalk_sglue+0x38>
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	4638      	mov	r0, r7
 8004e10:	47c0      	blx	r8
 8004e12:	4306      	orrs	r6, r0
 8004e14:	3568      	adds	r5, #104	; 0x68
 8004e16:	e7e9      	b.n	8004dec <_fwalk_sglue+0x10>

08004e18 <iprintf>:
 8004e18:	b40f      	push	{r0, r1, r2, r3}
 8004e1a:	b507      	push	{r0, r1, r2, lr}
 8004e1c:	4906      	ldr	r1, [pc, #24]	; (8004e38 <iprintf+0x20>)
 8004e1e:	ab04      	add	r3, sp, #16
 8004e20:	6808      	ldr	r0, [r1, #0]
 8004e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e26:	6881      	ldr	r1, [r0, #8]
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	f001 fce5 	bl	80067f8 <_vfiprintf_r>
 8004e2e:	b003      	add	sp, #12
 8004e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e34:	b004      	add	sp, #16
 8004e36:	4770      	bx	lr
 8004e38:	20000074 	.word	0x20000074

08004e3c <putchar>:
 8004e3c:	4b02      	ldr	r3, [pc, #8]	; (8004e48 <putchar+0xc>)
 8004e3e:	4601      	mov	r1, r0
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	6882      	ldr	r2, [r0, #8]
 8004e44:	f001 bf02 	b.w	8006c4c <_putc_r>
 8004e48:	20000074 	.word	0x20000074

08004e4c <_puts_r>:
 8004e4c:	6a03      	ldr	r3, [r0, #32]
 8004e4e:	b570      	push	{r4, r5, r6, lr}
 8004e50:	6884      	ldr	r4, [r0, #8]
 8004e52:	4605      	mov	r5, r0
 8004e54:	460e      	mov	r6, r1
 8004e56:	b90b      	cbnz	r3, 8004e5c <_puts_r+0x10>
 8004e58:	f7ff ffa8 	bl	8004dac <__sinit>
 8004e5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e5e:	07db      	lsls	r3, r3, #31
 8004e60:	d405      	bmi.n	8004e6e <_puts_r+0x22>
 8004e62:	89a3      	ldrh	r3, [r4, #12]
 8004e64:	0598      	lsls	r0, r3, #22
 8004e66:	d402      	bmi.n	8004e6e <_puts_r+0x22>
 8004e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e6a:	f000 f9a0 	bl	80051ae <__retarget_lock_acquire_recursive>
 8004e6e:	89a3      	ldrh	r3, [r4, #12]
 8004e70:	0719      	lsls	r1, r3, #28
 8004e72:	d513      	bpl.n	8004e9c <_puts_r+0x50>
 8004e74:	6923      	ldr	r3, [r4, #16]
 8004e76:	b18b      	cbz	r3, 8004e9c <_puts_r+0x50>
 8004e78:	3e01      	subs	r6, #1
 8004e7a:	68a3      	ldr	r3, [r4, #8]
 8004e7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e80:	3b01      	subs	r3, #1
 8004e82:	60a3      	str	r3, [r4, #8]
 8004e84:	b9e9      	cbnz	r1, 8004ec2 <_puts_r+0x76>
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	da2e      	bge.n	8004ee8 <_puts_r+0x9c>
 8004e8a:	4622      	mov	r2, r4
 8004e8c:	210a      	movs	r1, #10
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 f87b 	bl	8004f8a <__swbuf_r>
 8004e94:	3001      	adds	r0, #1
 8004e96:	d007      	beq.n	8004ea8 <_puts_r+0x5c>
 8004e98:	250a      	movs	r5, #10
 8004e9a:	e007      	b.n	8004eac <_puts_r+0x60>
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f000 f8b0 	bl	8005004 <__swsetup_r>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d0e7      	beq.n	8004e78 <_puts_r+0x2c>
 8004ea8:	f04f 35ff 	mov.w	r5, #4294967295
 8004eac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eae:	07da      	lsls	r2, r3, #31
 8004eb0:	d405      	bmi.n	8004ebe <_puts_r+0x72>
 8004eb2:	89a3      	ldrh	r3, [r4, #12]
 8004eb4:	059b      	lsls	r3, r3, #22
 8004eb6:	d402      	bmi.n	8004ebe <_puts_r+0x72>
 8004eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eba:	f000 f979 	bl	80051b0 <__retarget_lock_release_recursive>
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	bd70      	pop	{r4, r5, r6, pc}
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	da04      	bge.n	8004ed0 <_puts_r+0x84>
 8004ec6:	69a2      	ldr	r2, [r4, #24]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	dc06      	bgt.n	8004eda <_puts_r+0x8e>
 8004ecc:	290a      	cmp	r1, #10
 8004ece:	d004      	beq.n	8004eda <_puts_r+0x8e>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	6022      	str	r2, [r4, #0]
 8004ed6:	7019      	strb	r1, [r3, #0]
 8004ed8:	e7cf      	b.n	8004e7a <_puts_r+0x2e>
 8004eda:	4622      	mov	r2, r4
 8004edc:	4628      	mov	r0, r5
 8004ede:	f000 f854 	bl	8004f8a <__swbuf_r>
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	d1c9      	bne.n	8004e7a <_puts_r+0x2e>
 8004ee6:	e7df      	b.n	8004ea8 <_puts_r+0x5c>
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	250a      	movs	r5, #10
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	6022      	str	r2, [r4, #0]
 8004ef0:	701d      	strb	r5, [r3, #0]
 8004ef2:	e7db      	b.n	8004eac <_puts_r+0x60>

08004ef4 <puts>:
 8004ef4:	4b02      	ldr	r3, [pc, #8]	; (8004f00 <puts+0xc>)
 8004ef6:	4601      	mov	r1, r0
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	f7ff bfa7 	b.w	8004e4c <_puts_r>
 8004efe:	bf00      	nop
 8004f00:	20000074 	.word	0x20000074

08004f04 <__sread>:
 8004f04:	b510      	push	{r4, lr}
 8004f06:	460c      	mov	r4, r1
 8004f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f0c:	f000 f900 	bl	8005110 <_read_r>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	bfab      	itete	ge
 8004f14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f16:	89a3      	ldrhlt	r3, [r4, #12]
 8004f18:	181b      	addge	r3, r3, r0
 8004f1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f1e:	bfac      	ite	ge
 8004f20:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f22:	81a3      	strhlt	r3, [r4, #12]
 8004f24:	bd10      	pop	{r4, pc}

08004f26 <__swrite>:
 8004f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f2a:	461f      	mov	r7, r3
 8004f2c:	898b      	ldrh	r3, [r1, #12]
 8004f2e:	05db      	lsls	r3, r3, #23
 8004f30:	4605      	mov	r5, r0
 8004f32:	460c      	mov	r4, r1
 8004f34:	4616      	mov	r6, r2
 8004f36:	d505      	bpl.n	8004f44 <__swrite+0x1e>
 8004f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f000 f8d4 	bl	80050ec <_lseek_r>
 8004f44:	89a3      	ldrh	r3, [r4, #12]
 8004f46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f4e:	81a3      	strh	r3, [r4, #12]
 8004f50:	4632      	mov	r2, r6
 8004f52:	463b      	mov	r3, r7
 8004f54:	4628      	mov	r0, r5
 8004f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5a:	f000 b8eb 	b.w	8005134 <_write_r>

08004f5e <__sseek>:
 8004f5e:	b510      	push	{r4, lr}
 8004f60:	460c      	mov	r4, r1
 8004f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f66:	f000 f8c1 	bl	80050ec <_lseek_r>
 8004f6a:	1c43      	adds	r3, r0, #1
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	bf15      	itete	ne
 8004f70:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f7a:	81a3      	strheq	r3, [r4, #12]
 8004f7c:	bf18      	it	ne
 8004f7e:	81a3      	strhne	r3, [r4, #12]
 8004f80:	bd10      	pop	{r4, pc}

08004f82 <__sclose>:
 8004f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f86:	f000 b8a1 	b.w	80050cc <_close_r>

08004f8a <__swbuf_r>:
 8004f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8c:	460e      	mov	r6, r1
 8004f8e:	4614      	mov	r4, r2
 8004f90:	4605      	mov	r5, r0
 8004f92:	b118      	cbz	r0, 8004f9c <__swbuf_r+0x12>
 8004f94:	6a03      	ldr	r3, [r0, #32]
 8004f96:	b90b      	cbnz	r3, 8004f9c <__swbuf_r+0x12>
 8004f98:	f7ff ff08 	bl	8004dac <__sinit>
 8004f9c:	69a3      	ldr	r3, [r4, #24]
 8004f9e:	60a3      	str	r3, [r4, #8]
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	071a      	lsls	r2, r3, #28
 8004fa4:	d525      	bpl.n	8004ff2 <__swbuf_r+0x68>
 8004fa6:	6923      	ldr	r3, [r4, #16]
 8004fa8:	b31b      	cbz	r3, 8004ff2 <__swbuf_r+0x68>
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	6922      	ldr	r2, [r4, #16]
 8004fae:	1a98      	subs	r0, r3, r2
 8004fb0:	6963      	ldr	r3, [r4, #20]
 8004fb2:	b2f6      	uxtb	r6, r6
 8004fb4:	4283      	cmp	r3, r0
 8004fb6:	4637      	mov	r7, r6
 8004fb8:	dc04      	bgt.n	8004fc4 <__swbuf_r+0x3a>
 8004fba:	4621      	mov	r1, r4
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	f001 fdbb 	bl	8006b38 <_fflush_r>
 8004fc2:	b9e0      	cbnz	r0, 8004ffe <__swbuf_r+0x74>
 8004fc4:	68a3      	ldr	r3, [r4, #8]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	60a3      	str	r3, [r4, #8]
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	6022      	str	r2, [r4, #0]
 8004fd0:	701e      	strb	r6, [r3, #0]
 8004fd2:	6962      	ldr	r2, [r4, #20]
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d004      	beq.n	8004fe4 <__swbuf_r+0x5a>
 8004fda:	89a3      	ldrh	r3, [r4, #12]
 8004fdc:	07db      	lsls	r3, r3, #31
 8004fde:	d506      	bpl.n	8004fee <__swbuf_r+0x64>
 8004fe0:	2e0a      	cmp	r6, #10
 8004fe2:	d104      	bne.n	8004fee <__swbuf_r+0x64>
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f001 fda6 	bl	8006b38 <_fflush_r>
 8004fec:	b938      	cbnz	r0, 8004ffe <__swbuf_r+0x74>
 8004fee:	4638      	mov	r0, r7
 8004ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	f000 f805 	bl	8005004 <__swsetup_r>
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d0d5      	beq.n	8004faa <__swbuf_r+0x20>
 8004ffe:	f04f 37ff 	mov.w	r7, #4294967295
 8005002:	e7f4      	b.n	8004fee <__swbuf_r+0x64>

08005004 <__swsetup_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4b2a      	ldr	r3, [pc, #168]	; (80050b0 <__swsetup_r+0xac>)
 8005008:	4605      	mov	r5, r0
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	460c      	mov	r4, r1
 800500e:	b118      	cbz	r0, 8005018 <__swsetup_r+0x14>
 8005010:	6a03      	ldr	r3, [r0, #32]
 8005012:	b90b      	cbnz	r3, 8005018 <__swsetup_r+0x14>
 8005014:	f7ff feca 	bl	8004dac <__sinit>
 8005018:	89a3      	ldrh	r3, [r4, #12]
 800501a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800501e:	0718      	lsls	r0, r3, #28
 8005020:	d422      	bmi.n	8005068 <__swsetup_r+0x64>
 8005022:	06d9      	lsls	r1, r3, #27
 8005024:	d407      	bmi.n	8005036 <__swsetup_r+0x32>
 8005026:	2309      	movs	r3, #9
 8005028:	602b      	str	r3, [r5, #0]
 800502a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800502e:	81a3      	strh	r3, [r4, #12]
 8005030:	f04f 30ff 	mov.w	r0, #4294967295
 8005034:	e034      	b.n	80050a0 <__swsetup_r+0x9c>
 8005036:	0758      	lsls	r0, r3, #29
 8005038:	d512      	bpl.n	8005060 <__swsetup_r+0x5c>
 800503a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800503c:	b141      	cbz	r1, 8005050 <__swsetup_r+0x4c>
 800503e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005042:	4299      	cmp	r1, r3
 8005044:	d002      	beq.n	800504c <__swsetup_r+0x48>
 8005046:	4628      	mov	r0, r5
 8005048:	f000 ff30 	bl	8005eac <_free_r>
 800504c:	2300      	movs	r3, #0
 800504e:	6363      	str	r3, [r4, #52]	; 0x34
 8005050:	89a3      	ldrh	r3, [r4, #12]
 8005052:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005056:	81a3      	strh	r3, [r4, #12]
 8005058:	2300      	movs	r3, #0
 800505a:	6063      	str	r3, [r4, #4]
 800505c:	6923      	ldr	r3, [r4, #16]
 800505e:	6023      	str	r3, [r4, #0]
 8005060:	89a3      	ldrh	r3, [r4, #12]
 8005062:	f043 0308 	orr.w	r3, r3, #8
 8005066:	81a3      	strh	r3, [r4, #12]
 8005068:	6923      	ldr	r3, [r4, #16]
 800506a:	b94b      	cbnz	r3, 8005080 <__swsetup_r+0x7c>
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005076:	d003      	beq.n	8005080 <__swsetup_r+0x7c>
 8005078:	4621      	mov	r1, r4
 800507a:	4628      	mov	r0, r5
 800507c:	f001 fdaa 	bl	8006bd4 <__smakebuf_r>
 8005080:	89a0      	ldrh	r0, [r4, #12]
 8005082:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005086:	f010 0301 	ands.w	r3, r0, #1
 800508a:	d00a      	beq.n	80050a2 <__swsetup_r+0x9e>
 800508c:	2300      	movs	r3, #0
 800508e:	60a3      	str	r3, [r4, #8]
 8005090:	6963      	ldr	r3, [r4, #20]
 8005092:	425b      	negs	r3, r3
 8005094:	61a3      	str	r3, [r4, #24]
 8005096:	6923      	ldr	r3, [r4, #16]
 8005098:	b943      	cbnz	r3, 80050ac <__swsetup_r+0xa8>
 800509a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800509e:	d1c4      	bne.n	800502a <__swsetup_r+0x26>
 80050a0:	bd38      	pop	{r3, r4, r5, pc}
 80050a2:	0781      	lsls	r1, r0, #30
 80050a4:	bf58      	it	pl
 80050a6:	6963      	ldrpl	r3, [r4, #20]
 80050a8:	60a3      	str	r3, [r4, #8]
 80050aa:	e7f4      	b.n	8005096 <__swsetup_r+0x92>
 80050ac:	2000      	movs	r0, #0
 80050ae:	e7f7      	b.n	80050a0 <__swsetup_r+0x9c>
 80050b0:	20000074 	.word	0x20000074

080050b4 <memset>:
 80050b4:	4402      	add	r2, r0
 80050b6:	4603      	mov	r3, r0
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d100      	bne.n	80050be <memset+0xa>
 80050bc:	4770      	bx	lr
 80050be:	f803 1b01 	strb.w	r1, [r3], #1
 80050c2:	e7f9      	b.n	80050b8 <memset+0x4>

080050c4 <_localeconv_r>:
 80050c4:	4800      	ldr	r0, [pc, #0]	; (80050c8 <_localeconv_r+0x4>)
 80050c6:	4770      	bx	lr
 80050c8:	20000168 	.word	0x20000168

080050cc <_close_r>:
 80050cc:	b538      	push	{r3, r4, r5, lr}
 80050ce:	4d06      	ldr	r5, [pc, #24]	; (80050e8 <_close_r+0x1c>)
 80050d0:	2300      	movs	r3, #0
 80050d2:	4604      	mov	r4, r0
 80050d4:	4608      	mov	r0, r1
 80050d6:	602b      	str	r3, [r5, #0]
 80050d8:	f7fc faab 	bl	8001632 <_close>
 80050dc:	1c43      	adds	r3, r0, #1
 80050de:	d102      	bne.n	80050e6 <_close_r+0x1a>
 80050e0:	682b      	ldr	r3, [r5, #0]
 80050e2:	b103      	cbz	r3, 80050e6 <_close_r+0x1a>
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	20001094 	.word	0x20001094

080050ec <_lseek_r>:
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	4d07      	ldr	r5, [pc, #28]	; (800510c <_lseek_r+0x20>)
 80050f0:	4604      	mov	r4, r0
 80050f2:	4608      	mov	r0, r1
 80050f4:	4611      	mov	r1, r2
 80050f6:	2200      	movs	r2, #0
 80050f8:	602a      	str	r2, [r5, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	f7fc fac0 	bl	8001680 <_lseek>
 8005100:	1c43      	adds	r3, r0, #1
 8005102:	d102      	bne.n	800510a <_lseek_r+0x1e>
 8005104:	682b      	ldr	r3, [r5, #0]
 8005106:	b103      	cbz	r3, 800510a <_lseek_r+0x1e>
 8005108:	6023      	str	r3, [r4, #0]
 800510a:	bd38      	pop	{r3, r4, r5, pc}
 800510c:	20001094 	.word	0x20001094

08005110 <_read_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4d07      	ldr	r5, [pc, #28]	; (8005130 <_read_r+0x20>)
 8005114:	4604      	mov	r4, r0
 8005116:	4608      	mov	r0, r1
 8005118:	4611      	mov	r1, r2
 800511a:	2200      	movs	r2, #0
 800511c:	602a      	str	r2, [r5, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	f7fc fa4e 	bl	80015c0 <_read>
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	d102      	bne.n	800512e <_read_r+0x1e>
 8005128:	682b      	ldr	r3, [r5, #0]
 800512a:	b103      	cbz	r3, 800512e <_read_r+0x1e>
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	bd38      	pop	{r3, r4, r5, pc}
 8005130:	20001094 	.word	0x20001094

08005134 <_write_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4d07      	ldr	r5, [pc, #28]	; (8005154 <_write_r+0x20>)
 8005138:	4604      	mov	r4, r0
 800513a:	4608      	mov	r0, r1
 800513c:	4611      	mov	r1, r2
 800513e:	2200      	movs	r2, #0
 8005140:	602a      	str	r2, [r5, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	f7fc fa59 	bl	80015fa <_write>
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	d102      	bne.n	8005152 <_write_r+0x1e>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	b103      	cbz	r3, 8005152 <_write_r+0x1e>
 8005150:	6023      	str	r3, [r4, #0]
 8005152:	bd38      	pop	{r3, r4, r5, pc}
 8005154:	20001094 	.word	0x20001094

08005158 <__errno>:
 8005158:	4b01      	ldr	r3, [pc, #4]	; (8005160 <__errno+0x8>)
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	20000074 	.word	0x20000074

08005164 <__libc_init_array>:
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	4d0d      	ldr	r5, [pc, #52]	; (800519c <__libc_init_array+0x38>)
 8005168:	4c0d      	ldr	r4, [pc, #52]	; (80051a0 <__libc_init_array+0x3c>)
 800516a:	1b64      	subs	r4, r4, r5
 800516c:	10a4      	asrs	r4, r4, #2
 800516e:	2600      	movs	r6, #0
 8005170:	42a6      	cmp	r6, r4
 8005172:	d109      	bne.n	8005188 <__libc_init_array+0x24>
 8005174:	4d0b      	ldr	r5, [pc, #44]	; (80051a4 <__libc_init_array+0x40>)
 8005176:	4c0c      	ldr	r4, [pc, #48]	; (80051a8 <__libc_init_array+0x44>)
 8005178:	f002 f9de 	bl	8007538 <_init>
 800517c:	1b64      	subs	r4, r4, r5
 800517e:	10a4      	asrs	r4, r4, #2
 8005180:	2600      	movs	r6, #0
 8005182:	42a6      	cmp	r6, r4
 8005184:	d105      	bne.n	8005192 <__libc_init_array+0x2e>
 8005186:	bd70      	pop	{r4, r5, r6, pc}
 8005188:	f855 3b04 	ldr.w	r3, [r5], #4
 800518c:	4798      	blx	r3
 800518e:	3601      	adds	r6, #1
 8005190:	e7ee      	b.n	8005170 <__libc_init_array+0xc>
 8005192:	f855 3b04 	ldr.w	r3, [r5], #4
 8005196:	4798      	blx	r3
 8005198:	3601      	adds	r6, #1
 800519a:	e7f2      	b.n	8005182 <__libc_init_array+0x1e>
 800519c:	08007a70 	.word	0x08007a70
 80051a0:	08007a70 	.word	0x08007a70
 80051a4:	08007a70 	.word	0x08007a70
 80051a8:	08007a74 	.word	0x08007a74

080051ac <__retarget_lock_init_recursive>:
 80051ac:	4770      	bx	lr

080051ae <__retarget_lock_acquire_recursive>:
 80051ae:	4770      	bx	lr

080051b0 <__retarget_lock_release_recursive>:
 80051b0:	4770      	bx	lr

080051b2 <quorem>:
 80051b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b6:	6903      	ldr	r3, [r0, #16]
 80051b8:	690c      	ldr	r4, [r1, #16]
 80051ba:	42a3      	cmp	r3, r4
 80051bc:	4607      	mov	r7, r0
 80051be:	db7e      	blt.n	80052be <quorem+0x10c>
 80051c0:	3c01      	subs	r4, #1
 80051c2:	f101 0814 	add.w	r8, r1, #20
 80051c6:	f100 0514 	add.w	r5, r0, #20
 80051ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051ce:	9301      	str	r3, [sp, #4]
 80051d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051d8:	3301      	adds	r3, #1
 80051da:	429a      	cmp	r2, r3
 80051dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80051e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80051e8:	d331      	bcc.n	800524e <quorem+0x9c>
 80051ea:	f04f 0e00 	mov.w	lr, #0
 80051ee:	4640      	mov	r0, r8
 80051f0:	46ac      	mov	ip, r5
 80051f2:	46f2      	mov	sl, lr
 80051f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80051f8:	b293      	uxth	r3, r2
 80051fa:	fb06 e303 	mla	r3, r6, r3, lr
 80051fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005202:	0c1a      	lsrs	r2, r3, #16
 8005204:	b29b      	uxth	r3, r3
 8005206:	ebaa 0303 	sub.w	r3, sl, r3
 800520a:	f8dc a000 	ldr.w	sl, [ip]
 800520e:	fa13 f38a 	uxtah	r3, r3, sl
 8005212:	fb06 220e 	mla	r2, r6, lr, r2
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	9b00      	ldr	r3, [sp, #0]
 800521a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800521e:	b292      	uxth	r2, r2
 8005220:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005224:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005228:	f8bd 3000 	ldrh.w	r3, [sp]
 800522c:	4581      	cmp	r9, r0
 800522e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005232:	f84c 3b04 	str.w	r3, [ip], #4
 8005236:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800523a:	d2db      	bcs.n	80051f4 <quorem+0x42>
 800523c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005240:	b92b      	cbnz	r3, 800524e <quorem+0x9c>
 8005242:	9b01      	ldr	r3, [sp, #4]
 8005244:	3b04      	subs	r3, #4
 8005246:	429d      	cmp	r5, r3
 8005248:	461a      	mov	r2, r3
 800524a:	d32c      	bcc.n	80052a6 <quorem+0xf4>
 800524c:	613c      	str	r4, [r7, #16]
 800524e:	4638      	mov	r0, r7
 8005250:	f001 f9a8 	bl	80065a4 <__mcmp>
 8005254:	2800      	cmp	r0, #0
 8005256:	db22      	blt.n	800529e <quorem+0xec>
 8005258:	3601      	adds	r6, #1
 800525a:	4629      	mov	r1, r5
 800525c:	2000      	movs	r0, #0
 800525e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005262:	f8d1 c000 	ldr.w	ip, [r1]
 8005266:	b293      	uxth	r3, r2
 8005268:	1ac3      	subs	r3, r0, r3
 800526a:	0c12      	lsrs	r2, r2, #16
 800526c:	fa13 f38c 	uxtah	r3, r3, ip
 8005270:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005274:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005278:	b29b      	uxth	r3, r3
 800527a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800527e:	45c1      	cmp	r9, r8
 8005280:	f841 3b04 	str.w	r3, [r1], #4
 8005284:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005288:	d2e9      	bcs.n	800525e <quorem+0xac>
 800528a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800528e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005292:	b922      	cbnz	r2, 800529e <quorem+0xec>
 8005294:	3b04      	subs	r3, #4
 8005296:	429d      	cmp	r5, r3
 8005298:	461a      	mov	r2, r3
 800529a:	d30a      	bcc.n	80052b2 <quorem+0x100>
 800529c:	613c      	str	r4, [r7, #16]
 800529e:	4630      	mov	r0, r6
 80052a0:	b003      	add	sp, #12
 80052a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a6:	6812      	ldr	r2, [r2, #0]
 80052a8:	3b04      	subs	r3, #4
 80052aa:	2a00      	cmp	r2, #0
 80052ac:	d1ce      	bne.n	800524c <quorem+0x9a>
 80052ae:	3c01      	subs	r4, #1
 80052b0:	e7c9      	b.n	8005246 <quorem+0x94>
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	3b04      	subs	r3, #4
 80052b6:	2a00      	cmp	r2, #0
 80052b8:	d1f0      	bne.n	800529c <quorem+0xea>
 80052ba:	3c01      	subs	r4, #1
 80052bc:	e7eb      	b.n	8005296 <quorem+0xe4>
 80052be:	2000      	movs	r0, #0
 80052c0:	e7ee      	b.n	80052a0 <quorem+0xee>
 80052c2:	0000      	movs	r0, r0
 80052c4:	0000      	movs	r0, r0
	...

080052c8 <_dtoa_r>:
 80052c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052cc:	ed2d 8b04 	vpush	{d8-d9}
 80052d0:	69c5      	ldr	r5, [r0, #28]
 80052d2:	b093      	sub	sp, #76	; 0x4c
 80052d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80052d8:	ec57 6b10 	vmov	r6, r7, d0
 80052dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80052e0:	9107      	str	r1, [sp, #28]
 80052e2:	4604      	mov	r4, r0
 80052e4:	920a      	str	r2, [sp, #40]	; 0x28
 80052e6:	930d      	str	r3, [sp, #52]	; 0x34
 80052e8:	b975      	cbnz	r5, 8005308 <_dtoa_r+0x40>
 80052ea:	2010      	movs	r0, #16
 80052ec:	f000 fe2a 	bl	8005f44 <malloc>
 80052f0:	4602      	mov	r2, r0
 80052f2:	61e0      	str	r0, [r4, #28]
 80052f4:	b920      	cbnz	r0, 8005300 <_dtoa_r+0x38>
 80052f6:	4bae      	ldr	r3, [pc, #696]	; (80055b0 <_dtoa_r+0x2e8>)
 80052f8:	21ef      	movs	r1, #239	; 0xef
 80052fa:	48ae      	ldr	r0, [pc, #696]	; (80055b4 <_dtoa_r+0x2ec>)
 80052fc:	f001 fd1a 	bl	8006d34 <__assert_func>
 8005300:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005304:	6005      	str	r5, [r0, #0]
 8005306:	60c5      	str	r5, [r0, #12]
 8005308:	69e3      	ldr	r3, [r4, #28]
 800530a:	6819      	ldr	r1, [r3, #0]
 800530c:	b151      	cbz	r1, 8005324 <_dtoa_r+0x5c>
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	604a      	str	r2, [r1, #4]
 8005312:	2301      	movs	r3, #1
 8005314:	4093      	lsls	r3, r2
 8005316:	608b      	str	r3, [r1, #8]
 8005318:	4620      	mov	r0, r4
 800531a:	f000 ff07 	bl	800612c <_Bfree>
 800531e:	69e3      	ldr	r3, [r4, #28]
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	1e3b      	subs	r3, r7, #0
 8005326:	bfbb      	ittet	lt
 8005328:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800532c:	9303      	strlt	r3, [sp, #12]
 800532e:	2300      	movge	r3, #0
 8005330:	2201      	movlt	r2, #1
 8005332:	bfac      	ite	ge
 8005334:	f8c8 3000 	strge.w	r3, [r8]
 8005338:	f8c8 2000 	strlt.w	r2, [r8]
 800533c:	4b9e      	ldr	r3, [pc, #632]	; (80055b8 <_dtoa_r+0x2f0>)
 800533e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005342:	ea33 0308 	bics.w	r3, r3, r8
 8005346:	d11b      	bne.n	8005380 <_dtoa_r+0xb8>
 8005348:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800534a:	f242 730f 	movw	r3, #9999	; 0x270f
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005354:	4333      	orrs	r3, r6
 8005356:	f000 8593 	beq.w	8005e80 <_dtoa_r+0xbb8>
 800535a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800535c:	b963      	cbnz	r3, 8005378 <_dtoa_r+0xb0>
 800535e:	4b97      	ldr	r3, [pc, #604]	; (80055bc <_dtoa_r+0x2f4>)
 8005360:	e027      	b.n	80053b2 <_dtoa_r+0xea>
 8005362:	4b97      	ldr	r3, [pc, #604]	; (80055c0 <_dtoa_r+0x2f8>)
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	3308      	adds	r3, #8
 8005368:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	9800      	ldr	r0, [sp, #0]
 800536e:	b013      	add	sp, #76	; 0x4c
 8005370:	ecbd 8b04 	vpop	{d8-d9}
 8005374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005378:	4b90      	ldr	r3, [pc, #576]	; (80055bc <_dtoa_r+0x2f4>)
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	3303      	adds	r3, #3
 800537e:	e7f3      	b.n	8005368 <_dtoa_r+0xa0>
 8005380:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005384:	2200      	movs	r2, #0
 8005386:	ec51 0b17 	vmov	r0, r1, d7
 800538a:	eeb0 8a47 	vmov.f32	s16, s14
 800538e:	eef0 8a67 	vmov.f32	s17, s15
 8005392:	2300      	movs	r3, #0
 8005394:	f7fb fba0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005398:	4681      	mov	r9, r0
 800539a:	b160      	cbz	r0, 80053b6 <_dtoa_r+0xee>
 800539c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800539e:	2301      	movs	r3, #1
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 8568 	beq.w	8005e7a <_dtoa_r+0xbb2>
 80053aa:	4b86      	ldr	r3, [pc, #536]	; (80055c4 <_dtoa_r+0x2fc>)
 80053ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80053ae:	6013      	str	r3, [r2, #0]
 80053b0:	3b01      	subs	r3, #1
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	e7da      	b.n	800536c <_dtoa_r+0xa4>
 80053b6:	aa10      	add	r2, sp, #64	; 0x40
 80053b8:	a911      	add	r1, sp, #68	; 0x44
 80053ba:	4620      	mov	r0, r4
 80053bc:	eeb0 0a48 	vmov.f32	s0, s16
 80053c0:	eef0 0a68 	vmov.f32	s1, s17
 80053c4:	f001 f994 	bl	80066f0 <__d2b>
 80053c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80053cc:	4682      	mov	sl, r0
 80053ce:	2d00      	cmp	r5, #0
 80053d0:	d07f      	beq.n	80054d2 <_dtoa_r+0x20a>
 80053d2:	ee18 3a90 	vmov	r3, s17
 80053d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80053de:	ec51 0b18 	vmov	r0, r1, d8
 80053e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80053e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80053ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80053ee:	4619      	mov	r1, r3
 80053f0:	2200      	movs	r2, #0
 80053f2:	4b75      	ldr	r3, [pc, #468]	; (80055c8 <_dtoa_r+0x300>)
 80053f4:	f7fa ff50 	bl	8000298 <__aeabi_dsub>
 80053f8:	a367      	add	r3, pc, #412	; (adr r3, 8005598 <_dtoa_r+0x2d0>)
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	f7fb f903 	bl	8000608 <__aeabi_dmul>
 8005402:	a367      	add	r3, pc, #412	; (adr r3, 80055a0 <_dtoa_r+0x2d8>)
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	f7fa ff48 	bl	800029c <__adddf3>
 800540c:	4606      	mov	r6, r0
 800540e:	4628      	mov	r0, r5
 8005410:	460f      	mov	r7, r1
 8005412:	f7fb f88f 	bl	8000534 <__aeabi_i2d>
 8005416:	a364      	add	r3, pc, #400	; (adr r3, 80055a8 <_dtoa_r+0x2e0>)
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	f7fb f8f4 	bl	8000608 <__aeabi_dmul>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	4630      	mov	r0, r6
 8005426:	4639      	mov	r1, r7
 8005428:	f7fa ff38 	bl	800029c <__adddf3>
 800542c:	4606      	mov	r6, r0
 800542e:	460f      	mov	r7, r1
 8005430:	f7fb fb9a 	bl	8000b68 <__aeabi_d2iz>
 8005434:	2200      	movs	r2, #0
 8005436:	4683      	mov	fp, r0
 8005438:	2300      	movs	r3, #0
 800543a:	4630      	mov	r0, r6
 800543c:	4639      	mov	r1, r7
 800543e:	f7fb fb55 	bl	8000aec <__aeabi_dcmplt>
 8005442:	b148      	cbz	r0, 8005458 <_dtoa_r+0x190>
 8005444:	4658      	mov	r0, fp
 8005446:	f7fb f875 	bl	8000534 <__aeabi_i2d>
 800544a:	4632      	mov	r2, r6
 800544c:	463b      	mov	r3, r7
 800544e:	f7fb fb43 	bl	8000ad8 <__aeabi_dcmpeq>
 8005452:	b908      	cbnz	r0, 8005458 <_dtoa_r+0x190>
 8005454:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005458:	f1bb 0f16 	cmp.w	fp, #22
 800545c:	d857      	bhi.n	800550e <_dtoa_r+0x246>
 800545e:	4b5b      	ldr	r3, [pc, #364]	; (80055cc <_dtoa_r+0x304>)
 8005460:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	ec51 0b18 	vmov	r0, r1, d8
 800546c:	f7fb fb3e 	bl	8000aec <__aeabi_dcmplt>
 8005470:	2800      	cmp	r0, #0
 8005472:	d04e      	beq.n	8005512 <_dtoa_r+0x24a>
 8005474:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005478:	2300      	movs	r3, #0
 800547a:	930c      	str	r3, [sp, #48]	; 0x30
 800547c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800547e:	1b5b      	subs	r3, r3, r5
 8005480:	1e5a      	subs	r2, r3, #1
 8005482:	bf45      	ittet	mi
 8005484:	f1c3 0301 	rsbmi	r3, r3, #1
 8005488:	9305      	strmi	r3, [sp, #20]
 800548a:	2300      	movpl	r3, #0
 800548c:	2300      	movmi	r3, #0
 800548e:	9206      	str	r2, [sp, #24]
 8005490:	bf54      	ite	pl
 8005492:	9305      	strpl	r3, [sp, #20]
 8005494:	9306      	strmi	r3, [sp, #24]
 8005496:	f1bb 0f00 	cmp.w	fp, #0
 800549a:	db3c      	blt.n	8005516 <_dtoa_r+0x24e>
 800549c:	9b06      	ldr	r3, [sp, #24]
 800549e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80054a2:	445b      	add	r3, fp
 80054a4:	9306      	str	r3, [sp, #24]
 80054a6:	2300      	movs	r3, #0
 80054a8:	9308      	str	r3, [sp, #32]
 80054aa:	9b07      	ldr	r3, [sp, #28]
 80054ac:	2b09      	cmp	r3, #9
 80054ae:	d868      	bhi.n	8005582 <_dtoa_r+0x2ba>
 80054b0:	2b05      	cmp	r3, #5
 80054b2:	bfc4      	itt	gt
 80054b4:	3b04      	subgt	r3, #4
 80054b6:	9307      	strgt	r3, [sp, #28]
 80054b8:	9b07      	ldr	r3, [sp, #28]
 80054ba:	f1a3 0302 	sub.w	r3, r3, #2
 80054be:	bfcc      	ite	gt
 80054c0:	2500      	movgt	r5, #0
 80054c2:	2501      	movle	r5, #1
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	f200 8085 	bhi.w	80055d4 <_dtoa_r+0x30c>
 80054ca:	e8df f003 	tbb	[pc, r3]
 80054ce:	3b2e      	.short	0x3b2e
 80054d0:	5839      	.short	0x5839
 80054d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80054d6:	441d      	add	r5, r3
 80054d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80054dc:	2b20      	cmp	r3, #32
 80054de:	bfc1      	itttt	gt
 80054e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80054e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80054e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80054ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 80054f0:	bfd6      	itet	le
 80054f2:	f1c3 0320 	rsble	r3, r3, #32
 80054f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80054fa:	fa06 f003 	lslle.w	r0, r6, r3
 80054fe:	f7fb f809 	bl	8000514 <__aeabi_ui2d>
 8005502:	2201      	movs	r2, #1
 8005504:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005508:	3d01      	subs	r5, #1
 800550a:	920e      	str	r2, [sp, #56]	; 0x38
 800550c:	e76f      	b.n	80053ee <_dtoa_r+0x126>
 800550e:	2301      	movs	r3, #1
 8005510:	e7b3      	b.n	800547a <_dtoa_r+0x1b2>
 8005512:	900c      	str	r0, [sp, #48]	; 0x30
 8005514:	e7b2      	b.n	800547c <_dtoa_r+0x1b4>
 8005516:	9b05      	ldr	r3, [sp, #20]
 8005518:	eba3 030b 	sub.w	r3, r3, fp
 800551c:	9305      	str	r3, [sp, #20]
 800551e:	f1cb 0300 	rsb	r3, fp, #0
 8005522:	9308      	str	r3, [sp, #32]
 8005524:	2300      	movs	r3, #0
 8005526:	930b      	str	r3, [sp, #44]	; 0x2c
 8005528:	e7bf      	b.n	80054aa <_dtoa_r+0x1e2>
 800552a:	2300      	movs	r3, #0
 800552c:	9309      	str	r3, [sp, #36]	; 0x24
 800552e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005530:	2b00      	cmp	r3, #0
 8005532:	dc52      	bgt.n	80055da <_dtoa_r+0x312>
 8005534:	2301      	movs	r3, #1
 8005536:	9301      	str	r3, [sp, #4]
 8005538:	9304      	str	r3, [sp, #16]
 800553a:	461a      	mov	r2, r3
 800553c:	920a      	str	r2, [sp, #40]	; 0x28
 800553e:	e00b      	b.n	8005558 <_dtoa_r+0x290>
 8005540:	2301      	movs	r3, #1
 8005542:	e7f3      	b.n	800552c <_dtoa_r+0x264>
 8005544:	2300      	movs	r3, #0
 8005546:	9309      	str	r3, [sp, #36]	; 0x24
 8005548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800554a:	445b      	add	r3, fp
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	3301      	adds	r3, #1
 8005550:	2b01      	cmp	r3, #1
 8005552:	9304      	str	r3, [sp, #16]
 8005554:	bfb8      	it	lt
 8005556:	2301      	movlt	r3, #1
 8005558:	69e0      	ldr	r0, [r4, #28]
 800555a:	2100      	movs	r1, #0
 800555c:	2204      	movs	r2, #4
 800555e:	f102 0614 	add.w	r6, r2, #20
 8005562:	429e      	cmp	r6, r3
 8005564:	d93d      	bls.n	80055e2 <_dtoa_r+0x31a>
 8005566:	6041      	str	r1, [r0, #4]
 8005568:	4620      	mov	r0, r4
 800556a:	f000 fd9f 	bl	80060ac <_Balloc>
 800556e:	9000      	str	r0, [sp, #0]
 8005570:	2800      	cmp	r0, #0
 8005572:	d139      	bne.n	80055e8 <_dtoa_r+0x320>
 8005574:	4b16      	ldr	r3, [pc, #88]	; (80055d0 <_dtoa_r+0x308>)
 8005576:	4602      	mov	r2, r0
 8005578:	f240 11af 	movw	r1, #431	; 0x1af
 800557c:	e6bd      	b.n	80052fa <_dtoa_r+0x32>
 800557e:	2301      	movs	r3, #1
 8005580:	e7e1      	b.n	8005546 <_dtoa_r+0x27e>
 8005582:	2501      	movs	r5, #1
 8005584:	2300      	movs	r3, #0
 8005586:	9307      	str	r3, [sp, #28]
 8005588:	9509      	str	r5, [sp, #36]	; 0x24
 800558a:	f04f 33ff 	mov.w	r3, #4294967295
 800558e:	9301      	str	r3, [sp, #4]
 8005590:	9304      	str	r3, [sp, #16]
 8005592:	2200      	movs	r2, #0
 8005594:	2312      	movs	r3, #18
 8005596:	e7d1      	b.n	800553c <_dtoa_r+0x274>
 8005598:	636f4361 	.word	0x636f4361
 800559c:	3fd287a7 	.word	0x3fd287a7
 80055a0:	8b60c8b3 	.word	0x8b60c8b3
 80055a4:	3fc68a28 	.word	0x3fc68a28
 80055a8:	509f79fb 	.word	0x509f79fb
 80055ac:	3fd34413 	.word	0x3fd34413
 80055b0:	08007705 	.word	0x08007705
 80055b4:	0800771c 	.word	0x0800771c
 80055b8:	7ff00000 	.word	0x7ff00000
 80055bc:	08007701 	.word	0x08007701
 80055c0:	080076f8 	.word	0x080076f8
 80055c4:	080076d5 	.word	0x080076d5
 80055c8:	3ff80000 	.word	0x3ff80000
 80055cc:	08007808 	.word	0x08007808
 80055d0:	08007774 	.word	0x08007774
 80055d4:	2301      	movs	r3, #1
 80055d6:	9309      	str	r3, [sp, #36]	; 0x24
 80055d8:	e7d7      	b.n	800558a <_dtoa_r+0x2c2>
 80055da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055dc:	9301      	str	r3, [sp, #4]
 80055de:	9304      	str	r3, [sp, #16]
 80055e0:	e7ba      	b.n	8005558 <_dtoa_r+0x290>
 80055e2:	3101      	adds	r1, #1
 80055e4:	0052      	lsls	r2, r2, #1
 80055e6:	e7ba      	b.n	800555e <_dtoa_r+0x296>
 80055e8:	69e3      	ldr	r3, [r4, #28]
 80055ea:	9a00      	ldr	r2, [sp, #0]
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	9b04      	ldr	r3, [sp, #16]
 80055f0:	2b0e      	cmp	r3, #14
 80055f2:	f200 80a8 	bhi.w	8005746 <_dtoa_r+0x47e>
 80055f6:	2d00      	cmp	r5, #0
 80055f8:	f000 80a5 	beq.w	8005746 <_dtoa_r+0x47e>
 80055fc:	f1bb 0f00 	cmp.w	fp, #0
 8005600:	dd38      	ble.n	8005674 <_dtoa_r+0x3ac>
 8005602:	4bc0      	ldr	r3, [pc, #768]	; (8005904 <_dtoa_r+0x63c>)
 8005604:	f00b 020f 	and.w	r2, fp, #15
 8005608:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800560c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005610:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005614:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005618:	d019      	beq.n	800564e <_dtoa_r+0x386>
 800561a:	4bbb      	ldr	r3, [pc, #748]	; (8005908 <_dtoa_r+0x640>)
 800561c:	ec51 0b18 	vmov	r0, r1, d8
 8005620:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005624:	f7fb f91a 	bl	800085c <__aeabi_ddiv>
 8005628:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800562c:	f008 080f 	and.w	r8, r8, #15
 8005630:	2503      	movs	r5, #3
 8005632:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005908 <_dtoa_r+0x640>
 8005636:	f1b8 0f00 	cmp.w	r8, #0
 800563a:	d10a      	bne.n	8005652 <_dtoa_r+0x38a>
 800563c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005640:	4632      	mov	r2, r6
 8005642:	463b      	mov	r3, r7
 8005644:	f7fb f90a 	bl	800085c <__aeabi_ddiv>
 8005648:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800564c:	e02b      	b.n	80056a6 <_dtoa_r+0x3de>
 800564e:	2502      	movs	r5, #2
 8005650:	e7ef      	b.n	8005632 <_dtoa_r+0x36a>
 8005652:	f018 0f01 	tst.w	r8, #1
 8005656:	d008      	beq.n	800566a <_dtoa_r+0x3a2>
 8005658:	4630      	mov	r0, r6
 800565a:	4639      	mov	r1, r7
 800565c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005660:	f7fa ffd2 	bl	8000608 <__aeabi_dmul>
 8005664:	3501      	adds	r5, #1
 8005666:	4606      	mov	r6, r0
 8005668:	460f      	mov	r7, r1
 800566a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800566e:	f109 0908 	add.w	r9, r9, #8
 8005672:	e7e0      	b.n	8005636 <_dtoa_r+0x36e>
 8005674:	f000 809f 	beq.w	80057b6 <_dtoa_r+0x4ee>
 8005678:	f1cb 0600 	rsb	r6, fp, #0
 800567c:	4ba1      	ldr	r3, [pc, #644]	; (8005904 <_dtoa_r+0x63c>)
 800567e:	4fa2      	ldr	r7, [pc, #648]	; (8005908 <_dtoa_r+0x640>)
 8005680:	f006 020f 	and.w	r2, r6, #15
 8005684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568c:	ec51 0b18 	vmov	r0, r1, d8
 8005690:	f7fa ffba 	bl	8000608 <__aeabi_dmul>
 8005694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005698:	1136      	asrs	r6, r6, #4
 800569a:	2300      	movs	r3, #0
 800569c:	2502      	movs	r5, #2
 800569e:	2e00      	cmp	r6, #0
 80056a0:	d17e      	bne.n	80057a0 <_dtoa_r+0x4d8>
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1d0      	bne.n	8005648 <_dtoa_r+0x380>
 80056a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8084 	beq.w	80057ba <_dtoa_r+0x4f2>
 80056b2:	4b96      	ldr	r3, [pc, #600]	; (800590c <_dtoa_r+0x644>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	4640      	mov	r0, r8
 80056b8:	4649      	mov	r1, r9
 80056ba:	f7fb fa17 	bl	8000aec <__aeabi_dcmplt>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d07b      	beq.n	80057ba <_dtoa_r+0x4f2>
 80056c2:	9b04      	ldr	r3, [sp, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d078      	beq.n	80057ba <_dtoa_r+0x4f2>
 80056c8:	9b01      	ldr	r3, [sp, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	dd39      	ble.n	8005742 <_dtoa_r+0x47a>
 80056ce:	4b90      	ldr	r3, [pc, #576]	; (8005910 <_dtoa_r+0x648>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	4640      	mov	r0, r8
 80056d4:	4649      	mov	r1, r9
 80056d6:	f7fa ff97 	bl	8000608 <__aeabi_dmul>
 80056da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056de:	9e01      	ldr	r6, [sp, #4]
 80056e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80056e4:	3501      	adds	r5, #1
 80056e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80056ea:	4628      	mov	r0, r5
 80056ec:	f7fa ff22 	bl	8000534 <__aeabi_i2d>
 80056f0:	4642      	mov	r2, r8
 80056f2:	464b      	mov	r3, r9
 80056f4:	f7fa ff88 	bl	8000608 <__aeabi_dmul>
 80056f8:	4b86      	ldr	r3, [pc, #536]	; (8005914 <_dtoa_r+0x64c>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	f7fa fdce 	bl	800029c <__adddf3>
 8005700:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005708:	9303      	str	r3, [sp, #12]
 800570a:	2e00      	cmp	r6, #0
 800570c:	d158      	bne.n	80057c0 <_dtoa_r+0x4f8>
 800570e:	4b82      	ldr	r3, [pc, #520]	; (8005918 <_dtoa_r+0x650>)
 8005710:	2200      	movs	r2, #0
 8005712:	4640      	mov	r0, r8
 8005714:	4649      	mov	r1, r9
 8005716:	f7fa fdbf 	bl	8000298 <__aeabi_dsub>
 800571a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800571e:	4680      	mov	r8, r0
 8005720:	4689      	mov	r9, r1
 8005722:	f7fb fa01 	bl	8000b28 <__aeabi_dcmpgt>
 8005726:	2800      	cmp	r0, #0
 8005728:	f040 8296 	bne.w	8005c58 <_dtoa_r+0x990>
 800572c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005730:	4640      	mov	r0, r8
 8005732:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005736:	4649      	mov	r1, r9
 8005738:	f7fb f9d8 	bl	8000aec <__aeabi_dcmplt>
 800573c:	2800      	cmp	r0, #0
 800573e:	f040 8289 	bne.w	8005c54 <_dtoa_r+0x98c>
 8005742:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005746:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005748:	2b00      	cmp	r3, #0
 800574a:	f2c0 814e 	blt.w	80059ea <_dtoa_r+0x722>
 800574e:	f1bb 0f0e 	cmp.w	fp, #14
 8005752:	f300 814a 	bgt.w	80059ea <_dtoa_r+0x722>
 8005756:	4b6b      	ldr	r3, [pc, #428]	; (8005904 <_dtoa_r+0x63c>)
 8005758:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800575c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005762:	2b00      	cmp	r3, #0
 8005764:	f280 80dc 	bge.w	8005920 <_dtoa_r+0x658>
 8005768:	9b04      	ldr	r3, [sp, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	f300 80d8 	bgt.w	8005920 <_dtoa_r+0x658>
 8005770:	f040 826f 	bne.w	8005c52 <_dtoa_r+0x98a>
 8005774:	4b68      	ldr	r3, [pc, #416]	; (8005918 <_dtoa_r+0x650>)
 8005776:	2200      	movs	r2, #0
 8005778:	4640      	mov	r0, r8
 800577a:	4649      	mov	r1, r9
 800577c:	f7fa ff44 	bl	8000608 <__aeabi_dmul>
 8005780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005784:	f7fb f9c6 	bl	8000b14 <__aeabi_dcmpge>
 8005788:	9e04      	ldr	r6, [sp, #16]
 800578a:	4637      	mov	r7, r6
 800578c:	2800      	cmp	r0, #0
 800578e:	f040 8245 	bne.w	8005c1c <_dtoa_r+0x954>
 8005792:	9d00      	ldr	r5, [sp, #0]
 8005794:	2331      	movs	r3, #49	; 0x31
 8005796:	f805 3b01 	strb.w	r3, [r5], #1
 800579a:	f10b 0b01 	add.w	fp, fp, #1
 800579e:	e241      	b.n	8005c24 <_dtoa_r+0x95c>
 80057a0:	07f2      	lsls	r2, r6, #31
 80057a2:	d505      	bpl.n	80057b0 <_dtoa_r+0x4e8>
 80057a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057a8:	f7fa ff2e 	bl	8000608 <__aeabi_dmul>
 80057ac:	3501      	adds	r5, #1
 80057ae:	2301      	movs	r3, #1
 80057b0:	1076      	asrs	r6, r6, #1
 80057b2:	3708      	adds	r7, #8
 80057b4:	e773      	b.n	800569e <_dtoa_r+0x3d6>
 80057b6:	2502      	movs	r5, #2
 80057b8:	e775      	b.n	80056a6 <_dtoa_r+0x3de>
 80057ba:	9e04      	ldr	r6, [sp, #16]
 80057bc:	465f      	mov	r7, fp
 80057be:	e792      	b.n	80056e6 <_dtoa_r+0x41e>
 80057c0:	9900      	ldr	r1, [sp, #0]
 80057c2:	4b50      	ldr	r3, [pc, #320]	; (8005904 <_dtoa_r+0x63c>)
 80057c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80057c8:	4431      	add	r1, r6
 80057ca:	9102      	str	r1, [sp, #8]
 80057cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057ce:	eeb0 9a47 	vmov.f32	s18, s14
 80057d2:	eef0 9a67 	vmov.f32	s19, s15
 80057d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80057da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80057de:	2900      	cmp	r1, #0
 80057e0:	d044      	beq.n	800586c <_dtoa_r+0x5a4>
 80057e2:	494e      	ldr	r1, [pc, #312]	; (800591c <_dtoa_r+0x654>)
 80057e4:	2000      	movs	r0, #0
 80057e6:	f7fb f839 	bl	800085c <__aeabi_ddiv>
 80057ea:	ec53 2b19 	vmov	r2, r3, d9
 80057ee:	f7fa fd53 	bl	8000298 <__aeabi_dsub>
 80057f2:	9d00      	ldr	r5, [sp, #0]
 80057f4:	ec41 0b19 	vmov	d9, r0, r1
 80057f8:	4649      	mov	r1, r9
 80057fa:	4640      	mov	r0, r8
 80057fc:	f7fb f9b4 	bl	8000b68 <__aeabi_d2iz>
 8005800:	4606      	mov	r6, r0
 8005802:	f7fa fe97 	bl	8000534 <__aeabi_i2d>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4640      	mov	r0, r8
 800580c:	4649      	mov	r1, r9
 800580e:	f7fa fd43 	bl	8000298 <__aeabi_dsub>
 8005812:	3630      	adds	r6, #48	; 0x30
 8005814:	f805 6b01 	strb.w	r6, [r5], #1
 8005818:	ec53 2b19 	vmov	r2, r3, d9
 800581c:	4680      	mov	r8, r0
 800581e:	4689      	mov	r9, r1
 8005820:	f7fb f964 	bl	8000aec <__aeabi_dcmplt>
 8005824:	2800      	cmp	r0, #0
 8005826:	d164      	bne.n	80058f2 <_dtoa_r+0x62a>
 8005828:	4642      	mov	r2, r8
 800582a:	464b      	mov	r3, r9
 800582c:	4937      	ldr	r1, [pc, #220]	; (800590c <_dtoa_r+0x644>)
 800582e:	2000      	movs	r0, #0
 8005830:	f7fa fd32 	bl	8000298 <__aeabi_dsub>
 8005834:	ec53 2b19 	vmov	r2, r3, d9
 8005838:	f7fb f958 	bl	8000aec <__aeabi_dcmplt>
 800583c:	2800      	cmp	r0, #0
 800583e:	f040 80b6 	bne.w	80059ae <_dtoa_r+0x6e6>
 8005842:	9b02      	ldr	r3, [sp, #8]
 8005844:	429d      	cmp	r5, r3
 8005846:	f43f af7c 	beq.w	8005742 <_dtoa_r+0x47a>
 800584a:	4b31      	ldr	r3, [pc, #196]	; (8005910 <_dtoa_r+0x648>)
 800584c:	ec51 0b19 	vmov	r0, r1, d9
 8005850:	2200      	movs	r2, #0
 8005852:	f7fa fed9 	bl	8000608 <__aeabi_dmul>
 8005856:	4b2e      	ldr	r3, [pc, #184]	; (8005910 <_dtoa_r+0x648>)
 8005858:	ec41 0b19 	vmov	d9, r0, r1
 800585c:	2200      	movs	r2, #0
 800585e:	4640      	mov	r0, r8
 8005860:	4649      	mov	r1, r9
 8005862:	f7fa fed1 	bl	8000608 <__aeabi_dmul>
 8005866:	4680      	mov	r8, r0
 8005868:	4689      	mov	r9, r1
 800586a:	e7c5      	b.n	80057f8 <_dtoa_r+0x530>
 800586c:	ec51 0b17 	vmov	r0, r1, d7
 8005870:	f7fa feca 	bl	8000608 <__aeabi_dmul>
 8005874:	9b02      	ldr	r3, [sp, #8]
 8005876:	9d00      	ldr	r5, [sp, #0]
 8005878:	930f      	str	r3, [sp, #60]	; 0x3c
 800587a:	ec41 0b19 	vmov	d9, r0, r1
 800587e:	4649      	mov	r1, r9
 8005880:	4640      	mov	r0, r8
 8005882:	f7fb f971 	bl	8000b68 <__aeabi_d2iz>
 8005886:	4606      	mov	r6, r0
 8005888:	f7fa fe54 	bl	8000534 <__aeabi_i2d>
 800588c:	3630      	adds	r6, #48	; 0x30
 800588e:	4602      	mov	r2, r0
 8005890:	460b      	mov	r3, r1
 8005892:	4640      	mov	r0, r8
 8005894:	4649      	mov	r1, r9
 8005896:	f7fa fcff 	bl	8000298 <__aeabi_dsub>
 800589a:	f805 6b01 	strb.w	r6, [r5], #1
 800589e:	9b02      	ldr	r3, [sp, #8]
 80058a0:	429d      	cmp	r5, r3
 80058a2:	4680      	mov	r8, r0
 80058a4:	4689      	mov	r9, r1
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	d124      	bne.n	80058f6 <_dtoa_r+0x62e>
 80058ac:	4b1b      	ldr	r3, [pc, #108]	; (800591c <_dtoa_r+0x654>)
 80058ae:	ec51 0b19 	vmov	r0, r1, d9
 80058b2:	f7fa fcf3 	bl	800029c <__adddf3>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4640      	mov	r0, r8
 80058bc:	4649      	mov	r1, r9
 80058be:	f7fb f933 	bl	8000b28 <__aeabi_dcmpgt>
 80058c2:	2800      	cmp	r0, #0
 80058c4:	d173      	bne.n	80059ae <_dtoa_r+0x6e6>
 80058c6:	ec53 2b19 	vmov	r2, r3, d9
 80058ca:	4914      	ldr	r1, [pc, #80]	; (800591c <_dtoa_r+0x654>)
 80058cc:	2000      	movs	r0, #0
 80058ce:	f7fa fce3 	bl	8000298 <__aeabi_dsub>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4640      	mov	r0, r8
 80058d8:	4649      	mov	r1, r9
 80058da:	f7fb f907 	bl	8000aec <__aeabi_dcmplt>
 80058de:	2800      	cmp	r0, #0
 80058e0:	f43f af2f 	beq.w	8005742 <_dtoa_r+0x47a>
 80058e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80058e6:	1e6b      	subs	r3, r5, #1
 80058e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80058ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80058ee:	2b30      	cmp	r3, #48	; 0x30
 80058f0:	d0f8      	beq.n	80058e4 <_dtoa_r+0x61c>
 80058f2:	46bb      	mov	fp, r7
 80058f4:	e04a      	b.n	800598c <_dtoa_r+0x6c4>
 80058f6:	4b06      	ldr	r3, [pc, #24]	; (8005910 <_dtoa_r+0x648>)
 80058f8:	f7fa fe86 	bl	8000608 <__aeabi_dmul>
 80058fc:	4680      	mov	r8, r0
 80058fe:	4689      	mov	r9, r1
 8005900:	e7bd      	b.n	800587e <_dtoa_r+0x5b6>
 8005902:	bf00      	nop
 8005904:	08007808 	.word	0x08007808
 8005908:	080077e0 	.word	0x080077e0
 800590c:	3ff00000 	.word	0x3ff00000
 8005910:	40240000 	.word	0x40240000
 8005914:	401c0000 	.word	0x401c0000
 8005918:	40140000 	.word	0x40140000
 800591c:	3fe00000 	.word	0x3fe00000
 8005920:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005924:	9d00      	ldr	r5, [sp, #0]
 8005926:	4642      	mov	r2, r8
 8005928:	464b      	mov	r3, r9
 800592a:	4630      	mov	r0, r6
 800592c:	4639      	mov	r1, r7
 800592e:	f7fa ff95 	bl	800085c <__aeabi_ddiv>
 8005932:	f7fb f919 	bl	8000b68 <__aeabi_d2iz>
 8005936:	9001      	str	r0, [sp, #4]
 8005938:	f7fa fdfc 	bl	8000534 <__aeabi_i2d>
 800593c:	4642      	mov	r2, r8
 800593e:	464b      	mov	r3, r9
 8005940:	f7fa fe62 	bl	8000608 <__aeabi_dmul>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4630      	mov	r0, r6
 800594a:	4639      	mov	r1, r7
 800594c:	f7fa fca4 	bl	8000298 <__aeabi_dsub>
 8005950:	9e01      	ldr	r6, [sp, #4]
 8005952:	9f04      	ldr	r7, [sp, #16]
 8005954:	3630      	adds	r6, #48	; 0x30
 8005956:	f805 6b01 	strb.w	r6, [r5], #1
 800595a:	9e00      	ldr	r6, [sp, #0]
 800595c:	1bae      	subs	r6, r5, r6
 800595e:	42b7      	cmp	r7, r6
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	d134      	bne.n	80059d0 <_dtoa_r+0x708>
 8005966:	f7fa fc99 	bl	800029c <__adddf3>
 800596a:	4642      	mov	r2, r8
 800596c:	464b      	mov	r3, r9
 800596e:	4606      	mov	r6, r0
 8005970:	460f      	mov	r7, r1
 8005972:	f7fb f8d9 	bl	8000b28 <__aeabi_dcmpgt>
 8005976:	b9c8      	cbnz	r0, 80059ac <_dtoa_r+0x6e4>
 8005978:	4642      	mov	r2, r8
 800597a:	464b      	mov	r3, r9
 800597c:	4630      	mov	r0, r6
 800597e:	4639      	mov	r1, r7
 8005980:	f7fb f8aa 	bl	8000ad8 <__aeabi_dcmpeq>
 8005984:	b110      	cbz	r0, 800598c <_dtoa_r+0x6c4>
 8005986:	9b01      	ldr	r3, [sp, #4]
 8005988:	07db      	lsls	r3, r3, #31
 800598a:	d40f      	bmi.n	80059ac <_dtoa_r+0x6e4>
 800598c:	4651      	mov	r1, sl
 800598e:	4620      	mov	r0, r4
 8005990:	f000 fbcc 	bl	800612c <_Bfree>
 8005994:	2300      	movs	r3, #0
 8005996:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005998:	702b      	strb	r3, [r5, #0]
 800599a:	f10b 0301 	add.w	r3, fp, #1
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f43f ace2 	beq.w	800536c <_dtoa_r+0xa4>
 80059a8:	601d      	str	r5, [r3, #0]
 80059aa:	e4df      	b.n	800536c <_dtoa_r+0xa4>
 80059ac:	465f      	mov	r7, fp
 80059ae:	462b      	mov	r3, r5
 80059b0:	461d      	mov	r5, r3
 80059b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059b6:	2a39      	cmp	r2, #57	; 0x39
 80059b8:	d106      	bne.n	80059c8 <_dtoa_r+0x700>
 80059ba:	9a00      	ldr	r2, [sp, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d1f7      	bne.n	80059b0 <_dtoa_r+0x6e8>
 80059c0:	9900      	ldr	r1, [sp, #0]
 80059c2:	2230      	movs	r2, #48	; 0x30
 80059c4:	3701      	adds	r7, #1
 80059c6:	700a      	strb	r2, [r1, #0]
 80059c8:	781a      	ldrb	r2, [r3, #0]
 80059ca:	3201      	adds	r2, #1
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	e790      	b.n	80058f2 <_dtoa_r+0x62a>
 80059d0:	4ba3      	ldr	r3, [pc, #652]	; (8005c60 <_dtoa_r+0x998>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	f7fa fe18 	bl	8000608 <__aeabi_dmul>
 80059d8:	2200      	movs	r2, #0
 80059da:	2300      	movs	r3, #0
 80059dc:	4606      	mov	r6, r0
 80059de:	460f      	mov	r7, r1
 80059e0:	f7fb f87a 	bl	8000ad8 <__aeabi_dcmpeq>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	d09e      	beq.n	8005926 <_dtoa_r+0x65e>
 80059e8:	e7d0      	b.n	800598c <_dtoa_r+0x6c4>
 80059ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059ec:	2a00      	cmp	r2, #0
 80059ee:	f000 80ca 	beq.w	8005b86 <_dtoa_r+0x8be>
 80059f2:	9a07      	ldr	r2, [sp, #28]
 80059f4:	2a01      	cmp	r2, #1
 80059f6:	f300 80ad 	bgt.w	8005b54 <_dtoa_r+0x88c>
 80059fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059fc:	2a00      	cmp	r2, #0
 80059fe:	f000 80a5 	beq.w	8005b4c <_dtoa_r+0x884>
 8005a02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a06:	9e08      	ldr	r6, [sp, #32]
 8005a08:	9d05      	ldr	r5, [sp, #20]
 8005a0a:	9a05      	ldr	r2, [sp, #20]
 8005a0c:	441a      	add	r2, r3
 8005a0e:	9205      	str	r2, [sp, #20]
 8005a10:	9a06      	ldr	r2, [sp, #24]
 8005a12:	2101      	movs	r1, #1
 8005a14:	441a      	add	r2, r3
 8005a16:	4620      	mov	r0, r4
 8005a18:	9206      	str	r2, [sp, #24]
 8005a1a:	f000 fc3d 	bl	8006298 <__i2b>
 8005a1e:	4607      	mov	r7, r0
 8005a20:	b165      	cbz	r5, 8005a3c <_dtoa_r+0x774>
 8005a22:	9b06      	ldr	r3, [sp, #24]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	dd09      	ble.n	8005a3c <_dtoa_r+0x774>
 8005a28:	42ab      	cmp	r3, r5
 8005a2a:	9a05      	ldr	r2, [sp, #20]
 8005a2c:	bfa8      	it	ge
 8005a2e:	462b      	movge	r3, r5
 8005a30:	1ad2      	subs	r2, r2, r3
 8005a32:	9205      	str	r2, [sp, #20]
 8005a34:	9a06      	ldr	r2, [sp, #24]
 8005a36:	1aed      	subs	r5, r5, r3
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	9306      	str	r3, [sp, #24]
 8005a3c:	9b08      	ldr	r3, [sp, #32]
 8005a3e:	b1f3      	cbz	r3, 8005a7e <_dtoa_r+0x7b6>
 8005a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 80a3 	beq.w	8005b8e <_dtoa_r+0x8c6>
 8005a48:	2e00      	cmp	r6, #0
 8005a4a:	dd10      	ble.n	8005a6e <_dtoa_r+0x7a6>
 8005a4c:	4639      	mov	r1, r7
 8005a4e:	4632      	mov	r2, r6
 8005a50:	4620      	mov	r0, r4
 8005a52:	f000 fce1 	bl	8006418 <__pow5mult>
 8005a56:	4652      	mov	r2, sl
 8005a58:	4601      	mov	r1, r0
 8005a5a:	4607      	mov	r7, r0
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f000 fc31 	bl	80062c4 <__multiply>
 8005a62:	4651      	mov	r1, sl
 8005a64:	4680      	mov	r8, r0
 8005a66:	4620      	mov	r0, r4
 8005a68:	f000 fb60 	bl	800612c <_Bfree>
 8005a6c:	46c2      	mov	sl, r8
 8005a6e:	9b08      	ldr	r3, [sp, #32]
 8005a70:	1b9a      	subs	r2, r3, r6
 8005a72:	d004      	beq.n	8005a7e <_dtoa_r+0x7b6>
 8005a74:	4651      	mov	r1, sl
 8005a76:	4620      	mov	r0, r4
 8005a78:	f000 fcce 	bl	8006418 <__pow5mult>
 8005a7c:	4682      	mov	sl, r0
 8005a7e:	2101      	movs	r1, #1
 8005a80:	4620      	mov	r0, r4
 8005a82:	f000 fc09 	bl	8006298 <__i2b>
 8005a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	4606      	mov	r6, r0
 8005a8c:	f340 8081 	ble.w	8005b92 <_dtoa_r+0x8ca>
 8005a90:	461a      	mov	r2, r3
 8005a92:	4601      	mov	r1, r0
 8005a94:	4620      	mov	r0, r4
 8005a96:	f000 fcbf 	bl	8006418 <__pow5mult>
 8005a9a:	9b07      	ldr	r3, [sp, #28]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	4606      	mov	r6, r0
 8005aa0:	dd7a      	ble.n	8005b98 <_dtoa_r+0x8d0>
 8005aa2:	f04f 0800 	mov.w	r8, #0
 8005aa6:	6933      	ldr	r3, [r6, #16]
 8005aa8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005aac:	6918      	ldr	r0, [r3, #16]
 8005aae:	f000 fba5 	bl	80061fc <__hi0bits>
 8005ab2:	f1c0 0020 	rsb	r0, r0, #32
 8005ab6:	9b06      	ldr	r3, [sp, #24]
 8005ab8:	4418      	add	r0, r3
 8005aba:	f010 001f 	ands.w	r0, r0, #31
 8005abe:	f000 8094 	beq.w	8005bea <_dtoa_r+0x922>
 8005ac2:	f1c0 0320 	rsb	r3, r0, #32
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	f340 8085 	ble.w	8005bd6 <_dtoa_r+0x90e>
 8005acc:	9b05      	ldr	r3, [sp, #20]
 8005ace:	f1c0 001c 	rsb	r0, r0, #28
 8005ad2:	4403      	add	r3, r0
 8005ad4:	9305      	str	r3, [sp, #20]
 8005ad6:	9b06      	ldr	r3, [sp, #24]
 8005ad8:	4403      	add	r3, r0
 8005ada:	4405      	add	r5, r0
 8005adc:	9306      	str	r3, [sp, #24]
 8005ade:	9b05      	ldr	r3, [sp, #20]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	dd05      	ble.n	8005af0 <_dtoa_r+0x828>
 8005ae4:	4651      	mov	r1, sl
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 fcef 	bl	80064cc <__lshift>
 8005aee:	4682      	mov	sl, r0
 8005af0:	9b06      	ldr	r3, [sp, #24]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	dd05      	ble.n	8005b02 <_dtoa_r+0x83a>
 8005af6:	4631      	mov	r1, r6
 8005af8:	461a      	mov	r2, r3
 8005afa:	4620      	mov	r0, r4
 8005afc:	f000 fce6 	bl	80064cc <__lshift>
 8005b00:	4606      	mov	r6, r0
 8005b02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d072      	beq.n	8005bee <_dtoa_r+0x926>
 8005b08:	4631      	mov	r1, r6
 8005b0a:	4650      	mov	r0, sl
 8005b0c:	f000 fd4a 	bl	80065a4 <__mcmp>
 8005b10:	2800      	cmp	r0, #0
 8005b12:	da6c      	bge.n	8005bee <_dtoa_r+0x926>
 8005b14:	2300      	movs	r3, #0
 8005b16:	4651      	mov	r1, sl
 8005b18:	220a      	movs	r2, #10
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f000 fb28 	bl	8006170 <__multadd>
 8005b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b26:	4682      	mov	sl, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 81b0 	beq.w	8005e8e <_dtoa_r+0xbc6>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	4639      	mov	r1, r7
 8005b32:	220a      	movs	r2, #10
 8005b34:	4620      	mov	r0, r4
 8005b36:	f000 fb1b 	bl	8006170 <__multadd>
 8005b3a:	9b01      	ldr	r3, [sp, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	4607      	mov	r7, r0
 8005b40:	f300 8096 	bgt.w	8005c70 <_dtoa_r+0x9a8>
 8005b44:	9b07      	ldr	r3, [sp, #28]
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	dc59      	bgt.n	8005bfe <_dtoa_r+0x936>
 8005b4a:	e091      	b.n	8005c70 <_dtoa_r+0x9a8>
 8005b4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b52:	e758      	b.n	8005a06 <_dtoa_r+0x73e>
 8005b54:	9b04      	ldr	r3, [sp, #16]
 8005b56:	1e5e      	subs	r6, r3, #1
 8005b58:	9b08      	ldr	r3, [sp, #32]
 8005b5a:	42b3      	cmp	r3, r6
 8005b5c:	bfbf      	itttt	lt
 8005b5e:	9b08      	ldrlt	r3, [sp, #32]
 8005b60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005b62:	9608      	strlt	r6, [sp, #32]
 8005b64:	1af3      	sublt	r3, r6, r3
 8005b66:	bfb4      	ite	lt
 8005b68:	18d2      	addlt	r2, r2, r3
 8005b6a:	1b9e      	subge	r6, r3, r6
 8005b6c:	9b04      	ldr	r3, [sp, #16]
 8005b6e:	bfbc      	itt	lt
 8005b70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005b72:	2600      	movlt	r6, #0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	bfb7      	itett	lt
 8005b78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005b7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005b80:	1a9d      	sublt	r5, r3, r2
 8005b82:	2300      	movlt	r3, #0
 8005b84:	e741      	b.n	8005a0a <_dtoa_r+0x742>
 8005b86:	9e08      	ldr	r6, [sp, #32]
 8005b88:	9d05      	ldr	r5, [sp, #20]
 8005b8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005b8c:	e748      	b.n	8005a20 <_dtoa_r+0x758>
 8005b8e:	9a08      	ldr	r2, [sp, #32]
 8005b90:	e770      	b.n	8005a74 <_dtoa_r+0x7ac>
 8005b92:	9b07      	ldr	r3, [sp, #28]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	dc19      	bgt.n	8005bcc <_dtoa_r+0x904>
 8005b98:	9b02      	ldr	r3, [sp, #8]
 8005b9a:	b9bb      	cbnz	r3, 8005bcc <_dtoa_r+0x904>
 8005b9c:	9b03      	ldr	r3, [sp, #12]
 8005b9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ba2:	b99b      	cbnz	r3, 8005bcc <_dtoa_r+0x904>
 8005ba4:	9b03      	ldr	r3, [sp, #12]
 8005ba6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005baa:	0d1b      	lsrs	r3, r3, #20
 8005bac:	051b      	lsls	r3, r3, #20
 8005bae:	b183      	cbz	r3, 8005bd2 <_dtoa_r+0x90a>
 8005bb0:	9b05      	ldr	r3, [sp, #20]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	9305      	str	r3, [sp, #20]
 8005bb6:	9b06      	ldr	r3, [sp, #24]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	9306      	str	r3, [sp, #24]
 8005bbc:	f04f 0801 	mov.w	r8, #1
 8005bc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f47f af6f 	bne.w	8005aa6 <_dtoa_r+0x7de>
 8005bc8:	2001      	movs	r0, #1
 8005bca:	e774      	b.n	8005ab6 <_dtoa_r+0x7ee>
 8005bcc:	f04f 0800 	mov.w	r8, #0
 8005bd0:	e7f6      	b.n	8005bc0 <_dtoa_r+0x8f8>
 8005bd2:	4698      	mov	r8, r3
 8005bd4:	e7f4      	b.n	8005bc0 <_dtoa_r+0x8f8>
 8005bd6:	d082      	beq.n	8005ade <_dtoa_r+0x816>
 8005bd8:	9a05      	ldr	r2, [sp, #20]
 8005bda:	331c      	adds	r3, #28
 8005bdc:	441a      	add	r2, r3
 8005bde:	9205      	str	r2, [sp, #20]
 8005be0:	9a06      	ldr	r2, [sp, #24]
 8005be2:	441a      	add	r2, r3
 8005be4:	441d      	add	r5, r3
 8005be6:	9206      	str	r2, [sp, #24]
 8005be8:	e779      	b.n	8005ade <_dtoa_r+0x816>
 8005bea:	4603      	mov	r3, r0
 8005bec:	e7f4      	b.n	8005bd8 <_dtoa_r+0x910>
 8005bee:	9b04      	ldr	r3, [sp, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	dc37      	bgt.n	8005c64 <_dtoa_r+0x99c>
 8005bf4:	9b07      	ldr	r3, [sp, #28]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	dd34      	ble.n	8005c64 <_dtoa_r+0x99c>
 8005bfa:	9b04      	ldr	r3, [sp, #16]
 8005bfc:	9301      	str	r3, [sp, #4]
 8005bfe:	9b01      	ldr	r3, [sp, #4]
 8005c00:	b963      	cbnz	r3, 8005c1c <_dtoa_r+0x954>
 8005c02:	4631      	mov	r1, r6
 8005c04:	2205      	movs	r2, #5
 8005c06:	4620      	mov	r0, r4
 8005c08:	f000 fab2 	bl	8006170 <__multadd>
 8005c0c:	4601      	mov	r1, r0
 8005c0e:	4606      	mov	r6, r0
 8005c10:	4650      	mov	r0, sl
 8005c12:	f000 fcc7 	bl	80065a4 <__mcmp>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	f73f adbb 	bgt.w	8005792 <_dtoa_r+0x4ca>
 8005c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c1e:	9d00      	ldr	r5, [sp, #0]
 8005c20:	ea6f 0b03 	mvn.w	fp, r3
 8005c24:	f04f 0800 	mov.w	r8, #0
 8005c28:	4631      	mov	r1, r6
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f000 fa7e 	bl	800612c <_Bfree>
 8005c30:	2f00      	cmp	r7, #0
 8005c32:	f43f aeab 	beq.w	800598c <_dtoa_r+0x6c4>
 8005c36:	f1b8 0f00 	cmp.w	r8, #0
 8005c3a:	d005      	beq.n	8005c48 <_dtoa_r+0x980>
 8005c3c:	45b8      	cmp	r8, r7
 8005c3e:	d003      	beq.n	8005c48 <_dtoa_r+0x980>
 8005c40:	4641      	mov	r1, r8
 8005c42:	4620      	mov	r0, r4
 8005c44:	f000 fa72 	bl	800612c <_Bfree>
 8005c48:	4639      	mov	r1, r7
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f000 fa6e 	bl	800612c <_Bfree>
 8005c50:	e69c      	b.n	800598c <_dtoa_r+0x6c4>
 8005c52:	2600      	movs	r6, #0
 8005c54:	4637      	mov	r7, r6
 8005c56:	e7e1      	b.n	8005c1c <_dtoa_r+0x954>
 8005c58:	46bb      	mov	fp, r7
 8005c5a:	4637      	mov	r7, r6
 8005c5c:	e599      	b.n	8005792 <_dtoa_r+0x4ca>
 8005c5e:	bf00      	nop
 8005c60:	40240000 	.word	0x40240000
 8005c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 80c8 	beq.w	8005dfc <_dtoa_r+0xb34>
 8005c6c:	9b04      	ldr	r3, [sp, #16]
 8005c6e:	9301      	str	r3, [sp, #4]
 8005c70:	2d00      	cmp	r5, #0
 8005c72:	dd05      	ble.n	8005c80 <_dtoa_r+0x9b8>
 8005c74:	4639      	mov	r1, r7
 8005c76:	462a      	mov	r2, r5
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 fc27 	bl	80064cc <__lshift>
 8005c7e:	4607      	mov	r7, r0
 8005c80:	f1b8 0f00 	cmp.w	r8, #0
 8005c84:	d05b      	beq.n	8005d3e <_dtoa_r+0xa76>
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f000 fa0f 	bl	80060ac <_Balloc>
 8005c8e:	4605      	mov	r5, r0
 8005c90:	b928      	cbnz	r0, 8005c9e <_dtoa_r+0x9d6>
 8005c92:	4b83      	ldr	r3, [pc, #524]	; (8005ea0 <_dtoa_r+0xbd8>)
 8005c94:	4602      	mov	r2, r0
 8005c96:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005c9a:	f7ff bb2e 	b.w	80052fa <_dtoa_r+0x32>
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	3202      	adds	r2, #2
 8005ca2:	0092      	lsls	r2, r2, #2
 8005ca4:	f107 010c 	add.w	r1, r7, #12
 8005ca8:	300c      	adds	r0, #12
 8005caa:	f001 f835 	bl	8006d18 <memcpy>
 8005cae:	2201      	movs	r2, #1
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f000 fc0a 	bl	80064cc <__lshift>
 8005cb8:	9b00      	ldr	r3, [sp, #0]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	9304      	str	r3, [sp, #16]
 8005cbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	9308      	str	r3, [sp, #32]
 8005cc6:	9b02      	ldr	r3, [sp, #8]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	46b8      	mov	r8, r7
 8005cce:	9306      	str	r3, [sp, #24]
 8005cd0:	4607      	mov	r7, r0
 8005cd2:	9b04      	ldr	r3, [sp, #16]
 8005cd4:	4631      	mov	r1, r6
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	4650      	mov	r0, sl
 8005cda:	9301      	str	r3, [sp, #4]
 8005cdc:	f7ff fa69 	bl	80051b2 <quorem>
 8005ce0:	4641      	mov	r1, r8
 8005ce2:	9002      	str	r0, [sp, #8]
 8005ce4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005ce8:	4650      	mov	r0, sl
 8005cea:	f000 fc5b 	bl	80065a4 <__mcmp>
 8005cee:	463a      	mov	r2, r7
 8005cf0:	9005      	str	r0, [sp, #20]
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f000 fc71 	bl	80065dc <__mdiff>
 8005cfa:	68c2      	ldr	r2, [r0, #12]
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	bb02      	cbnz	r2, 8005d42 <_dtoa_r+0xa7a>
 8005d00:	4601      	mov	r1, r0
 8005d02:	4650      	mov	r0, sl
 8005d04:	f000 fc4e 	bl	80065a4 <__mcmp>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	9209      	str	r2, [sp, #36]	; 0x24
 8005d10:	f000 fa0c 	bl	800612c <_Bfree>
 8005d14:	9b07      	ldr	r3, [sp, #28]
 8005d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d18:	9d04      	ldr	r5, [sp, #16]
 8005d1a:	ea43 0102 	orr.w	r1, r3, r2
 8005d1e:	9b06      	ldr	r3, [sp, #24]
 8005d20:	4319      	orrs	r1, r3
 8005d22:	d110      	bne.n	8005d46 <_dtoa_r+0xa7e>
 8005d24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d28:	d029      	beq.n	8005d7e <_dtoa_r+0xab6>
 8005d2a:	9b05      	ldr	r3, [sp, #20]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	dd02      	ble.n	8005d36 <_dtoa_r+0xa6e>
 8005d30:	9b02      	ldr	r3, [sp, #8]
 8005d32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005d36:	9b01      	ldr	r3, [sp, #4]
 8005d38:	f883 9000 	strb.w	r9, [r3]
 8005d3c:	e774      	b.n	8005c28 <_dtoa_r+0x960>
 8005d3e:	4638      	mov	r0, r7
 8005d40:	e7ba      	b.n	8005cb8 <_dtoa_r+0x9f0>
 8005d42:	2201      	movs	r2, #1
 8005d44:	e7e1      	b.n	8005d0a <_dtoa_r+0xa42>
 8005d46:	9b05      	ldr	r3, [sp, #20]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	db04      	blt.n	8005d56 <_dtoa_r+0xa8e>
 8005d4c:	9907      	ldr	r1, [sp, #28]
 8005d4e:	430b      	orrs	r3, r1
 8005d50:	9906      	ldr	r1, [sp, #24]
 8005d52:	430b      	orrs	r3, r1
 8005d54:	d120      	bne.n	8005d98 <_dtoa_r+0xad0>
 8005d56:	2a00      	cmp	r2, #0
 8005d58:	dded      	ble.n	8005d36 <_dtoa_r+0xa6e>
 8005d5a:	4651      	mov	r1, sl
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f000 fbb4 	bl	80064cc <__lshift>
 8005d64:	4631      	mov	r1, r6
 8005d66:	4682      	mov	sl, r0
 8005d68:	f000 fc1c 	bl	80065a4 <__mcmp>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	dc03      	bgt.n	8005d78 <_dtoa_r+0xab0>
 8005d70:	d1e1      	bne.n	8005d36 <_dtoa_r+0xa6e>
 8005d72:	f019 0f01 	tst.w	r9, #1
 8005d76:	d0de      	beq.n	8005d36 <_dtoa_r+0xa6e>
 8005d78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d7c:	d1d8      	bne.n	8005d30 <_dtoa_r+0xa68>
 8005d7e:	9a01      	ldr	r2, [sp, #4]
 8005d80:	2339      	movs	r3, #57	; 0x39
 8005d82:	7013      	strb	r3, [r2, #0]
 8005d84:	462b      	mov	r3, r5
 8005d86:	461d      	mov	r5, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d8e:	2a39      	cmp	r2, #57	; 0x39
 8005d90:	d06c      	beq.n	8005e6c <_dtoa_r+0xba4>
 8005d92:	3201      	adds	r2, #1
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	e747      	b.n	8005c28 <_dtoa_r+0x960>
 8005d98:	2a00      	cmp	r2, #0
 8005d9a:	dd07      	ble.n	8005dac <_dtoa_r+0xae4>
 8005d9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005da0:	d0ed      	beq.n	8005d7e <_dtoa_r+0xab6>
 8005da2:	9a01      	ldr	r2, [sp, #4]
 8005da4:	f109 0301 	add.w	r3, r9, #1
 8005da8:	7013      	strb	r3, [r2, #0]
 8005daa:	e73d      	b.n	8005c28 <_dtoa_r+0x960>
 8005dac:	9b04      	ldr	r3, [sp, #16]
 8005dae:	9a08      	ldr	r2, [sp, #32]
 8005db0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d043      	beq.n	8005e40 <_dtoa_r+0xb78>
 8005db8:	4651      	mov	r1, sl
 8005dba:	2300      	movs	r3, #0
 8005dbc:	220a      	movs	r2, #10
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f000 f9d6 	bl	8006170 <__multadd>
 8005dc4:	45b8      	cmp	r8, r7
 8005dc6:	4682      	mov	sl, r0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	f04f 020a 	mov.w	r2, #10
 8005dd0:	4641      	mov	r1, r8
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	d107      	bne.n	8005de6 <_dtoa_r+0xb1e>
 8005dd6:	f000 f9cb 	bl	8006170 <__multadd>
 8005dda:	4680      	mov	r8, r0
 8005ddc:	4607      	mov	r7, r0
 8005dde:	9b04      	ldr	r3, [sp, #16]
 8005de0:	3301      	adds	r3, #1
 8005de2:	9304      	str	r3, [sp, #16]
 8005de4:	e775      	b.n	8005cd2 <_dtoa_r+0xa0a>
 8005de6:	f000 f9c3 	bl	8006170 <__multadd>
 8005dea:	4639      	mov	r1, r7
 8005dec:	4680      	mov	r8, r0
 8005dee:	2300      	movs	r3, #0
 8005df0:	220a      	movs	r2, #10
 8005df2:	4620      	mov	r0, r4
 8005df4:	f000 f9bc 	bl	8006170 <__multadd>
 8005df8:	4607      	mov	r7, r0
 8005dfa:	e7f0      	b.n	8005dde <_dtoa_r+0xb16>
 8005dfc:	9b04      	ldr	r3, [sp, #16]
 8005dfe:	9301      	str	r3, [sp, #4]
 8005e00:	9d00      	ldr	r5, [sp, #0]
 8005e02:	4631      	mov	r1, r6
 8005e04:	4650      	mov	r0, sl
 8005e06:	f7ff f9d4 	bl	80051b2 <quorem>
 8005e0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005e0e:	9b00      	ldr	r3, [sp, #0]
 8005e10:	f805 9b01 	strb.w	r9, [r5], #1
 8005e14:	1aea      	subs	r2, r5, r3
 8005e16:	9b01      	ldr	r3, [sp, #4]
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	dd07      	ble.n	8005e2c <_dtoa_r+0xb64>
 8005e1c:	4651      	mov	r1, sl
 8005e1e:	2300      	movs	r3, #0
 8005e20:	220a      	movs	r2, #10
 8005e22:	4620      	mov	r0, r4
 8005e24:	f000 f9a4 	bl	8006170 <__multadd>
 8005e28:	4682      	mov	sl, r0
 8005e2a:	e7ea      	b.n	8005e02 <_dtoa_r+0xb3a>
 8005e2c:	9b01      	ldr	r3, [sp, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	bfc8      	it	gt
 8005e32:	461d      	movgt	r5, r3
 8005e34:	9b00      	ldr	r3, [sp, #0]
 8005e36:	bfd8      	it	le
 8005e38:	2501      	movle	r5, #1
 8005e3a:	441d      	add	r5, r3
 8005e3c:	f04f 0800 	mov.w	r8, #0
 8005e40:	4651      	mov	r1, sl
 8005e42:	2201      	movs	r2, #1
 8005e44:	4620      	mov	r0, r4
 8005e46:	f000 fb41 	bl	80064cc <__lshift>
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	4682      	mov	sl, r0
 8005e4e:	f000 fba9 	bl	80065a4 <__mcmp>
 8005e52:	2800      	cmp	r0, #0
 8005e54:	dc96      	bgt.n	8005d84 <_dtoa_r+0xabc>
 8005e56:	d102      	bne.n	8005e5e <_dtoa_r+0xb96>
 8005e58:	f019 0f01 	tst.w	r9, #1
 8005e5c:	d192      	bne.n	8005d84 <_dtoa_r+0xabc>
 8005e5e:	462b      	mov	r3, r5
 8005e60:	461d      	mov	r5, r3
 8005e62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e66:	2a30      	cmp	r2, #48	; 0x30
 8005e68:	d0fa      	beq.n	8005e60 <_dtoa_r+0xb98>
 8005e6a:	e6dd      	b.n	8005c28 <_dtoa_r+0x960>
 8005e6c:	9a00      	ldr	r2, [sp, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d189      	bne.n	8005d86 <_dtoa_r+0xabe>
 8005e72:	f10b 0b01 	add.w	fp, fp, #1
 8005e76:	2331      	movs	r3, #49	; 0x31
 8005e78:	e796      	b.n	8005da8 <_dtoa_r+0xae0>
 8005e7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ea4 <_dtoa_r+0xbdc>)
 8005e7c:	f7ff ba99 	b.w	80053b2 <_dtoa_r+0xea>
 8005e80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f47f aa6d 	bne.w	8005362 <_dtoa_r+0x9a>
 8005e88:	4b07      	ldr	r3, [pc, #28]	; (8005ea8 <_dtoa_r+0xbe0>)
 8005e8a:	f7ff ba92 	b.w	80053b2 <_dtoa_r+0xea>
 8005e8e:	9b01      	ldr	r3, [sp, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	dcb5      	bgt.n	8005e00 <_dtoa_r+0xb38>
 8005e94:	9b07      	ldr	r3, [sp, #28]
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	f73f aeb1 	bgt.w	8005bfe <_dtoa_r+0x936>
 8005e9c:	e7b0      	b.n	8005e00 <_dtoa_r+0xb38>
 8005e9e:	bf00      	nop
 8005ea0:	08007774 	.word	0x08007774
 8005ea4:	080076d4 	.word	0x080076d4
 8005ea8:	080076f8 	.word	0x080076f8

08005eac <_free_r>:
 8005eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eae:	2900      	cmp	r1, #0
 8005eb0:	d044      	beq.n	8005f3c <_free_r+0x90>
 8005eb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eb6:	9001      	str	r0, [sp, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f1a1 0404 	sub.w	r4, r1, #4
 8005ebe:	bfb8      	it	lt
 8005ec0:	18e4      	addlt	r4, r4, r3
 8005ec2:	f000 f8e7 	bl	8006094 <__malloc_lock>
 8005ec6:	4a1e      	ldr	r2, [pc, #120]	; (8005f40 <_free_r+0x94>)
 8005ec8:	9801      	ldr	r0, [sp, #4]
 8005eca:	6813      	ldr	r3, [r2, #0]
 8005ecc:	b933      	cbnz	r3, 8005edc <_free_r+0x30>
 8005ece:	6063      	str	r3, [r4, #4]
 8005ed0:	6014      	str	r4, [r2, #0]
 8005ed2:	b003      	add	sp, #12
 8005ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ed8:	f000 b8e2 	b.w	80060a0 <__malloc_unlock>
 8005edc:	42a3      	cmp	r3, r4
 8005ede:	d908      	bls.n	8005ef2 <_free_r+0x46>
 8005ee0:	6825      	ldr	r5, [r4, #0]
 8005ee2:	1961      	adds	r1, r4, r5
 8005ee4:	428b      	cmp	r3, r1
 8005ee6:	bf01      	itttt	eq
 8005ee8:	6819      	ldreq	r1, [r3, #0]
 8005eea:	685b      	ldreq	r3, [r3, #4]
 8005eec:	1949      	addeq	r1, r1, r5
 8005eee:	6021      	streq	r1, [r4, #0]
 8005ef0:	e7ed      	b.n	8005ece <_free_r+0x22>
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	b10b      	cbz	r3, 8005efc <_free_r+0x50>
 8005ef8:	42a3      	cmp	r3, r4
 8005efa:	d9fa      	bls.n	8005ef2 <_free_r+0x46>
 8005efc:	6811      	ldr	r1, [r2, #0]
 8005efe:	1855      	adds	r5, r2, r1
 8005f00:	42a5      	cmp	r5, r4
 8005f02:	d10b      	bne.n	8005f1c <_free_r+0x70>
 8005f04:	6824      	ldr	r4, [r4, #0]
 8005f06:	4421      	add	r1, r4
 8005f08:	1854      	adds	r4, r2, r1
 8005f0a:	42a3      	cmp	r3, r4
 8005f0c:	6011      	str	r1, [r2, #0]
 8005f0e:	d1e0      	bne.n	8005ed2 <_free_r+0x26>
 8005f10:	681c      	ldr	r4, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	6053      	str	r3, [r2, #4]
 8005f16:	440c      	add	r4, r1
 8005f18:	6014      	str	r4, [r2, #0]
 8005f1a:	e7da      	b.n	8005ed2 <_free_r+0x26>
 8005f1c:	d902      	bls.n	8005f24 <_free_r+0x78>
 8005f1e:	230c      	movs	r3, #12
 8005f20:	6003      	str	r3, [r0, #0]
 8005f22:	e7d6      	b.n	8005ed2 <_free_r+0x26>
 8005f24:	6825      	ldr	r5, [r4, #0]
 8005f26:	1961      	adds	r1, r4, r5
 8005f28:	428b      	cmp	r3, r1
 8005f2a:	bf04      	itt	eq
 8005f2c:	6819      	ldreq	r1, [r3, #0]
 8005f2e:	685b      	ldreq	r3, [r3, #4]
 8005f30:	6063      	str	r3, [r4, #4]
 8005f32:	bf04      	itt	eq
 8005f34:	1949      	addeq	r1, r1, r5
 8005f36:	6021      	streq	r1, [r4, #0]
 8005f38:	6054      	str	r4, [r2, #4]
 8005f3a:	e7ca      	b.n	8005ed2 <_free_r+0x26>
 8005f3c:	b003      	add	sp, #12
 8005f3e:	bd30      	pop	{r4, r5, pc}
 8005f40:	2000109c 	.word	0x2000109c

08005f44 <malloc>:
 8005f44:	4b02      	ldr	r3, [pc, #8]	; (8005f50 <malloc+0xc>)
 8005f46:	4601      	mov	r1, r0
 8005f48:	6818      	ldr	r0, [r3, #0]
 8005f4a:	f000 b823 	b.w	8005f94 <_malloc_r>
 8005f4e:	bf00      	nop
 8005f50:	20000074 	.word	0x20000074

08005f54 <sbrk_aligned>:
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	4e0e      	ldr	r6, [pc, #56]	; (8005f90 <sbrk_aligned+0x3c>)
 8005f58:	460c      	mov	r4, r1
 8005f5a:	6831      	ldr	r1, [r6, #0]
 8005f5c:	4605      	mov	r5, r0
 8005f5e:	b911      	cbnz	r1, 8005f66 <sbrk_aligned+0x12>
 8005f60:	f000 feca 	bl	8006cf8 <_sbrk_r>
 8005f64:	6030      	str	r0, [r6, #0]
 8005f66:	4621      	mov	r1, r4
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f000 fec5 	bl	8006cf8 <_sbrk_r>
 8005f6e:	1c43      	adds	r3, r0, #1
 8005f70:	d00a      	beq.n	8005f88 <sbrk_aligned+0x34>
 8005f72:	1cc4      	adds	r4, r0, #3
 8005f74:	f024 0403 	bic.w	r4, r4, #3
 8005f78:	42a0      	cmp	r0, r4
 8005f7a:	d007      	beq.n	8005f8c <sbrk_aligned+0x38>
 8005f7c:	1a21      	subs	r1, r4, r0
 8005f7e:	4628      	mov	r0, r5
 8005f80:	f000 feba 	bl	8006cf8 <_sbrk_r>
 8005f84:	3001      	adds	r0, #1
 8005f86:	d101      	bne.n	8005f8c <sbrk_aligned+0x38>
 8005f88:	f04f 34ff 	mov.w	r4, #4294967295
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
 8005f90:	200010a0 	.word	0x200010a0

08005f94 <_malloc_r>:
 8005f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f98:	1ccd      	adds	r5, r1, #3
 8005f9a:	f025 0503 	bic.w	r5, r5, #3
 8005f9e:	3508      	adds	r5, #8
 8005fa0:	2d0c      	cmp	r5, #12
 8005fa2:	bf38      	it	cc
 8005fa4:	250c      	movcc	r5, #12
 8005fa6:	2d00      	cmp	r5, #0
 8005fa8:	4607      	mov	r7, r0
 8005faa:	db01      	blt.n	8005fb0 <_malloc_r+0x1c>
 8005fac:	42a9      	cmp	r1, r5
 8005fae:	d905      	bls.n	8005fbc <_malloc_r+0x28>
 8005fb0:	230c      	movs	r3, #12
 8005fb2:	603b      	str	r3, [r7, #0]
 8005fb4:	2600      	movs	r6, #0
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006090 <_malloc_r+0xfc>
 8005fc0:	f000 f868 	bl	8006094 <__malloc_lock>
 8005fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8005fc8:	461c      	mov	r4, r3
 8005fca:	bb5c      	cbnz	r4, 8006024 <_malloc_r+0x90>
 8005fcc:	4629      	mov	r1, r5
 8005fce:	4638      	mov	r0, r7
 8005fd0:	f7ff ffc0 	bl	8005f54 <sbrk_aligned>
 8005fd4:	1c43      	adds	r3, r0, #1
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	d155      	bne.n	8006086 <_malloc_r+0xf2>
 8005fda:	f8d8 4000 	ldr.w	r4, [r8]
 8005fde:	4626      	mov	r6, r4
 8005fe0:	2e00      	cmp	r6, #0
 8005fe2:	d145      	bne.n	8006070 <_malloc_r+0xdc>
 8005fe4:	2c00      	cmp	r4, #0
 8005fe6:	d048      	beq.n	800607a <_malloc_r+0xe6>
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	4631      	mov	r1, r6
 8005fec:	4638      	mov	r0, r7
 8005fee:	eb04 0903 	add.w	r9, r4, r3
 8005ff2:	f000 fe81 	bl	8006cf8 <_sbrk_r>
 8005ff6:	4581      	cmp	r9, r0
 8005ff8:	d13f      	bne.n	800607a <_malloc_r+0xe6>
 8005ffa:	6821      	ldr	r1, [r4, #0]
 8005ffc:	1a6d      	subs	r5, r5, r1
 8005ffe:	4629      	mov	r1, r5
 8006000:	4638      	mov	r0, r7
 8006002:	f7ff ffa7 	bl	8005f54 <sbrk_aligned>
 8006006:	3001      	adds	r0, #1
 8006008:	d037      	beq.n	800607a <_malloc_r+0xe6>
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	442b      	add	r3, r5
 800600e:	6023      	str	r3, [r4, #0]
 8006010:	f8d8 3000 	ldr.w	r3, [r8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d038      	beq.n	800608a <_malloc_r+0xf6>
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	42a2      	cmp	r2, r4
 800601c:	d12b      	bne.n	8006076 <_malloc_r+0xe2>
 800601e:	2200      	movs	r2, #0
 8006020:	605a      	str	r2, [r3, #4]
 8006022:	e00f      	b.n	8006044 <_malloc_r+0xb0>
 8006024:	6822      	ldr	r2, [r4, #0]
 8006026:	1b52      	subs	r2, r2, r5
 8006028:	d41f      	bmi.n	800606a <_malloc_r+0xd6>
 800602a:	2a0b      	cmp	r2, #11
 800602c:	d917      	bls.n	800605e <_malloc_r+0xca>
 800602e:	1961      	adds	r1, r4, r5
 8006030:	42a3      	cmp	r3, r4
 8006032:	6025      	str	r5, [r4, #0]
 8006034:	bf18      	it	ne
 8006036:	6059      	strne	r1, [r3, #4]
 8006038:	6863      	ldr	r3, [r4, #4]
 800603a:	bf08      	it	eq
 800603c:	f8c8 1000 	streq.w	r1, [r8]
 8006040:	5162      	str	r2, [r4, r5]
 8006042:	604b      	str	r3, [r1, #4]
 8006044:	4638      	mov	r0, r7
 8006046:	f104 060b 	add.w	r6, r4, #11
 800604a:	f000 f829 	bl	80060a0 <__malloc_unlock>
 800604e:	f026 0607 	bic.w	r6, r6, #7
 8006052:	1d23      	adds	r3, r4, #4
 8006054:	1af2      	subs	r2, r6, r3
 8006056:	d0ae      	beq.n	8005fb6 <_malloc_r+0x22>
 8006058:	1b9b      	subs	r3, r3, r6
 800605a:	50a3      	str	r3, [r4, r2]
 800605c:	e7ab      	b.n	8005fb6 <_malloc_r+0x22>
 800605e:	42a3      	cmp	r3, r4
 8006060:	6862      	ldr	r2, [r4, #4]
 8006062:	d1dd      	bne.n	8006020 <_malloc_r+0x8c>
 8006064:	f8c8 2000 	str.w	r2, [r8]
 8006068:	e7ec      	b.n	8006044 <_malloc_r+0xb0>
 800606a:	4623      	mov	r3, r4
 800606c:	6864      	ldr	r4, [r4, #4]
 800606e:	e7ac      	b.n	8005fca <_malloc_r+0x36>
 8006070:	4634      	mov	r4, r6
 8006072:	6876      	ldr	r6, [r6, #4]
 8006074:	e7b4      	b.n	8005fe0 <_malloc_r+0x4c>
 8006076:	4613      	mov	r3, r2
 8006078:	e7cc      	b.n	8006014 <_malloc_r+0x80>
 800607a:	230c      	movs	r3, #12
 800607c:	603b      	str	r3, [r7, #0]
 800607e:	4638      	mov	r0, r7
 8006080:	f000 f80e 	bl	80060a0 <__malloc_unlock>
 8006084:	e797      	b.n	8005fb6 <_malloc_r+0x22>
 8006086:	6025      	str	r5, [r4, #0]
 8006088:	e7dc      	b.n	8006044 <_malloc_r+0xb0>
 800608a:	605b      	str	r3, [r3, #4]
 800608c:	deff      	udf	#255	; 0xff
 800608e:	bf00      	nop
 8006090:	2000109c 	.word	0x2000109c

08006094 <__malloc_lock>:
 8006094:	4801      	ldr	r0, [pc, #4]	; (800609c <__malloc_lock+0x8>)
 8006096:	f7ff b88a 	b.w	80051ae <__retarget_lock_acquire_recursive>
 800609a:	bf00      	nop
 800609c:	20001098 	.word	0x20001098

080060a0 <__malloc_unlock>:
 80060a0:	4801      	ldr	r0, [pc, #4]	; (80060a8 <__malloc_unlock+0x8>)
 80060a2:	f7ff b885 	b.w	80051b0 <__retarget_lock_release_recursive>
 80060a6:	bf00      	nop
 80060a8:	20001098 	.word	0x20001098

080060ac <_Balloc>:
 80060ac:	b570      	push	{r4, r5, r6, lr}
 80060ae:	69c6      	ldr	r6, [r0, #28]
 80060b0:	4604      	mov	r4, r0
 80060b2:	460d      	mov	r5, r1
 80060b4:	b976      	cbnz	r6, 80060d4 <_Balloc+0x28>
 80060b6:	2010      	movs	r0, #16
 80060b8:	f7ff ff44 	bl	8005f44 <malloc>
 80060bc:	4602      	mov	r2, r0
 80060be:	61e0      	str	r0, [r4, #28]
 80060c0:	b920      	cbnz	r0, 80060cc <_Balloc+0x20>
 80060c2:	4b18      	ldr	r3, [pc, #96]	; (8006124 <_Balloc+0x78>)
 80060c4:	4818      	ldr	r0, [pc, #96]	; (8006128 <_Balloc+0x7c>)
 80060c6:	216b      	movs	r1, #107	; 0x6b
 80060c8:	f000 fe34 	bl	8006d34 <__assert_func>
 80060cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060d0:	6006      	str	r6, [r0, #0]
 80060d2:	60c6      	str	r6, [r0, #12]
 80060d4:	69e6      	ldr	r6, [r4, #28]
 80060d6:	68f3      	ldr	r3, [r6, #12]
 80060d8:	b183      	cbz	r3, 80060fc <_Balloc+0x50>
 80060da:	69e3      	ldr	r3, [r4, #28]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060e2:	b9b8      	cbnz	r0, 8006114 <_Balloc+0x68>
 80060e4:	2101      	movs	r1, #1
 80060e6:	fa01 f605 	lsl.w	r6, r1, r5
 80060ea:	1d72      	adds	r2, r6, #5
 80060ec:	0092      	lsls	r2, r2, #2
 80060ee:	4620      	mov	r0, r4
 80060f0:	f000 fe3e 	bl	8006d70 <_calloc_r>
 80060f4:	b160      	cbz	r0, 8006110 <_Balloc+0x64>
 80060f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060fa:	e00e      	b.n	800611a <_Balloc+0x6e>
 80060fc:	2221      	movs	r2, #33	; 0x21
 80060fe:	2104      	movs	r1, #4
 8006100:	4620      	mov	r0, r4
 8006102:	f000 fe35 	bl	8006d70 <_calloc_r>
 8006106:	69e3      	ldr	r3, [r4, #28]
 8006108:	60f0      	str	r0, [r6, #12]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e4      	bne.n	80060da <_Balloc+0x2e>
 8006110:	2000      	movs	r0, #0
 8006112:	bd70      	pop	{r4, r5, r6, pc}
 8006114:	6802      	ldr	r2, [r0, #0]
 8006116:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800611a:	2300      	movs	r3, #0
 800611c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006120:	e7f7      	b.n	8006112 <_Balloc+0x66>
 8006122:	bf00      	nop
 8006124:	08007705 	.word	0x08007705
 8006128:	08007785 	.word	0x08007785

0800612c <_Bfree>:
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	69c6      	ldr	r6, [r0, #28]
 8006130:	4605      	mov	r5, r0
 8006132:	460c      	mov	r4, r1
 8006134:	b976      	cbnz	r6, 8006154 <_Bfree+0x28>
 8006136:	2010      	movs	r0, #16
 8006138:	f7ff ff04 	bl	8005f44 <malloc>
 800613c:	4602      	mov	r2, r0
 800613e:	61e8      	str	r0, [r5, #28]
 8006140:	b920      	cbnz	r0, 800614c <_Bfree+0x20>
 8006142:	4b09      	ldr	r3, [pc, #36]	; (8006168 <_Bfree+0x3c>)
 8006144:	4809      	ldr	r0, [pc, #36]	; (800616c <_Bfree+0x40>)
 8006146:	218f      	movs	r1, #143	; 0x8f
 8006148:	f000 fdf4 	bl	8006d34 <__assert_func>
 800614c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006150:	6006      	str	r6, [r0, #0]
 8006152:	60c6      	str	r6, [r0, #12]
 8006154:	b13c      	cbz	r4, 8006166 <_Bfree+0x3a>
 8006156:	69eb      	ldr	r3, [r5, #28]
 8006158:	6862      	ldr	r2, [r4, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006160:	6021      	str	r1, [r4, #0]
 8006162:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006166:	bd70      	pop	{r4, r5, r6, pc}
 8006168:	08007705 	.word	0x08007705
 800616c:	08007785 	.word	0x08007785

08006170 <__multadd>:
 8006170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006174:	690d      	ldr	r5, [r1, #16]
 8006176:	4607      	mov	r7, r0
 8006178:	460c      	mov	r4, r1
 800617a:	461e      	mov	r6, r3
 800617c:	f101 0c14 	add.w	ip, r1, #20
 8006180:	2000      	movs	r0, #0
 8006182:	f8dc 3000 	ldr.w	r3, [ip]
 8006186:	b299      	uxth	r1, r3
 8006188:	fb02 6101 	mla	r1, r2, r1, r6
 800618c:	0c1e      	lsrs	r6, r3, #16
 800618e:	0c0b      	lsrs	r3, r1, #16
 8006190:	fb02 3306 	mla	r3, r2, r6, r3
 8006194:	b289      	uxth	r1, r1
 8006196:	3001      	adds	r0, #1
 8006198:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800619c:	4285      	cmp	r5, r0
 800619e:	f84c 1b04 	str.w	r1, [ip], #4
 80061a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80061a6:	dcec      	bgt.n	8006182 <__multadd+0x12>
 80061a8:	b30e      	cbz	r6, 80061ee <__multadd+0x7e>
 80061aa:	68a3      	ldr	r3, [r4, #8]
 80061ac:	42ab      	cmp	r3, r5
 80061ae:	dc19      	bgt.n	80061e4 <__multadd+0x74>
 80061b0:	6861      	ldr	r1, [r4, #4]
 80061b2:	4638      	mov	r0, r7
 80061b4:	3101      	adds	r1, #1
 80061b6:	f7ff ff79 	bl	80060ac <_Balloc>
 80061ba:	4680      	mov	r8, r0
 80061bc:	b928      	cbnz	r0, 80061ca <__multadd+0x5a>
 80061be:	4602      	mov	r2, r0
 80061c0:	4b0c      	ldr	r3, [pc, #48]	; (80061f4 <__multadd+0x84>)
 80061c2:	480d      	ldr	r0, [pc, #52]	; (80061f8 <__multadd+0x88>)
 80061c4:	21ba      	movs	r1, #186	; 0xba
 80061c6:	f000 fdb5 	bl	8006d34 <__assert_func>
 80061ca:	6922      	ldr	r2, [r4, #16]
 80061cc:	3202      	adds	r2, #2
 80061ce:	f104 010c 	add.w	r1, r4, #12
 80061d2:	0092      	lsls	r2, r2, #2
 80061d4:	300c      	adds	r0, #12
 80061d6:	f000 fd9f 	bl	8006d18 <memcpy>
 80061da:	4621      	mov	r1, r4
 80061dc:	4638      	mov	r0, r7
 80061de:	f7ff ffa5 	bl	800612c <_Bfree>
 80061e2:	4644      	mov	r4, r8
 80061e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061e8:	3501      	adds	r5, #1
 80061ea:	615e      	str	r6, [r3, #20]
 80061ec:	6125      	str	r5, [r4, #16]
 80061ee:	4620      	mov	r0, r4
 80061f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061f4:	08007774 	.word	0x08007774
 80061f8:	08007785 	.word	0x08007785

080061fc <__hi0bits>:
 80061fc:	0c03      	lsrs	r3, r0, #16
 80061fe:	041b      	lsls	r3, r3, #16
 8006200:	b9d3      	cbnz	r3, 8006238 <__hi0bits+0x3c>
 8006202:	0400      	lsls	r0, r0, #16
 8006204:	2310      	movs	r3, #16
 8006206:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800620a:	bf04      	itt	eq
 800620c:	0200      	lsleq	r0, r0, #8
 800620e:	3308      	addeq	r3, #8
 8006210:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006214:	bf04      	itt	eq
 8006216:	0100      	lsleq	r0, r0, #4
 8006218:	3304      	addeq	r3, #4
 800621a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800621e:	bf04      	itt	eq
 8006220:	0080      	lsleq	r0, r0, #2
 8006222:	3302      	addeq	r3, #2
 8006224:	2800      	cmp	r0, #0
 8006226:	db05      	blt.n	8006234 <__hi0bits+0x38>
 8006228:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800622c:	f103 0301 	add.w	r3, r3, #1
 8006230:	bf08      	it	eq
 8006232:	2320      	moveq	r3, #32
 8006234:	4618      	mov	r0, r3
 8006236:	4770      	bx	lr
 8006238:	2300      	movs	r3, #0
 800623a:	e7e4      	b.n	8006206 <__hi0bits+0xa>

0800623c <__lo0bits>:
 800623c:	6803      	ldr	r3, [r0, #0]
 800623e:	f013 0207 	ands.w	r2, r3, #7
 8006242:	d00c      	beq.n	800625e <__lo0bits+0x22>
 8006244:	07d9      	lsls	r1, r3, #31
 8006246:	d422      	bmi.n	800628e <__lo0bits+0x52>
 8006248:	079a      	lsls	r2, r3, #30
 800624a:	bf49      	itett	mi
 800624c:	085b      	lsrmi	r3, r3, #1
 800624e:	089b      	lsrpl	r3, r3, #2
 8006250:	6003      	strmi	r3, [r0, #0]
 8006252:	2201      	movmi	r2, #1
 8006254:	bf5c      	itt	pl
 8006256:	6003      	strpl	r3, [r0, #0]
 8006258:	2202      	movpl	r2, #2
 800625a:	4610      	mov	r0, r2
 800625c:	4770      	bx	lr
 800625e:	b299      	uxth	r1, r3
 8006260:	b909      	cbnz	r1, 8006266 <__lo0bits+0x2a>
 8006262:	0c1b      	lsrs	r3, r3, #16
 8006264:	2210      	movs	r2, #16
 8006266:	b2d9      	uxtb	r1, r3
 8006268:	b909      	cbnz	r1, 800626e <__lo0bits+0x32>
 800626a:	3208      	adds	r2, #8
 800626c:	0a1b      	lsrs	r3, r3, #8
 800626e:	0719      	lsls	r1, r3, #28
 8006270:	bf04      	itt	eq
 8006272:	091b      	lsreq	r3, r3, #4
 8006274:	3204      	addeq	r2, #4
 8006276:	0799      	lsls	r1, r3, #30
 8006278:	bf04      	itt	eq
 800627a:	089b      	lsreq	r3, r3, #2
 800627c:	3202      	addeq	r2, #2
 800627e:	07d9      	lsls	r1, r3, #31
 8006280:	d403      	bmi.n	800628a <__lo0bits+0x4e>
 8006282:	085b      	lsrs	r3, r3, #1
 8006284:	f102 0201 	add.w	r2, r2, #1
 8006288:	d003      	beq.n	8006292 <__lo0bits+0x56>
 800628a:	6003      	str	r3, [r0, #0]
 800628c:	e7e5      	b.n	800625a <__lo0bits+0x1e>
 800628e:	2200      	movs	r2, #0
 8006290:	e7e3      	b.n	800625a <__lo0bits+0x1e>
 8006292:	2220      	movs	r2, #32
 8006294:	e7e1      	b.n	800625a <__lo0bits+0x1e>
	...

08006298 <__i2b>:
 8006298:	b510      	push	{r4, lr}
 800629a:	460c      	mov	r4, r1
 800629c:	2101      	movs	r1, #1
 800629e:	f7ff ff05 	bl	80060ac <_Balloc>
 80062a2:	4602      	mov	r2, r0
 80062a4:	b928      	cbnz	r0, 80062b2 <__i2b+0x1a>
 80062a6:	4b05      	ldr	r3, [pc, #20]	; (80062bc <__i2b+0x24>)
 80062a8:	4805      	ldr	r0, [pc, #20]	; (80062c0 <__i2b+0x28>)
 80062aa:	f240 1145 	movw	r1, #325	; 0x145
 80062ae:	f000 fd41 	bl	8006d34 <__assert_func>
 80062b2:	2301      	movs	r3, #1
 80062b4:	6144      	str	r4, [r0, #20]
 80062b6:	6103      	str	r3, [r0, #16]
 80062b8:	bd10      	pop	{r4, pc}
 80062ba:	bf00      	nop
 80062bc:	08007774 	.word	0x08007774
 80062c0:	08007785 	.word	0x08007785

080062c4 <__multiply>:
 80062c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c8:	4691      	mov	r9, r2
 80062ca:	690a      	ldr	r2, [r1, #16]
 80062cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	bfb8      	it	lt
 80062d4:	460b      	movlt	r3, r1
 80062d6:	460c      	mov	r4, r1
 80062d8:	bfbc      	itt	lt
 80062da:	464c      	movlt	r4, r9
 80062dc:	4699      	movlt	r9, r3
 80062de:	6927      	ldr	r7, [r4, #16]
 80062e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80062e4:	68a3      	ldr	r3, [r4, #8]
 80062e6:	6861      	ldr	r1, [r4, #4]
 80062e8:	eb07 060a 	add.w	r6, r7, sl
 80062ec:	42b3      	cmp	r3, r6
 80062ee:	b085      	sub	sp, #20
 80062f0:	bfb8      	it	lt
 80062f2:	3101      	addlt	r1, #1
 80062f4:	f7ff feda 	bl	80060ac <_Balloc>
 80062f8:	b930      	cbnz	r0, 8006308 <__multiply+0x44>
 80062fa:	4602      	mov	r2, r0
 80062fc:	4b44      	ldr	r3, [pc, #272]	; (8006410 <__multiply+0x14c>)
 80062fe:	4845      	ldr	r0, [pc, #276]	; (8006414 <__multiply+0x150>)
 8006300:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006304:	f000 fd16 	bl	8006d34 <__assert_func>
 8006308:	f100 0514 	add.w	r5, r0, #20
 800630c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006310:	462b      	mov	r3, r5
 8006312:	2200      	movs	r2, #0
 8006314:	4543      	cmp	r3, r8
 8006316:	d321      	bcc.n	800635c <__multiply+0x98>
 8006318:	f104 0314 	add.w	r3, r4, #20
 800631c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006320:	f109 0314 	add.w	r3, r9, #20
 8006324:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006328:	9202      	str	r2, [sp, #8]
 800632a:	1b3a      	subs	r2, r7, r4
 800632c:	3a15      	subs	r2, #21
 800632e:	f022 0203 	bic.w	r2, r2, #3
 8006332:	3204      	adds	r2, #4
 8006334:	f104 0115 	add.w	r1, r4, #21
 8006338:	428f      	cmp	r7, r1
 800633a:	bf38      	it	cc
 800633c:	2204      	movcc	r2, #4
 800633e:	9201      	str	r2, [sp, #4]
 8006340:	9a02      	ldr	r2, [sp, #8]
 8006342:	9303      	str	r3, [sp, #12]
 8006344:	429a      	cmp	r2, r3
 8006346:	d80c      	bhi.n	8006362 <__multiply+0x9e>
 8006348:	2e00      	cmp	r6, #0
 800634a:	dd03      	ble.n	8006354 <__multiply+0x90>
 800634c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006350:	2b00      	cmp	r3, #0
 8006352:	d05b      	beq.n	800640c <__multiply+0x148>
 8006354:	6106      	str	r6, [r0, #16]
 8006356:	b005      	add	sp, #20
 8006358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800635c:	f843 2b04 	str.w	r2, [r3], #4
 8006360:	e7d8      	b.n	8006314 <__multiply+0x50>
 8006362:	f8b3 a000 	ldrh.w	sl, [r3]
 8006366:	f1ba 0f00 	cmp.w	sl, #0
 800636a:	d024      	beq.n	80063b6 <__multiply+0xf2>
 800636c:	f104 0e14 	add.w	lr, r4, #20
 8006370:	46a9      	mov	r9, r5
 8006372:	f04f 0c00 	mov.w	ip, #0
 8006376:	f85e 2b04 	ldr.w	r2, [lr], #4
 800637a:	f8d9 1000 	ldr.w	r1, [r9]
 800637e:	fa1f fb82 	uxth.w	fp, r2
 8006382:	b289      	uxth	r1, r1
 8006384:	fb0a 110b 	mla	r1, sl, fp, r1
 8006388:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800638c:	f8d9 2000 	ldr.w	r2, [r9]
 8006390:	4461      	add	r1, ip
 8006392:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006396:	fb0a c20b 	mla	r2, sl, fp, ip
 800639a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800639e:	b289      	uxth	r1, r1
 80063a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80063a4:	4577      	cmp	r7, lr
 80063a6:	f849 1b04 	str.w	r1, [r9], #4
 80063aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063ae:	d8e2      	bhi.n	8006376 <__multiply+0xb2>
 80063b0:	9a01      	ldr	r2, [sp, #4]
 80063b2:	f845 c002 	str.w	ip, [r5, r2]
 80063b6:	9a03      	ldr	r2, [sp, #12]
 80063b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80063bc:	3304      	adds	r3, #4
 80063be:	f1b9 0f00 	cmp.w	r9, #0
 80063c2:	d021      	beq.n	8006408 <__multiply+0x144>
 80063c4:	6829      	ldr	r1, [r5, #0]
 80063c6:	f104 0c14 	add.w	ip, r4, #20
 80063ca:	46ae      	mov	lr, r5
 80063cc:	f04f 0a00 	mov.w	sl, #0
 80063d0:	f8bc b000 	ldrh.w	fp, [ip]
 80063d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80063d8:	fb09 220b 	mla	r2, r9, fp, r2
 80063dc:	4452      	add	r2, sl
 80063de:	b289      	uxth	r1, r1
 80063e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80063e4:	f84e 1b04 	str.w	r1, [lr], #4
 80063e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80063ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80063f0:	f8be 1000 	ldrh.w	r1, [lr]
 80063f4:	fb09 110a 	mla	r1, r9, sl, r1
 80063f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80063fc:	4567      	cmp	r7, ip
 80063fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006402:	d8e5      	bhi.n	80063d0 <__multiply+0x10c>
 8006404:	9a01      	ldr	r2, [sp, #4]
 8006406:	50a9      	str	r1, [r5, r2]
 8006408:	3504      	adds	r5, #4
 800640a:	e799      	b.n	8006340 <__multiply+0x7c>
 800640c:	3e01      	subs	r6, #1
 800640e:	e79b      	b.n	8006348 <__multiply+0x84>
 8006410:	08007774 	.word	0x08007774
 8006414:	08007785 	.word	0x08007785

08006418 <__pow5mult>:
 8006418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800641c:	4615      	mov	r5, r2
 800641e:	f012 0203 	ands.w	r2, r2, #3
 8006422:	4606      	mov	r6, r0
 8006424:	460f      	mov	r7, r1
 8006426:	d007      	beq.n	8006438 <__pow5mult+0x20>
 8006428:	4c25      	ldr	r4, [pc, #148]	; (80064c0 <__pow5mult+0xa8>)
 800642a:	3a01      	subs	r2, #1
 800642c:	2300      	movs	r3, #0
 800642e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006432:	f7ff fe9d 	bl	8006170 <__multadd>
 8006436:	4607      	mov	r7, r0
 8006438:	10ad      	asrs	r5, r5, #2
 800643a:	d03d      	beq.n	80064b8 <__pow5mult+0xa0>
 800643c:	69f4      	ldr	r4, [r6, #28]
 800643e:	b97c      	cbnz	r4, 8006460 <__pow5mult+0x48>
 8006440:	2010      	movs	r0, #16
 8006442:	f7ff fd7f 	bl	8005f44 <malloc>
 8006446:	4602      	mov	r2, r0
 8006448:	61f0      	str	r0, [r6, #28]
 800644a:	b928      	cbnz	r0, 8006458 <__pow5mult+0x40>
 800644c:	4b1d      	ldr	r3, [pc, #116]	; (80064c4 <__pow5mult+0xac>)
 800644e:	481e      	ldr	r0, [pc, #120]	; (80064c8 <__pow5mult+0xb0>)
 8006450:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006454:	f000 fc6e 	bl	8006d34 <__assert_func>
 8006458:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800645c:	6004      	str	r4, [r0, #0]
 800645e:	60c4      	str	r4, [r0, #12]
 8006460:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006464:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006468:	b94c      	cbnz	r4, 800647e <__pow5mult+0x66>
 800646a:	f240 2171 	movw	r1, #625	; 0x271
 800646e:	4630      	mov	r0, r6
 8006470:	f7ff ff12 	bl	8006298 <__i2b>
 8006474:	2300      	movs	r3, #0
 8006476:	f8c8 0008 	str.w	r0, [r8, #8]
 800647a:	4604      	mov	r4, r0
 800647c:	6003      	str	r3, [r0, #0]
 800647e:	f04f 0900 	mov.w	r9, #0
 8006482:	07eb      	lsls	r3, r5, #31
 8006484:	d50a      	bpl.n	800649c <__pow5mult+0x84>
 8006486:	4639      	mov	r1, r7
 8006488:	4622      	mov	r2, r4
 800648a:	4630      	mov	r0, r6
 800648c:	f7ff ff1a 	bl	80062c4 <__multiply>
 8006490:	4639      	mov	r1, r7
 8006492:	4680      	mov	r8, r0
 8006494:	4630      	mov	r0, r6
 8006496:	f7ff fe49 	bl	800612c <_Bfree>
 800649a:	4647      	mov	r7, r8
 800649c:	106d      	asrs	r5, r5, #1
 800649e:	d00b      	beq.n	80064b8 <__pow5mult+0xa0>
 80064a0:	6820      	ldr	r0, [r4, #0]
 80064a2:	b938      	cbnz	r0, 80064b4 <__pow5mult+0x9c>
 80064a4:	4622      	mov	r2, r4
 80064a6:	4621      	mov	r1, r4
 80064a8:	4630      	mov	r0, r6
 80064aa:	f7ff ff0b 	bl	80062c4 <__multiply>
 80064ae:	6020      	str	r0, [r4, #0]
 80064b0:	f8c0 9000 	str.w	r9, [r0]
 80064b4:	4604      	mov	r4, r0
 80064b6:	e7e4      	b.n	8006482 <__pow5mult+0x6a>
 80064b8:	4638      	mov	r0, r7
 80064ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064be:	bf00      	nop
 80064c0:	080078d0 	.word	0x080078d0
 80064c4:	08007705 	.word	0x08007705
 80064c8:	08007785 	.word	0x08007785

080064cc <__lshift>:
 80064cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d0:	460c      	mov	r4, r1
 80064d2:	6849      	ldr	r1, [r1, #4]
 80064d4:	6923      	ldr	r3, [r4, #16]
 80064d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064da:	68a3      	ldr	r3, [r4, #8]
 80064dc:	4607      	mov	r7, r0
 80064de:	4691      	mov	r9, r2
 80064e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064e4:	f108 0601 	add.w	r6, r8, #1
 80064e8:	42b3      	cmp	r3, r6
 80064ea:	db0b      	blt.n	8006504 <__lshift+0x38>
 80064ec:	4638      	mov	r0, r7
 80064ee:	f7ff fddd 	bl	80060ac <_Balloc>
 80064f2:	4605      	mov	r5, r0
 80064f4:	b948      	cbnz	r0, 800650a <__lshift+0x3e>
 80064f6:	4602      	mov	r2, r0
 80064f8:	4b28      	ldr	r3, [pc, #160]	; (800659c <__lshift+0xd0>)
 80064fa:	4829      	ldr	r0, [pc, #164]	; (80065a0 <__lshift+0xd4>)
 80064fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006500:	f000 fc18 	bl	8006d34 <__assert_func>
 8006504:	3101      	adds	r1, #1
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	e7ee      	b.n	80064e8 <__lshift+0x1c>
 800650a:	2300      	movs	r3, #0
 800650c:	f100 0114 	add.w	r1, r0, #20
 8006510:	f100 0210 	add.w	r2, r0, #16
 8006514:	4618      	mov	r0, r3
 8006516:	4553      	cmp	r3, sl
 8006518:	db33      	blt.n	8006582 <__lshift+0xb6>
 800651a:	6920      	ldr	r0, [r4, #16]
 800651c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006520:	f104 0314 	add.w	r3, r4, #20
 8006524:	f019 091f 	ands.w	r9, r9, #31
 8006528:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800652c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006530:	d02b      	beq.n	800658a <__lshift+0xbe>
 8006532:	f1c9 0e20 	rsb	lr, r9, #32
 8006536:	468a      	mov	sl, r1
 8006538:	2200      	movs	r2, #0
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	fa00 f009 	lsl.w	r0, r0, r9
 8006540:	4310      	orrs	r0, r2
 8006542:	f84a 0b04 	str.w	r0, [sl], #4
 8006546:	f853 2b04 	ldr.w	r2, [r3], #4
 800654a:	459c      	cmp	ip, r3
 800654c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006550:	d8f3      	bhi.n	800653a <__lshift+0x6e>
 8006552:	ebac 0304 	sub.w	r3, ip, r4
 8006556:	3b15      	subs	r3, #21
 8006558:	f023 0303 	bic.w	r3, r3, #3
 800655c:	3304      	adds	r3, #4
 800655e:	f104 0015 	add.w	r0, r4, #21
 8006562:	4584      	cmp	ip, r0
 8006564:	bf38      	it	cc
 8006566:	2304      	movcc	r3, #4
 8006568:	50ca      	str	r2, [r1, r3]
 800656a:	b10a      	cbz	r2, 8006570 <__lshift+0xa4>
 800656c:	f108 0602 	add.w	r6, r8, #2
 8006570:	3e01      	subs	r6, #1
 8006572:	4638      	mov	r0, r7
 8006574:	612e      	str	r6, [r5, #16]
 8006576:	4621      	mov	r1, r4
 8006578:	f7ff fdd8 	bl	800612c <_Bfree>
 800657c:	4628      	mov	r0, r5
 800657e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006582:	f842 0f04 	str.w	r0, [r2, #4]!
 8006586:	3301      	adds	r3, #1
 8006588:	e7c5      	b.n	8006516 <__lshift+0x4a>
 800658a:	3904      	subs	r1, #4
 800658c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006590:	f841 2f04 	str.w	r2, [r1, #4]!
 8006594:	459c      	cmp	ip, r3
 8006596:	d8f9      	bhi.n	800658c <__lshift+0xc0>
 8006598:	e7ea      	b.n	8006570 <__lshift+0xa4>
 800659a:	bf00      	nop
 800659c:	08007774 	.word	0x08007774
 80065a0:	08007785 	.word	0x08007785

080065a4 <__mcmp>:
 80065a4:	b530      	push	{r4, r5, lr}
 80065a6:	6902      	ldr	r2, [r0, #16]
 80065a8:	690c      	ldr	r4, [r1, #16]
 80065aa:	1b12      	subs	r2, r2, r4
 80065ac:	d10e      	bne.n	80065cc <__mcmp+0x28>
 80065ae:	f100 0314 	add.w	r3, r0, #20
 80065b2:	3114      	adds	r1, #20
 80065b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80065b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80065bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80065c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80065c4:	42a5      	cmp	r5, r4
 80065c6:	d003      	beq.n	80065d0 <__mcmp+0x2c>
 80065c8:	d305      	bcc.n	80065d6 <__mcmp+0x32>
 80065ca:	2201      	movs	r2, #1
 80065cc:	4610      	mov	r0, r2
 80065ce:	bd30      	pop	{r4, r5, pc}
 80065d0:	4283      	cmp	r3, r0
 80065d2:	d3f3      	bcc.n	80065bc <__mcmp+0x18>
 80065d4:	e7fa      	b.n	80065cc <__mcmp+0x28>
 80065d6:	f04f 32ff 	mov.w	r2, #4294967295
 80065da:	e7f7      	b.n	80065cc <__mcmp+0x28>

080065dc <__mdiff>:
 80065dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e0:	460c      	mov	r4, r1
 80065e2:	4606      	mov	r6, r0
 80065e4:	4611      	mov	r1, r2
 80065e6:	4620      	mov	r0, r4
 80065e8:	4690      	mov	r8, r2
 80065ea:	f7ff ffdb 	bl	80065a4 <__mcmp>
 80065ee:	1e05      	subs	r5, r0, #0
 80065f0:	d110      	bne.n	8006614 <__mdiff+0x38>
 80065f2:	4629      	mov	r1, r5
 80065f4:	4630      	mov	r0, r6
 80065f6:	f7ff fd59 	bl	80060ac <_Balloc>
 80065fa:	b930      	cbnz	r0, 800660a <__mdiff+0x2e>
 80065fc:	4b3a      	ldr	r3, [pc, #232]	; (80066e8 <__mdiff+0x10c>)
 80065fe:	4602      	mov	r2, r0
 8006600:	f240 2137 	movw	r1, #567	; 0x237
 8006604:	4839      	ldr	r0, [pc, #228]	; (80066ec <__mdiff+0x110>)
 8006606:	f000 fb95 	bl	8006d34 <__assert_func>
 800660a:	2301      	movs	r3, #1
 800660c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006614:	bfa4      	itt	ge
 8006616:	4643      	movge	r3, r8
 8006618:	46a0      	movge	r8, r4
 800661a:	4630      	mov	r0, r6
 800661c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006620:	bfa6      	itte	ge
 8006622:	461c      	movge	r4, r3
 8006624:	2500      	movge	r5, #0
 8006626:	2501      	movlt	r5, #1
 8006628:	f7ff fd40 	bl	80060ac <_Balloc>
 800662c:	b920      	cbnz	r0, 8006638 <__mdiff+0x5c>
 800662e:	4b2e      	ldr	r3, [pc, #184]	; (80066e8 <__mdiff+0x10c>)
 8006630:	4602      	mov	r2, r0
 8006632:	f240 2145 	movw	r1, #581	; 0x245
 8006636:	e7e5      	b.n	8006604 <__mdiff+0x28>
 8006638:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800663c:	6926      	ldr	r6, [r4, #16]
 800663e:	60c5      	str	r5, [r0, #12]
 8006640:	f104 0914 	add.w	r9, r4, #20
 8006644:	f108 0514 	add.w	r5, r8, #20
 8006648:	f100 0e14 	add.w	lr, r0, #20
 800664c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006650:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006654:	f108 0210 	add.w	r2, r8, #16
 8006658:	46f2      	mov	sl, lr
 800665a:	2100      	movs	r1, #0
 800665c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006660:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006664:	fa11 f88b 	uxtah	r8, r1, fp
 8006668:	b299      	uxth	r1, r3
 800666a:	0c1b      	lsrs	r3, r3, #16
 800666c:	eba8 0801 	sub.w	r8, r8, r1
 8006670:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006674:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006678:	fa1f f888 	uxth.w	r8, r8
 800667c:	1419      	asrs	r1, r3, #16
 800667e:	454e      	cmp	r6, r9
 8006680:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006684:	f84a 3b04 	str.w	r3, [sl], #4
 8006688:	d8e8      	bhi.n	800665c <__mdiff+0x80>
 800668a:	1b33      	subs	r3, r6, r4
 800668c:	3b15      	subs	r3, #21
 800668e:	f023 0303 	bic.w	r3, r3, #3
 8006692:	3304      	adds	r3, #4
 8006694:	3415      	adds	r4, #21
 8006696:	42a6      	cmp	r6, r4
 8006698:	bf38      	it	cc
 800669a:	2304      	movcc	r3, #4
 800669c:	441d      	add	r5, r3
 800669e:	4473      	add	r3, lr
 80066a0:	469e      	mov	lr, r3
 80066a2:	462e      	mov	r6, r5
 80066a4:	4566      	cmp	r6, ip
 80066a6:	d30e      	bcc.n	80066c6 <__mdiff+0xea>
 80066a8:	f10c 0203 	add.w	r2, ip, #3
 80066ac:	1b52      	subs	r2, r2, r5
 80066ae:	f022 0203 	bic.w	r2, r2, #3
 80066b2:	3d03      	subs	r5, #3
 80066b4:	45ac      	cmp	ip, r5
 80066b6:	bf38      	it	cc
 80066b8:	2200      	movcc	r2, #0
 80066ba:	4413      	add	r3, r2
 80066bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80066c0:	b17a      	cbz	r2, 80066e2 <__mdiff+0x106>
 80066c2:	6107      	str	r7, [r0, #16]
 80066c4:	e7a4      	b.n	8006610 <__mdiff+0x34>
 80066c6:	f856 8b04 	ldr.w	r8, [r6], #4
 80066ca:	fa11 f288 	uxtah	r2, r1, r8
 80066ce:	1414      	asrs	r4, r2, #16
 80066d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80066d4:	b292      	uxth	r2, r2
 80066d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80066da:	f84e 2b04 	str.w	r2, [lr], #4
 80066de:	1421      	asrs	r1, r4, #16
 80066e0:	e7e0      	b.n	80066a4 <__mdiff+0xc8>
 80066e2:	3f01      	subs	r7, #1
 80066e4:	e7ea      	b.n	80066bc <__mdiff+0xe0>
 80066e6:	bf00      	nop
 80066e8:	08007774 	.word	0x08007774
 80066ec:	08007785 	.word	0x08007785

080066f0 <__d2b>:
 80066f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066f4:	460f      	mov	r7, r1
 80066f6:	2101      	movs	r1, #1
 80066f8:	ec59 8b10 	vmov	r8, r9, d0
 80066fc:	4616      	mov	r6, r2
 80066fe:	f7ff fcd5 	bl	80060ac <_Balloc>
 8006702:	4604      	mov	r4, r0
 8006704:	b930      	cbnz	r0, 8006714 <__d2b+0x24>
 8006706:	4602      	mov	r2, r0
 8006708:	4b24      	ldr	r3, [pc, #144]	; (800679c <__d2b+0xac>)
 800670a:	4825      	ldr	r0, [pc, #148]	; (80067a0 <__d2b+0xb0>)
 800670c:	f240 310f 	movw	r1, #783	; 0x30f
 8006710:	f000 fb10 	bl	8006d34 <__assert_func>
 8006714:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800671c:	bb2d      	cbnz	r5, 800676a <__d2b+0x7a>
 800671e:	9301      	str	r3, [sp, #4]
 8006720:	f1b8 0300 	subs.w	r3, r8, #0
 8006724:	d026      	beq.n	8006774 <__d2b+0x84>
 8006726:	4668      	mov	r0, sp
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	f7ff fd87 	bl	800623c <__lo0bits>
 800672e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006732:	b1e8      	cbz	r0, 8006770 <__d2b+0x80>
 8006734:	f1c0 0320 	rsb	r3, r0, #32
 8006738:	fa02 f303 	lsl.w	r3, r2, r3
 800673c:	430b      	orrs	r3, r1
 800673e:	40c2      	lsrs	r2, r0
 8006740:	6163      	str	r3, [r4, #20]
 8006742:	9201      	str	r2, [sp, #4]
 8006744:	9b01      	ldr	r3, [sp, #4]
 8006746:	61a3      	str	r3, [r4, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	bf14      	ite	ne
 800674c:	2202      	movne	r2, #2
 800674e:	2201      	moveq	r2, #1
 8006750:	6122      	str	r2, [r4, #16]
 8006752:	b1bd      	cbz	r5, 8006784 <__d2b+0x94>
 8006754:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006758:	4405      	add	r5, r0
 800675a:	603d      	str	r5, [r7, #0]
 800675c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006760:	6030      	str	r0, [r6, #0]
 8006762:	4620      	mov	r0, r4
 8006764:	b003      	add	sp, #12
 8006766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800676a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800676e:	e7d6      	b.n	800671e <__d2b+0x2e>
 8006770:	6161      	str	r1, [r4, #20]
 8006772:	e7e7      	b.n	8006744 <__d2b+0x54>
 8006774:	a801      	add	r0, sp, #4
 8006776:	f7ff fd61 	bl	800623c <__lo0bits>
 800677a:	9b01      	ldr	r3, [sp, #4]
 800677c:	6163      	str	r3, [r4, #20]
 800677e:	3020      	adds	r0, #32
 8006780:	2201      	movs	r2, #1
 8006782:	e7e5      	b.n	8006750 <__d2b+0x60>
 8006784:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006788:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800678c:	6038      	str	r0, [r7, #0]
 800678e:	6918      	ldr	r0, [r3, #16]
 8006790:	f7ff fd34 	bl	80061fc <__hi0bits>
 8006794:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006798:	e7e2      	b.n	8006760 <__d2b+0x70>
 800679a:	bf00      	nop
 800679c:	08007774 	.word	0x08007774
 80067a0:	08007785 	.word	0x08007785

080067a4 <__sfputc_r>:
 80067a4:	6893      	ldr	r3, [r2, #8]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	b410      	push	{r4}
 80067ac:	6093      	str	r3, [r2, #8]
 80067ae:	da08      	bge.n	80067c2 <__sfputc_r+0x1e>
 80067b0:	6994      	ldr	r4, [r2, #24]
 80067b2:	42a3      	cmp	r3, r4
 80067b4:	db01      	blt.n	80067ba <__sfputc_r+0x16>
 80067b6:	290a      	cmp	r1, #10
 80067b8:	d103      	bne.n	80067c2 <__sfputc_r+0x1e>
 80067ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067be:	f7fe bbe4 	b.w	8004f8a <__swbuf_r>
 80067c2:	6813      	ldr	r3, [r2, #0]
 80067c4:	1c58      	adds	r0, r3, #1
 80067c6:	6010      	str	r0, [r2, #0]
 80067c8:	7019      	strb	r1, [r3, #0]
 80067ca:	4608      	mov	r0, r1
 80067cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <__sfputs_r>:
 80067d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d4:	4606      	mov	r6, r0
 80067d6:	460f      	mov	r7, r1
 80067d8:	4614      	mov	r4, r2
 80067da:	18d5      	adds	r5, r2, r3
 80067dc:	42ac      	cmp	r4, r5
 80067de:	d101      	bne.n	80067e4 <__sfputs_r+0x12>
 80067e0:	2000      	movs	r0, #0
 80067e2:	e007      	b.n	80067f4 <__sfputs_r+0x22>
 80067e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e8:	463a      	mov	r2, r7
 80067ea:	4630      	mov	r0, r6
 80067ec:	f7ff ffda 	bl	80067a4 <__sfputc_r>
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	d1f3      	bne.n	80067dc <__sfputs_r+0xa>
 80067f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067f8 <_vfiprintf_r>:
 80067f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fc:	460d      	mov	r5, r1
 80067fe:	b09d      	sub	sp, #116	; 0x74
 8006800:	4614      	mov	r4, r2
 8006802:	4698      	mov	r8, r3
 8006804:	4606      	mov	r6, r0
 8006806:	b118      	cbz	r0, 8006810 <_vfiprintf_r+0x18>
 8006808:	6a03      	ldr	r3, [r0, #32]
 800680a:	b90b      	cbnz	r3, 8006810 <_vfiprintf_r+0x18>
 800680c:	f7fe face 	bl	8004dac <__sinit>
 8006810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006812:	07d9      	lsls	r1, r3, #31
 8006814:	d405      	bmi.n	8006822 <_vfiprintf_r+0x2a>
 8006816:	89ab      	ldrh	r3, [r5, #12]
 8006818:	059a      	lsls	r2, r3, #22
 800681a:	d402      	bmi.n	8006822 <_vfiprintf_r+0x2a>
 800681c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800681e:	f7fe fcc6 	bl	80051ae <__retarget_lock_acquire_recursive>
 8006822:	89ab      	ldrh	r3, [r5, #12]
 8006824:	071b      	lsls	r3, r3, #28
 8006826:	d501      	bpl.n	800682c <_vfiprintf_r+0x34>
 8006828:	692b      	ldr	r3, [r5, #16]
 800682a:	b99b      	cbnz	r3, 8006854 <_vfiprintf_r+0x5c>
 800682c:	4629      	mov	r1, r5
 800682e:	4630      	mov	r0, r6
 8006830:	f7fe fbe8 	bl	8005004 <__swsetup_r>
 8006834:	b170      	cbz	r0, 8006854 <_vfiprintf_r+0x5c>
 8006836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006838:	07dc      	lsls	r4, r3, #31
 800683a:	d504      	bpl.n	8006846 <_vfiprintf_r+0x4e>
 800683c:	f04f 30ff 	mov.w	r0, #4294967295
 8006840:	b01d      	add	sp, #116	; 0x74
 8006842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006846:	89ab      	ldrh	r3, [r5, #12]
 8006848:	0598      	lsls	r0, r3, #22
 800684a:	d4f7      	bmi.n	800683c <_vfiprintf_r+0x44>
 800684c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800684e:	f7fe fcaf 	bl	80051b0 <__retarget_lock_release_recursive>
 8006852:	e7f3      	b.n	800683c <_vfiprintf_r+0x44>
 8006854:	2300      	movs	r3, #0
 8006856:	9309      	str	r3, [sp, #36]	; 0x24
 8006858:	2320      	movs	r3, #32
 800685a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800685e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006862:	2330      	movs	r3, #48	; 0x30
 8006864:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006a18 <_vfiprintf_r+0x220>
 8006868:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800686c:	f04f 0901 	mov.w	r9, #1
 8006870:	4623      	mov	r3, r4
 8006872:	469a      	mov	sl, r3
 8006874:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006878:	b10a      	cbz	r2, 800687e <_vfiprintf_r+0x86>
 800687a:	2a25      	cmp	r2, #37	; 0x25
 800687c:	d1f9      	bne.n	8006872 <_vfiprintf_r+0x7a>
 800687e:	ebba 0b04 	subs.w	fp, sl, r4
 8006882:	d00b      	beq.n	800689c <_vfiprintf_r+0xa4>
 8006884:	465b      	mov	r3, fp
 8006886:	4622      	mov	r2, r4
 8006888:	4629      	mov	r1, r5
 800688a:	4630      	mov	r0, r6
 800688c:	f7ff ffa1 	bl	80067d2 <__sfputs_r>
 8006890:	3001      	adds	r0, #1
 8006892:	f000 80a9 	beq.w	80069e8 <_vfiprintf_r+0x1f0>
 8006896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006898:	445a      	add	r2, fp
 800689a:	9209      	str	r2, [sp, #36]	; 0x24
 800689c:	f89a 3000 	ldrb.w	r3, [sl]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 80a1 	beq.w	80069e8 <_vfiprintf_r+0x1f0>
 80068a6:	2300      	movs	r3, #0
 80068a8:	f04f 32ff 	mov.w	r2, #4294967295
 80068ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068b0:	f10a 0a01 	add.w	sl, sl, #1
 80068b4:	9304      	str	r3, [sp, #16]
 80068b6:	9307      	str	r3, [sp, #28]
 80068b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068bc:	931a      	str	r3, [sp, #104]	; 0x68
 80068be:	4654      	mov	r4, sl
 80068c0:	2205      	movs	r2, #5
 80068c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068c6:	4854      	ldr	r0, [pc, #336]	; (8006a18 <_vfiprintf_r+0x220>)
 80068c8:	f7f9 fc8a 	bl	80001e0 <memchr>
 80068cc:	9a04      	ldr	r2, [sp, #16]
 80068ce:	b9d8      	cbnz	r0, 8006908 <_vfiprintf_r+0x110>
 80068d0:	06d1      	lsls	r1, r2, #27
 80068d2:	bf44      	itt	mi
 80068d4:	2320      	movmi	r3, #32
 80068d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068da:	0713      	lsls	r3, r2, #28
 80068dc:	bf44      	itt	mi
 80068de:	232b      	movmi	r3, #43	; 0x2b
 80068e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068e4:	f89a 3000 	ldrb.w	r3, [sl]
 80068e8:	2b2a      	cmp	r3, #42	; 0x2a
 80068ea:	d015      	beq.n	8006918 <_vfiprintf_r+0x120>
 80068ec:	9a07      	ldr	r2, [sp, #28]
 80068ee:	4654      	mov	r4, sl
 80068f0:	2000      	movs	r0, #0
 80068f2:	f04f 0c0a 	mov.w	ip, #10
 80068f6:	4621      	mov	r1, r4
 80068f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068fc:	3b30      	subs	r3, #48	; 0x30
 80068fe:	2b09      	cmp	r3, #9
 8006900:	d94d      	bls.n	800699e <_vfiprintf_r+0x1a6>
 8006902:	b1b0      	cbz	r0, 8006932 <_vfiprintf_r+0x13a>
 8006904:	9207      	str	r2, [sp, #28]
 8006906:	e014      	b.n	8006932 <_vfiprintf_r+0x13a>
 8006908:	eba0 0308 	sub.w	r3, r0, r8
 800690c:	fa09 f303 	lsl.w	r3, r9, r3
 8006910:	4313      	orrs	r3, r2
 8006912:	9304      	str	r3, [sp, #16]
 8006914:	46a2      	mov	sl, r4
 8006916:	e7d2      	b.n	80068be <_vfiprintf_r+0xc6>
 8006918:	9b03      	ldr	r3, [sp, #12]
 800691a:	1d19      	adds	r1, r3, #4
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	9103      	str	r1, [sp, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	bfbb      	ittet	lt
 8006924:	425b      	neglt	r3, r3
 8006926:	f042 0202 	orrlt.w	r2, r2, #2
 800692a:	9307      	strge	r3, [sp, #28]
 800692c:	9307      	strlt	r3, [sp, #28]
 800692e:	bfb8      	it	lt
 8006930:	9204      	strlt	r2, [sp, #16]
 8006932:	7823      	ldrb	r3, [r4, #0]
 8006934:	2b2e      	cmp	r3, #46	; 0x2e
 8006936:	d10c      	bne.n	8006952 <_vfiprintf_r+0x15a>
 8006938:	7863      	ldrb	r3, [r4, #1]
 800693a:	2b2a      	cmp	r3, #42	; 0x2a
 800693c:	d134      	bne.n	80069a8 <_vfiprintf_r+0x1b0>
 800693e:	9b03      	ldr	r3, [sp, #12]
 8006940:	1d1a      	adds	r2, r3, #4
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	9203      	str	r2, [sp, #12]
 8006946:	2b00      	cmp	r3, #0
 8006948:	bfb8      	it	lt
 800694a:	f04f 33ff 	movlt.w	r3, #4294967295
 800694e:	3402      	adds	r4, #2
 8006950:	9305      	str	r3, [sp, #20]
 8006952:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006a28 <_vfiprintf_r+0x230>
 8006956:	7821      	ldrb	r1, [r4, #0]
 8006958:	2203      	movs	r2, #3
 800695a:	4650      	mov	r0, sl
 800695c:	f7f9 fc40 	bl	80001e0 <memchr>
 8006960:	b138      	cbz	r0, 8006972 <_vfiprintf_r+0x17a>
 8006962:	9b04      	ldr	r3, [sp, #16]
 8006964:	eba0 000a 	sub.w	r0, r0, sl
 8006968:	2240      	movs	r2, #64	; 0x40
 800696a:	4082      	lsls	r2, r0
 800696c:	4313      	orrs	r3, r2
 800696e:	3401      	adds	r4, #1
 8006970:	9304      	str	r3, [sp, #16]
 8006972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006976:	4829      	ldr	r0, [pc, #164]	; (8006a1c <_vfiprintf_r+0x224>)
 8006978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800697c:	2206      	movs	r2, #6
 800697e:	f7f9 fc2f 	bl	80001e0 <memchr>
 8006982:	2800      	cmp	r0, #0
 8006984:	d03f      	beq.n	8006a06 <_vfiprintf_r+0x20e>
 8006986:	4b26      	ldr	r3, [pc, #152]	; (8006a20 <_vfiprintf_r+0x228>)
 8006988:	bb1b      	cbnz	r3, 80069d2 <_vfiprintf_r+0x1da>
 800698a:	9b03      	ldr	r3, [sp, #12]
 800698c:	3307      	adds	r3, #7
 800698e:	f023 0307 	bic.w	r3, r3, #7
 8006992:	3308      	adds	r3, #8
 8006994:	9303      	str	r3, [sp, #12]
 8006996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006998:	443b      	add	r3, r7
 800699a:	9309      	str	r3, [sp, #36]	; 0x24
 800699c:	e768      	b.n	8006870 <_vfiprintf_r+0x78>
 800699e:	fb0c 3202 	mla	r2, ip, r2, r3
 80069a2:	460c      	mov	r4, r1
 80069a4:	2001      	movs	r0, #1
 80069a6:	e7a6      	b.n	80068f6 <_vfiprintf_r+0xfe>
 80069a8:	2300      	movs	r3, #0
 80069aa:	3401      	adds	r4, #1
 80069ac:	9305      	str	r3, [sp, #20]
 80069ae:	4619      	mov	r1, r3
 80069b0:	f04f 0c0a 	mov.w	ip, #10
 80069b4:	4620      	mov	r0, r4
 80069b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ba:	3a30      	subs	r2, #48	; 0x30
 80069bc:	2a09      	cmp	r2, #9
 80069be:	d903      	bls.n	80069c8 <_vfiprintf_r+0x1d0>
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0c6      	beq.n	8006952 <_vfiprintf_r+0x15a>
 80069c4:	9105      	str	r1, [sp, #20]
 80069c6:	e7c4      	b.n	8006952 <_vfiprintf_r+0x15a>
 80069c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80069cc:	4604      	mov	r4, r0
 80069ce:	2301      	movs	r3, #1
 80069d0:	e7f0      	b.n	80069b4 <_vfiprintf_r+0x1bc>
 80069d2:	ab03      	add	r3, sp, #12
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	462a      	mov	r2, r5
 80069d8:	4b12      	ldr	r3, [pc, #72]	; (8006a24 <_vfiprintf_r+0x22c>)
 80069da:	a904      	add	r1, sp, #16
 80069dc:	4630      	mov	r0, r6
 80069de:	f7fd fd93 	bl	8004508 <_printf_float>
 80069e2:	4607      	mov	r7, r0
 80069e4:	1c78      	adds	r0, r7, #1
 80069e6:	d1d6      	bne.n	8006996 <_vfiprintf_r+0x19e>
 80069e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069ea:	07d9      	lsls	r1, r3, #31
 80069ec:	d405      	bmi.n	80069fa <_vfiprintf_r+0x202>
 80069ee:	89ab      	ldrh	r3, [r5, #12]
 80069f0:	059a      	lsls	r2, r3, #22
 80069f2:	d402      	bmi.n	80069fa <_vfiprintf_r+0x202>
 80069f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069f6:	f7fe fbdb 	bl	80051b0 <__retarget_lock_release_recursive>
 80069fa:	89ab      	ldrh	r3, [r5, #12]
 80069fc:	065b      	lsls	r3, r3, #25
 80069fe:	f53f af1d 	bmi.w	800683c <_vfiprintf_r+0x44>
 8006a02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a04:	e71c      	b.n	8006840 <_vfiprintf_r+0x48>
 8006a06:	ab03      	add	r3, sp, #12
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	462a      	mov	r2, r5
 8006a0c:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <_vfiprintf_r+0x22c>)
 8006a0e:	a904      	add	r1, sp, #16
 8006a10:	4630      	mov	r0, r6
 8006a12:	f7fe f81d 	bl	8004a50 <_printf_i>
 8006a16:	e7e4      	b.n	80069e2 <_vfiprintf_r+0x1ea>
 8006a18:	080078dc 	.word	0x080078dc
 8006a1c:	080078e6 	.word	0x080078e6
 8006a20:	08004509 	.word	0x08004509
 8006a24:	080067d3 	.word	0x080067d3
 8006a28:	080078e2 	.word	0x080078e2

08006a2c <__sflush_r>:
 8006a2c:	898a      	ldrh	r2, [r1, #12]
 8006a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a32:	4605      	mov	r5, r0
 8006a34:	0710      	lsls	r0, r2, #28
 8006a36:	460c      	mov	r4, r1
 8006a38:	d458      	bmi.n	8006aec <__sflush_r+0xc0>
 8006a3a:	684b      	ldr	r3, [r1, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	dc05      	bgt.n	8006a4c <__sflush_r+0x20>
 8006a40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	dc02      	bgt.n	8006a4c <__sflush_r+0x20>
 8006a46:	2000      	movs	r0, #0
 8006a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a4e:	2e00      	cmp	r6, #0
 8006a50:	d0f9      	beq.n	8006a46 <__sflush_r+0x1a>
 8006a52:	2300      	movs	r3, #0
 8006a54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a58:	682f      	ldr	r7, [r5, #0]
 8006a5a:	6a21      	ldr	r1, [r4, #32]
 8006a5c:	602b      	str	r3, [r5, #0]
 8006a5e:	d032      	beq.n	8006ac6 <__sflush_r+0x9a>
 8006a60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	075a      	lsls	r2, r3, #29
 8006a66:	d505      	bpl.n	8006a74 <__sflush_r+0x48>
 8006a68:	6863      	ldr	r3, [r4, #4]
 8006a6a:	1ac0      	subs	r0, r0, r3
 8006a6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a6e:	b10b      	cbz	r3, 8006a74 <__sflush_r+0x48>
 8006a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a72:	1ac0      	subs	r0, r0, r3
 8006a74:	2300      	movs	r3, #0
 8006a76:	4602      	mov	r2, r0
 8006a78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a7a:	6a21      	ldr	r1, [r4, #32]
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	47b0      	blx	r6
 8006a80:	1c43      	adds	r3, r0, #1
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	d106      	bne.n	8006a94 <__sflush_r+0x68>
 8006a86:	6829      	ldr	r1, [r5, #0]
 8006a88:	291d      	cmp	r1, #29
 8006a8a:	d82b      	bhi.n	8006ae4 <__sflush_r+0xb8>
 8006a8c:	4a29      	ldr	r2, [pc, #164]	; (8006b34 <__sflush_r+0x108>)
 8006a8e:	410a      	asrs	r2, r1
 8006a90:	07d6      	lsls	r6, r2, #31
 8006a92:	d427      	bmi.n	8006ae4 <__sflush_r+0xb8>
 8006a94:	2200      	movs	r2, #0
 8006a96:	6062      	str	r2, [r4, #4]
 8006a98:	04d9      	lsls	r1, r3, #19
 8006a9a:	6922      	ldr	r2, [r4, #16]
 8006a9c:	6022      	str	r2, [r4, #0]
 8006a9e:	d504      	bpl.n	8006aaa <__sflush_r+0x7e>
 8006aa0:	1c42      	adds	r2, r0, #1
 8006aa2:	d101      	bne.n	8006aa8 <__sflush_r+0x7c>
 8006aa4:	682b      	ldr	r3, [r5, #0]
 8006aa6:	b903      	cbnz	r3, 8006aaa <__sflush_r+0x7e>
 8006aa8:	6560      	str	r0, [r4, #84]	; 0x54
 8006aaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aac:	602f      	str	r7, [r5, #0]
 8006aae:	2900      	cmp	r1, #0
 8006ab0:	d0c9      	beq.n	8006a46 <__sflush_r+0x1a>
 8006ab2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ab6:	4299      	cmp	r1, r3
 8006ab8:	d002      	beq.n	8006ac0 <__sflush_r+0x94>
 8006aba:	4628      	mov	r0, r5
 8006abc:	f7ff f9f6 	bl	8005eac <_free_r>
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	6360      	str	r0, [r4, #52]	; 0x34
 8006ac4:	e7c0      	b.n	8006a48 <__sflush_r+0x1c>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	4628      	mov	r0, r5
 8006aca:	47b0      	blx	r6
 8006acc:	1c41      	adds	r1, r0, #1
 8006ace:	d1c8      	bne.n	8006a62 <__sflush_r+0x36>
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0c5      	beq.n	8006a62 <__sflush_r+0x36>
 8006ad6:	2b1d      	cmp	r3, #29
 8006ad8:	d001      	beq.n	8006ade <__sflush_r+0xb2>
 8006ada:	2b16      	cmp	r3, #22
 8006adc:	d101      	bne.n	8006ae2 <__sflush_r+0xb6>
 8006ade:	602f      	str	r7, [r5, #0]
 8006ae0:	e7b1      	b.n	8006a46 <__sflush_r+0x1a>
 8006ae2:	89a3      	ldrh	r3, [r4, #12]
 8006ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ae8:	81a3      	strh	r3, [r4, #12]
 8006aea:	e7ad      	b.n	8006a48 <__sflush_r+0x1c>
 8006aec:	690f      	ldr	r7, [r1, #16]
 8006aee:	2f00      	cmp	r7, #0
 8006af0:	d0a9      	beq.n	8006a46 <__sflush_r+0x1a>
 8006af2:	0793      	lsls	r3, r2, #30
 8006af4:	680e      	ldr	r6, [r1, #0]
 8006af6:	bf08      	it	eq
 8006af8:	694b      	ldreq	r3, [r1, #20]
 8006afa:	600f      	str	r7, [r1, #0]
 8006afc:	bf18      	it	ne
 8006afe:	2300      	movne	r3, #0
 8006b00:	eba6 0807 	sub.w	r8, r6, r7
 8006b04:	608b      	str	r3, [r1, #8]
 8006b06:	f1b8 0f00 	cmp.w	r8, #0
 8006b0a:	dd9c      	ble.n	8006a46 <__sflush_r+0x1a>
 8006b0c:	6a21      	ldr	r1, [r4, #32]
 8006b0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b10:	4643      	mov	r3, r8
 8006b12:	463a      	mov	r2, r7
 8006b14:	4628      	mov	r0, r5
 8006b16:	47b0      	blx	r6
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	dc06      	bgt.n	8006b2a <__sflush_r+0xfe>
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b22:	81a3      	strh	r3, [r4, #12]
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295
 8006b28:	e78e      	b.n	8006a48 <__sflush_r+0x1c>
 8006b2a:	4407      	add	r7, r0
 8006b2c:	eba8 0800 	sub.w	r8, r8, r0
 8006b30:	e7e9      	b.n	8006b06 <__sflush_r+0xda>
 8006b32:	bf00      	nop
 8006b34:	dfbffffe 	.word	0xdfbffffe

08006b38 <_fflush_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	690b      	ldr	r3, [r1, #16]
 8006b3c:	4605      	mov	r5, r0
 8006b3e:	460c      	mov	r4, r1
 8006b40:	b913      	cbnz	r3, 8006b48 <_fflush_r+0x10>
 8006b42:	2500      	movs	r5, #0
 8006b44:	4628      	mov	r0, r5
 8006b46:	bd38      	pop	{r3, r4, r5, pc}
 8006b48:	b118      	cbz	r0, 8006b52 <_fflush_r+0x1a>
 8006b4a:	6a03      	ldr	r3, [r0, #32]
 8006b4c:	b90b      	cbnz	r3, 8006b52 <_fflush_r+0x1a>
 8006b4e:	f7fe f92d 	bl	8004dac <__sinit>
 8006b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0f3      	beq.n	8006b42 <_fflush_r+0xa>
 8006b5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b5c:	07d0      	lsls	r0, r2, #31
 8006b5e:	d404      	bmi.n	8006b6a <_fflush_r+0x32>
 8006b60:	0599      	lsls	r1, r3, #22
 8006b62:	d402      	bmi.n	8006b6a <_fflush_r+0x32>
 8006b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b66:	f7fe fb22 	bl	80051ae <__retarget_lock_acquire_recursive>
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	f7ff ff5d 	bl	8006a2c <__sflush_r>
 8006b72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b74:	07da      	lsls	r2, r3, #31
 8006b76:	4605      	mov	r5, r0
 8006b78:	d4e4      	bmi.n	8006b44 <_fflush_r+0xc>
 8006b7a:	89a3      	ldrh	r3, [r4, #12]
 8006b7c:	059b      	lsls	r3, r3, #22
 8006b7e:	d4e1      	bmi.n	8006b44 <_fflush_r+0xc>
 8006b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b82:	f7fe fb15 	bl	80051b0 <__retarget_lock_release_recursive>
 8006b86:	e7dd      	b.n	8006b44 <_fflush_r+0xc>

08006b88 <__swhatbuf_r>:
 8006b88:	b570      	push	{r4, r5, r6, lr}
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b90:	2900      	cmp	r1, #0
 8006b92:	b096      	sub	sp, #88	; 0x58
 8006b94:	4615      	mov	r5, r2
 8006b96:	461e      	mov	r6, r3
 8006b98:	da0d      	bge.n	8006bb6 <__swhatbuf_r+0x2e>
 8006b9a:	89a3      	ldrh	r3, [r4, #12]
 8006b9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ba0:	f04f 0100 	mov.w	r1, #0
 8006ba4:	bf0c      	ite	eq
 8006ba6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006baa:	2340      	movne	r3, #64	; 0x40
 8006bac:	2000      	movs	r0, #0
 8006bae:	6031      	str	r1, [r6, #0]
 8006bb0:	602b      	str	r3, [r5, #0]
 8006bb2:	b016      	add	sp, #88	; 0x58
 8006bb4:	bd70      	pop	{r4, r5, r6, pc}
 8006bb6:	466a      	mov	r2, sp
 8006bb8:	f000 f87c 	bl	8006cb4 <_fstat_r>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	dbec      	blt.n	8006b9a <__swhatbuf_r+0x12>
 8006bc0:	9901      	ldr	r1, [sp, #4]
 8006bc2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006bc6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006bca:	4259      	negs	r1, r3
 8006bcc:	4159      	adcs	r1, r3
 8006bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bd2:	e7eb      	b.n	8006bac <__swhatbuf_r+0x24>

08006bd4 <__smakebuf_r>:
 8006bd4:	898b      	ldrh	r3, [r1, #12]
 8006bd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bd8:	079d      	lsls	r5, r3, #30
 8006bda:	4606      	mov	r6, r0
 8006bdc:	460c      	mov	r4, r1
 8006bde:	d507      	bpl.n	8006bf0 <__smakebuf_r+0x1c>
 8006be0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	6123      	str	r3, [r4, #16]
 8006be8:	2301      	movs	r3, #1
 8006bea:	6163      	str	r3, [r4, #20]
 8006bec:	b002      	add	sp, #8
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
 8006bf0:	ab01      	add	r3, sp, #4
 8006bf2:	466a      	mov	r2, sp
 8006bf4:	f7ff ffc8 	bl	8006b88 <__swhatbuf_r>
 8006bf8:	9900      	ldr	r1, [sp, #0]
 8006bfa:	4605      	mov	r5, r0
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	f7ff f9c9 	bl	8005f94 <_malloc_r>
 8006c02:	b948      	cbnz	r0, 8006c18 <__smakebuf_r+0x44>
 8006c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c08:	059a      	lsls	r2, r3, #22
 8006c0a:	d4ef      	bmi.n	8006bec <__smakebuf_r+0x18>
 8006c0c:	f023 0303 	bic.w	r3, r3, #3
 8006c10:	f043 0302 	orr.w	r3, r3, #2
 8006c14:	81a3      	strh	r3, [r4, #12]
 8006c16:	e7e3      	b.n	8006be0 <__smakebuf_r+0xc>
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	6020      	str	r0, [r4, #0]
 8006c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c20:	81a3      	strh	r3, [r4, #12]
 8006c22:	9b00      	ldr	r3, [sp, #0]
 8006c24:	6163      	str	r3, [r4, #20]
 8006c26:	9b01      	ldr	r3, [sp, #4]
 8006c28:	6120      	str	r0, [r4, #16]
 8006c2a:	b15b      	cbz	r3, 8006c44 <__smakebuf_r+0x70>
 8006c2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c30:	4630      	mov	r0, r6
 8006c32:	f000 f851 	bl	8006cd8 <_isatty_r>
 8006c36:	b128      	cbz	r0, 8006c44 <__smakebuf_r+0x70>
 8006c38:	89a3      	ldrh	r3, [r4, #12]
 8006c3a:	f023 0303 	bic.w	r3, r3, #3
 8006c3e:	f043 0301 	orr.w	r3, r3, #1
 8006c42:	81a3      	strh	r3, [r4, #12]
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	431d      	orrs	r5, r3
 8006c48:	81a5      	strh	r5, [r4, #12]
 8006c4a:	e7cf      	b.n	8006bec <__smakebuf_r+0x18>

08006c4c <_putc_r>:
 8006c4c:	b570      	push	{r4, r5, r6, lr}
 8006c4e:	460d      	mov	r5, r1
 8006c50:	4614      	mov	r4, r2
 8006c52:	4606      	mov	r6, r0
 8006c54:	b118      	cbz	r0, 8006c5e <_putc_r+0x12>
 8006c56:	6a03      	ldr	r3, [r0, #32]
 8006c58:	b90b      	cbnz	r3, 8006c5e <_putc_r+0x12>
 8006c5a:	f7fe f8a7 	bl	8004dac <__sinit>
 8006c5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c60:	07d8      	lsls	r0, r3, #31
 8006c62:	d405      	bmi.n	8006c70 <_putc_r+0x24>
 8006c64:	89a3      	ldrh	r3, [r4, #12]
 8006c66:	0599      	lsls	r1, r3, #22
 8006c68:	d402      	bmi.n	8006c70 <_putc_r+0x24>
 8006c6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c6c:	f7fe fa9f 	bl	80051ae <__retarget_lock_acquire_recursive>
 8006c70:	68a3      	ldr	r3, [r4, #8]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	60a3      	str	r3, [r4, #8]
 8006c78:	da05      	bge.n	8006c86 <_putc_r+0x3a>
 8006c7a:	69a2      	ldr	r2, [r4, #24]
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	db12      	blt.n	8006ca6 <_putc_r+0x5a>
 8006c80:	b2eb      	uxtb	r3, r5
 8006c82:	2b0a      	cmp	r3, #10
 8006c84:	d00f      	beq.n	8006ca6 <_putc_r+0x5a>
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	6022      	str	r2, [r4, #0]
 8006c8c:	701d      	strb	r5, [r3, #0]
 8006c8e:	b2ed      	uxtb	r5, r5
 8006c90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c92:	07da      	lsls	r2, r3, #31
 8006c94:	d405      	bmi.n	8006ca2 <_putc_r+0x56>
 8006c96:	89a3      	ldrh	r3, [r4, #12]
 8006c98:	059b      	lsls	r3, r3, #22
 8006c9a:	d402      	bmi.n	8006ca2 <_putc_r+0x56>
 8006c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c9e:	f7fe fa87 	bl	80051b0 <__retarget_lock_release_recursive>
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	bd70      	pop	{r4, r5, r6, pc}
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	4622      	mov	r2, r4
 8006caa:	4630      	mov	r0, r6
 8006cac:	f7fe f96d 	bl	8004f8a <__swbuf_r>
 8006cb0:	4605      	mov	r5, r0
 8006cb2:	e7ed      	b.n	8006c90 <_putc_r+0x44>

08006cb4 <_fstat_r>:
 8006cb4:	b538      	push	{r3, r4, r5, lr}
 8006cb6:	4d07      	ldr	r5, [pc, #28]	; (8006cd4 <_fstat_r+0x20>)
 8006cb8:	2300      	movs	r3, #0
 8006cba:	4604      	mov	r4, r0
 8006cbc:	4608      	mov	r0, r1
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	602b      	str	r3, [r5, #0]
 8006cc2:	f7fa fcc2 	bl	800164a <_fstat>
 8006cc6:	1c43      	adds	r3, r0, #1
 8006cc8:	d102      	bne.n	8006cd0 <_fstat_r+0x1c>
 8006cca:	682b      	ldr	r3, [r5, #0]
 8006ccc:	b103      	cbz	r3, 8006cd0 <_fstat_r+0x1c>
 8006cce:	6023      	str	r3, [r4, #0]
 8006cd0:	bd38      	pop	{r3, r4, r5, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20001094 	.word	0x20001094

08006cd8 <_isatty_r>:
 8006cd8:	b538      	push	{r3, r4, r5, lr}
 8006cda:	4d06      	ldr	r5, [pc, #24]	; (8006cf4 <_isatty_r+0x1c>)
 8006cdc:	2300      	movs	r3, #0
 8006cde:	4604      	mov	r4, r0
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	602b      	str	r3, [r5, #0]
 8006ce4:	f7fa fcc1 	bl	800166a <_isatty>
 8006ce8:	1c43      	adds	r3, r0, #1
 8006cea:	d102      	bne.n	8006cf2 <_isatty_r+0x1a>
 8006cec:	682b      	ldr	r3, [r5, #0]
 8006cee:	b103      	cbz	r3, 8006cf2 <_isatty_r+0x1a>
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	bd38      	pop	{r3, r4, r5, pc}
 8006cf4:	20001094 	.word	0x20001094

08006cf8 <_sbrk_r>:
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	4d06      	ldr	r5, [pc, #24]	; (8006d14 <_sbrk_r+0x1c>)
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	4604      	mov	r4, r0
 8006d00:	4608      	mov	r0, r1
 8006d02:	602b      	str	r3, [r5, #0]
 8006d04:	f7fa fcca 	bl	800169c <_sbrk>
 8006d08:	1c43      	adds	r3, r0, #1
 8006d0a:	d102      	bne.n	8006d12 <_sbrk_r+0x1a>
 8006d0c:	682b      	ldr	r3, [r5, #0]
 8006d0e:	b103      	cbz	r3, 8006d12 <_sbrk_r+0x1a>
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	bd38      	pop	{r3, r4, r5, pc}
 8006d14:	20001094 	.word	0x20001094

08006d18 <memcpy>:
 8006d18:	440a      	add	r2, r1
 8006d1a:	4291      	cmp	r1, r2
 8006d1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d20:	d100      	bne.n	8006d24 <memcpy+0xc>
 8006d22:	4770      	bx	lr
 8006d24:	b510      	push	{r4, lr}
 8006d26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d2e:	4291      	cmp	r1, r2
 8006d30:	d1f9      	bne.n	8006d26 <memcpy+0xe>
 8006d32:	bd10      	pop	{r4, pc}

08006d34 <__assert_func>:
 8006d34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d36:	4614      	mov	r4, r2
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4b09      	ldr	r3, [pc, #36]	; (8006d60 <__assert_func+0x2c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4605      	mov	r5, r0
 8006d40:	68d8      	ldr	r0, [r3, #12]
 8006d42:	b14c      	cbz	r4, 8006d58 <__assert_func+0x24>
 8006d44:	4b07      	ldr	r3, [pc, #28]	; (8006d64 <__assert_func+0x30>)
 8006d46:	9100      	str	r1, [sp, #0]
 8006d48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d4c:	4906      	ldr	r1, [pc, #24]	; (8006d68 <__assert_func+0x34>)
 8006d4e:	462b      	mov	r3, r5
 8006d50:	f000 f844 	bl	8006ddc <fiprintf>
 8006d54:	f000 f854 	bl	8006e00 <abort>
 8006d58:	4b04      	ldr	r3, [pc, #16]	; (8006d6c <__assert_func+0x38>)
 8006d5a:	461c      	mov	r4, r3
 8006d5c:	e7f3      	b.n	8006d46 <__assert_func+0x12>
 8006d5e:	bf00      	nop
 8006d60:	20000074 	.word	0x20000074
 8006d64:	080078f7 	.word	0x080078f7
 8006d68:	08007904 	.word	0x08007904
 8006d6c:	08007932 	.word	0x08007932

08006d70 <_calloc_r>:
 8006d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d72:	fba1 2402 	umull	r2, r4, r1, r2
 8006d76:	b94c      	cbnz	r4, 8006d8c <_calloc_r+0x1c>
 8006d78:	4611      	mov	r1, r2
 8006d7a:	9201      	str	r2, [sp, #4]
 8006d7c:	f7ff f90a 	bl	8005f94 <_malloc_r>
 8006d80:	9a01      	ldr	r2, [sp, #4]
 8006d82:	4605      	mov	r5, r0
 8006d84:	b930      	cbnz	r0, 8006d94 <_calloc_r+0x24>
 8006d86:	4628      	mov	r0, r5
 8006d88:	b003      	add	sp, #12
 8006d8a:	bd30      	pop	{r4, r5, pc}
 8006d8c:	220c      	movs	r2, #12
 8006d8e:	6002      	str	r2, [r0, #0]
 8006d90:	2500      	movs	r5, #0
 8006d92:	e7f8      	b.n	8006d86 <_calloc_r+0x16>
 8006d94:	4621      	mov	r1, r4
 8006d96:	f7fe f98d 	bl	80050b4 <memset>
 8006d9a:	e7f4      	b.n	8006d86 <_calloc_r+0x16>

08006d9c <__ascii_mbtowc>:
 8006d9c:	b082      	sub	sp, #8
 8006d9e:	b901      	cbnz	r1, 8006da2 <__ascii_mbtowc+0x6>
 8006da0:	a901      	add	r1, sp, #4
 8006da2:	b142      	cbz	r2, 8006db6 <__ascii_mbtowc+0x1a>
 8006da4:	b14b      	cbz	r3, 8006dba <__ascii_mbtowc+0x1e>
 8006da6:	7813      	ldrb	r3, [r2, #0]
 8006da8:	600b      	str	r3, [r1, #0]
 8006daa:	7812      	ldrb	r2, [r2, #0]
 8006dac:	1e10      	subs	r0, r2, #0
 8006dae:	bf18      	it	ne
 8006db0:	2001      	movne	r0, #1
 8006db2:	b002      	add	sp, #8
 8006db4:	4770      	bx	lr
 8006db6:	4610      	mov	r0, r2
 8006db8:	e7fb      	b.n	8006db2 <__ascii_mbtowc+0x16>
 8006dba:	f06f 0001 	mvn.w	r0, #1
 8006dbe:	e7f8      	b.n	8006db2 <__ascii_mbtowc+0x16>

08006dc0 <__ascii_wctomb>:
 8006dc0:	b149      	cbz	r1, 8006dd6 <__ascii_wctomb+0x16>
 8006dc2:	2aff      	cmp	r2, #255	; 0xff
 8006dc4:	bf85      	ittet	hi
 8006dc6:	238a      	movhi	r3, #138	; 0x8a
 8006dc8:	6003      	strhi	r3, [r0, #0]
 8006dca:	700a      	strbls	r2, [r1, #0]
 8006dcc:	f04f 30ff 	movhi.w	r0, #4294967295
 8006dd0:	bf98      	it	ls
 8006dd2:	2001      	movls	r0, #1
 8006dd4:	4770      	bx	lr
 8006dd6:	4608      	mov	r0, r1
 8006dd8:	4770      	bx	lr
	...

08006ddc <fiprintf>:
 8006ddc:	b40e      	push	{r1, r2, r3}
 8006dde:	b503      	push	{r0, r1, lr}
 8006de0:	4601      	mov	r1, r0
 8006de2:	ab03      	add	r3, sp, #12
 8006de4:	4805      	ldr	r0, [pc, #20]	; (8006dfc <fiprintf+0x20>)
 8006de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dea:	6800      	ldr	r0, [r0, #0]
 8006dec:	9301      	str	r3, [sp, #4]
 8006dee:	f7ff fd03 	bl	80067f8 <_vfiprintf_r>
 8006df2:	b002      	add	sp, #8
 8006df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006df8:	b003      	add	sp, #12
 8006dfa:	4770      	bx	lr
 8006dfc:	20000074 	.word	0x20000074

08006e00 <abort>:
 8006e00:	b508      	push	{r3, lr}
 8006e02:	2006      	movs	r0, #6
 8006e04:	f000 f82c 	bl	8006e60 <raise>
 8006e08:	2001      	movs	r0, #1
 8006e0a:	f7fa fbcf 	bl	80015ac <_exit>

08006e0e <_raise_r>:
 8006e0e:	291f      	cmp	r1, #31
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	4604      	mov	r4, r0
 8006e14:	460d      	mov	r5, r1
 8006e16:	d904      	bls.n	8006e22 <_raise_r+0x14>
 8006e18:	2316      	movs	r3, #22
 8006e1a:	6003      	str	r3, [r0, #0]
 8006e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e20:	bd38      	pop	{r3, r4, r5, pc}
 8006e22:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006e24:	b112      	cbz	r2, 8006e2c <_raise_r+0x1e>
 8006e26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e2a:	b94b      	cbnz	r3, 8006e40 <_raise_r+0x32>
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f000 f831 	bl	8006e94 <_getpid_r>
 8006e32:	462a      	mov	r2, r5
 8006e34:	4601      	mov	r1, r0
 8006e36:	4620      	mov	r0, r4
 8006e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e3c:	f000 b818 	b.w	8006e70 <_kill_r>
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d00a      	beq.n	8006e5a <_raise_r+0x4c>
 8006e44:	1c59      	adds	r1, r3, #1
 8006e46:	d103      	bne.n	8006e50 <_raise_r+0x42>
 8006e48:	2316      	movs	r3, #22
 8006e4a:	6003      	str	r3, [r0, #0]
 8006e4c:	2001      	movs	r0, #1
 8006e4e:	e7e7      	b.n	8006e20 <_raise_r+0x12>
 8006e50:	2400      	movs	r4, #0
 8006e52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e56:	4628      	mov	r0, r5
 8006e58:	4798      	blx	r3
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	e7e0      	b.n	8006e20 <_raise_r+0x12>
	...

08006e60 <raise>:
 8006e60:	4b02      	ldr	r3, [pc, #8]	; (8006e6c <raise+0xc>)
 8006e62:	4601      	mov	r1, r0
 8006e64:	6818      	ldr	r0, [r3, #0]
 8006e66:	f7ff bfd2 	b.w	8006e0e <_raise_r>
 8006e6a:	bf00      	nop
 8006e6c:	20000074 	.word	0x20000074

08006e70 <_kill_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	4d07      	ldr	r5, [pc, #28]	; (8006e90 <_kill_r+0x20>)
 8006e74:	2300      	movs	r3, #0
 8006e76:	4604      	mov	r4, r0
 8006e78:	4608      	mov	r0, r1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	602b      	str	r3, [r5, #0]
 8006e7e:	f7fa fb85 	bl	800158c <_kill>
 8006e82:	1c43      	adds	r3, r0, #1
 8006e84:	d102      	bne.n	8006e8c <_kill_r+0x1c>
 8006e86:	682b      	ldr	r3, [r5, #0]
 8006e88:	b103      	cbz	r3, 8006e8c <_kill_r+0x1c>
 8006e8a:	6023      	str	r3, [r4, #0]
 8006e8c:	bd38      	pop	{r3, r4, r5, pc}
 8006e8e:	bf00      	nop
 8006e90:	20001094 	.word	0x20001094

08006e94 <_getpid_r>:
 8006e94:	f7fa bb72 	b.w	800157c <_getpid>

08006e98 <exp>:
 8006e98:	b538      	push	{r3, r4, r5, lr}
 8006e9a:	ed2d 8b02 	vpush	{d8}
 8006e9e:	ec55 4b10 	vmov	r4, r5, d0
 8006ea2:	f000 f8a5 	bl	8006ff0 <__ieee754_exp>
 8006ea6:	eeb0 8a40 	vmov.f32	s16, s0
 8006eaa:	eef0 8a60 	vmov.f32	s17, s1
 8006eae:	ec45 4b10 	vmov	d0, r4, r5
 8006eb2:	f000 f885 	bl	8006fc0 <finite>
 8006eb6:	b168      	cbz	r0, 8006ed4 <exp+0x3c>
 8006eb8:	a317      	add	r3, pc, #92	; (adr r3, 8006f18 <exp+0x80>)
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	f7f9 fe31 	bl	8000b28 <__aeabi_dcmpgt>
 8006ec6:	b160      	cbz	r0, 8006ee2 <exp+0x4a>
 8006ec8:	f7fe f946 	bl	8005158 <__errno>
 8006ecc:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8006f08 <exp+0x70>
 8006ed0:	2322      	movs	r3, #34	; 0x22
 8006ed2:	6003      	str	r3, [r0, #0]
 8006ed4:	eeb0 0a48 	vmov.f32	s0, s16
 8006ed8:	eef0 0a68 	vmov.f32	s1, s17
 8006edc:	ecbd 8b02 	vpop	{d8}
 8006ee0:	bd38      	pop	{r3, r4, r5, pc}
 8006ee2:	a30f      	add	r3, pc, #60	; (adr r3, 8006f20 <exp+0x88>)
 8006ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee8:	4620      	mov	r0, r4
 8006eea:	4629      	mov	r1, r5
 8006eec:	f7f9 fdfe 	bl	8000aec <__aeabi_dcmplt>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	d0ef      	beq.n	8006ed4 <exp+0x3c>
 8006ef4:	f7fe f930 	bl	8005158 <__errno>
 8006ef8:	2322      	movs	r3, #34	; 0x22
 8006efa:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8006f10 <exp+0x78>
 8006efe:	6003      	str	r3, [r0, #0]
 8006f00:	e7e8      	b.n	8006ed4 <exp+0x3c>
 8006f02:	bf00      	nop
 8006f04:	f3af 8000 	nop.w
 8006f08:	00000000 	.word	0x00000000
 8006f0c:	7ff00000 	.word	0x7ff00000
	...
 8006f18:	fefa39ef 	.word	0xfefa39ef
 8006f1c:	40862e42 	.word	0x40862e42
 8006f20:	d52d3051 	.word	0xd52d3051
 8006f24:	c0874910 	.word	0xc0874910

08006f28 <logf>:
 8006f28:	b508      	push	{r3, lr}
 8006f2a:	ed2d 8b02 	vpush	{d8}
 8006f2e:	eeb0 8a40 	vmov.f32	s16, s0
 8006f32:	f000 f9df 	bl	80072f4 <__ieee754_logf>
 8006f36:	eeb4 8a48 	vcmp.f32	s16, s16
 8006f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f3e:	d60f      	bvs.n	8006f60 <logf+0x38>
 8006f40:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f48:	dc0a      	bgt.n	8006f60 <logf+0x38>
 8006f4a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f52:	d108      	bne.n	8006f66 <logf+0x3e>
 8006f54:	f7fe f900 	bl	8005158 <__errno>
 8006f58:	2322      	movs	r3, #34	; 0x22
 8006f5a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8006f7c <logf+0x54>
 8006f5e:	6003      	str	r3, [r0, #0]
 8006f60:	ecbd 8b02 	vpop	{d8}
 8006f64:	bd08      	pop	{r3, pc}
 8006f66:	f7fe f8f7 	bl	8005158 <__errno>
 8006f6a:	ecbd 8b02 	vpop	{d8}
 8006f6e:	2321      	movs	r3, #33	; 0x21
 8006f70:	6003      	str	r3, [r0, #0]
 8006f72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006f76:	4802      	ldr	r0, [pc, #8]	; (8006f80 <logf+0x58>)
 8006f78:	f000 b82e 	b.w	8006fd8 <nanf>
 8006f7c:	ff800000 	.word	0xff800000
 8006f80:	08007932 	.word	0x08007932

08006f84 <sqrtf>:
 8006f84:	b508      	push	{r3, lr}
 8006f86:	ed2d 8b02 	vpush	{d8}
 8006f8a:	eeb0 8a40 	vmov.f32	s16, s0
 8006f8e:	f000 f829 	bl	8006fe4 <__ieee754_sqrtf>
 8006f92:	eeb4 8a48 	vcmp.f32	s16, s16
 8006f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f9a:	d60c      	bvs.n	8006fb6 <sqrtf+0x32>
 8006f9c:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006fbc <sqrtf+0x38>
 8006fa0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa8:	d505      	bpl.n	8006fb6 <sqrtf+0x32>
 8006faa:	f7fe f8d5 	bl	8005158 <__errno>
 8006fae:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006fb2:	2321      	movs	r3, #33	; 0x21
 8006fb4:	6003      	str	r3, [r0, #0]
 8006fb6:	ecbd 8b02 	vpop	{d8}
 8006fba:	bd08      	pop	{r3, pc}
 8006fbc:	00000000 	.word	0x00000000

08006fc0 <finite>:
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	ed8d 0b00 	vstr	d0, [sp]
 8006fc6:	9801      	ldr	r0, [sp, #4]
 8006fc8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006fcc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006fd0:	0fc0      	lsrs	r0, r0, #31
 8006fd2:	b002      	add	sp, #8
 8006fd4:	4770      	bx	lr
	...

08006fd8 <nanf>:
 8006fd8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006fe0 <nanf+0x8>
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	7fc00000 	.word	0x7fc00000

08006fe4 <__ieee754_sqrtf>:
 8006fe4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006fe8:	4770      	bx	lr
 8006fea:	0000      	movs	r0, r0
 8006fec:	0000      	movs	r0, r0
	...

08006ff0 <__ieee754_exp>:
 8006ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff4:	ec55 4b10 	vmov	r4, r5, d0
 8006ff8:	49b5      	ldr	r1, [pc, #724]	; (80072d0 <__ieee754_exp+0x2e0>)
 8006ffa:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8006ffe:	428a      	cmp	r2, r1
 8007000:	ed2d 8b04 	vpush	{d8-d9}
 8007004:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8007008:	d93b      	bls.n	8007082 <__ieee754_exp+0x92>
 800700a:	49b2      	ldr	r1, [pc, #712]	; (80072d4 <__ieee754_exp+0x2e4>)
 800700c:	428a      	cmp	r2, r1
 800700e:	d916      	bls.n	800703e <__ieee754_exp+0x4e>
 8007010:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007014:	4323      	orrs	r3, r4
 8007016:	ee10 2a10 	vmov	r2, s0
 800701a:	d007      	beq.n	800702c <__ieee754_exp+0x3c>
 800701c:	462b      	mov	r3, r5
 800701e:	4620      	mov	r0, r4
 8007020:	4629      	mov	r1, r5
 8007022:	f7f9 f93b 	bl	800029c <__adddf3>
 8007026:	4604      	mov	r4, r0
 8007028:	460d      	mov	r5, r1
 800702a:	e002      	b.n	8007032 <__ieee754_exp+0x42>
 800702c:	b10e      	cbz	r6, 8007032 <__ieee754_exp+0x42>
 800702e:	2400      	movs	r4, #0
 8007030:	2500      	movs	r5, #0
 8007032:	ecbd 8b04 	vpop	{d8-d9}
 8007036:	ec45 4b10 	vmov	d0, r4, r5
 800703a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800703e:	a38e      	add	r3, pc, #568	; (adr r3, 8007278 <__ieee754_exp+0x288>)
 8007040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007044:	ee10 0a10 	vmov	r0, s0
 8007048:	4629      	mov	r1, r5
 800704a:	f7f9 fd6d 	bl	8000b28 <__aeabi_dcmpgt>
 800704e:	4607      	mov	r7, r0
 8007050:	b130      	cbz	r0, 8007060 <__ieee754_exp+0x70>
 8007052:	ecbd 8b04 	vpop	{d8-d9}
 8007056:	2000      	movs	r0, #0
 8007058:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800705c:	f000 ba63 	b.w	8007526 <__math_oflow>
 8007060:	a387      	add	r3, pc, #540	; (adr r3, 8007280 <__ieee754_exp+0x290>)
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	4620      	mov	r0, r4
 8007068:	4629      	mov	r1, r5
 800706a:	f7f9 fd3f 	bl	8000aec <__aeabi_dcmplt>
 800706e:	2800      	cmp	r0, #0
 8007070:	f000 808b 	beq.w	800718a <__ieee754_exp+0x19a>
 8007074:	ecbd 8b04 	vpop	{d8-d9}
 8007078:	4638      	mov	r0, r7
 800707a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800707e:	f000 ba49 	b.w	8007514 <__math_uflow>
 8007082:	4b95      	ldr	r3, [pc, #596]	; (80072d8 <__ieee754_exp+0x2e8>)
 8007084:	429a      	cmp	r2, r3
 8007086:	f240 80ac 	bls.w	80071e2 <__ieee754_exp+0x1f2>
 800708a:	4b94      	ldr	r3, [pc, #592]	; (80072dc <__ieee754_exp+0x2ec>)
 800708c:	429a      	cmp	r2, r3
 800708e:	d87c      	bhi.n	800718a <__ieee754_exp+0x19a>
 8007090:	4b93      	ldr	r3, [pc, #588]	; (80072e0 <__ieee754_exp+0x2f0>)
 8007092:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709a:	ee10 0a10 	vmov	r0, s0
 800709e:	4629      	mov	r1, r5
 80070a0:	f7f9 f8fa 	bl	8000298 <__aeabi_dsub>
 80070a4:	4b8f      	ldr	r3, [pc, #572]	; (80072e4 <__ieee754_exp+0x2f4>)
 80070a6:	00f7      	lsls	r7, r6, #3
 80070a8:	443b      	add	r3, r7
 80070aa:	ed93 7b00 	vldr	d7, [r3]
 80070ae:	f1c6 0a01 	rsb	sl, r6, #1
 80070b2:	4680      	mov	r8, r0
 80070b4:	4689      	mov	r9, r1
 80070b6:	ebaa 0a06 	sub.w	sl, sl, r6
 80070ba:	eeb0 8a47 	vmov.f32	s16, s14
 80070be:	eef0 8a67 	vmov.f32	s17, s15
 80070c2:	ec53 2b18 	vmov	r2, r3, d8
 80070c6:	4640      	mov	r0, r8
 80070c8:	4649      	mov	r1, r9
 80070ca:	f7f9 f8e5 	bl	8000298 <__aeabi_dsub>
 80070ce:	4604      	mov	r4, r0
 80070d0:	460d      	mov	r5, r1
 80070d2:	4622      	mov	r2, r4
 80070d4:	462b      	mov	r3, r5
 80070d6:	4620      	mov	r0, r4
 80070d8:	4629      	mov	r1, r5
 80070da:	f7f9 fa95 	bl	8000608 <__aeabi_dmul>
 80070de:	a36a      	add	r3, pc, #424	; (adr r3, 8007288 <__ieee754_exp+0x298>)
 80070e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e4:	4606      	mov	r6, r0
 80070e6:	460f      	mov	r7, r1
 80070e8:	f7f9 fa8e 	bl	8000608 <__aeabi_dmul>
 80070ec:	a368      	add	r3, pc, #416	; (adr r3, 8007290 <__ieee754_exp+0x2a0>)
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	f7f9 f8d1 	bl	8000298 <__aeabi_dsub>
 80070f6:	4632      	mov	r2, r6
 80070f8:	463b      	mov	r3, r7
 80070fa:	f7f9 fa85 	bl	8000608 <__aeabi_dmul>
 80070fe:	a366      	add	r3, pc, #408	; (adr r3, 8007298 <__ieee754_exp+0x2a8>)
 8007100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007104:	f7f9 f8ca 	bl	800029c <__adddf3>
 8007108:	4632      	mov	r2, r6
 800710a:	463b      	mov	r3, r7
 800710c:	f7f9 fa7c 	bl	8000608 <__aeabi_dmul>
 8007110:	a363      	add	r3, pc, #396	; (adr r3, 80072a0 <__ieee754_exp+0x2b0>)
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	f7f9 f8bf 	bl	8000298 <__aeabi_dsub>
 800711a:	4632      	mov	r2, r6
 800711c:	463b      	mov	r3, r7
 800711e:	f7f9 fa73 	bl	8000608 <__aeabi_dmul>
 8007122:	a361      	add	r3, pc, #388	; (adr r3, 80072a8 <__ieee754_exp+0x2b8>)
 8007124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007128:	f7f9 f8b8 	bl	800029c <__adddf3>
 800712c:	4632      	mov	r2, r6
 800712e:	463b      	mov	r3, r7
 8007130:	f7f9 fa6a 	bl	8000608 <__aeabi_dmul>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	4620      	mov	r0, r4
 800713a:	4629      	mov	r1, r5
 800713c:	f7f9 f8ac 	bl	8000298 <__aeabi_dsub>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4606      	mov	r6, r0
 8007146:	460f      	mov	r7, r1
 8007148:	4620      	mov	r0, r4
 800714a:	4629      	mov	r1, r5
 800714c:	f7f9 fa5c 	bl	8000608 <__aeabi_dmul>
 8007150:	ec41 0b19 	vmov	d9, r0, r1
 8007154:	f1ba 0f00 	cmp.w	sl, #0
 8007158:	d15d      	bne.n	8007216 <__ieee754_exp+0x226>
 800715a:	2200      	movs	r2, #0
 800715c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007160:	4630      	mov	r0, r6
 8007162:	4639      	mov	r1, r7
 8007164:	f7f9 f898 	bl	8000298 <__aeabi_dsub>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	ec51 0b19 	vmov	r0, r1, d9
 8007170:	f7f9 fb74 	bl	800085c <__aeabi_ddiv>
 8007174:	4622      	mov	r2, r4
 8007176:	462b      	mov	r3, r5
 8007178:	f7f9 f88e 	bl	8000298 <__aeabi_dsub>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	2000      	movs	r0, #0
 8007182:	4959      	ldr	r1, [pc, #356]	; (80072e8 <__ieee754_exp+0x2f8>)
 8007184:	f7f9 f888 	bl	8000298 <__aeabi_dsub>
 8007188:	e74d      	b.n	8007026 <__ieee754_exp+0x36>
 800718a:	4b58      	ldr	r3, [pc, #352]	; (80072ec <__ieee754_exp+0x2fc>)
 800718c:	4620      	mov	r0, r4
 800718e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007192:	4629      	mov	r1, r5
 8007194:	a346      	add	r3, pc, #280	; (adr r3, 80072b0 <__ieee754_exp+0x2c0>)
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	f7f9 fa35 	bl	8000608 <__aeabi_dmul>
 800719e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80071a2:	f7f9 f87b 	bl	800029c <__adddf3>
 80071a6:	f7f9 fcdf 	bl	8000b68 <__aeabi_d2iz>
 80071aa:	4682      	mov	sl, r0
 80071ac:	f7f9 f9c2 	bl	8000534 <__aeabi_i2d>
 80071b0:	a341      	add	r3, pc, #260	; (adr r3, 80072b8 <__ieee754_exp+0x2c8>)
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	4606      	mov	r6, r0
 80071b8:	460f      	mov	r7, r1
 80071ba:	f7f9 fa25 	bl	8000608 <__aeabi_dmul>
 80071be:	4602      	mov	r2, r0
 80071c0:	460b      	mov	r3, r1
 80071c2:	4620      	mov	r0, r4
 80071c4:	4629      	mov	r1, r5
 80071c6:	f7f9 f867 	bl	8000298 <__aeabi_dsub>
 80071ca:	a33d      	add	r3, pc, #244	; (adr r3, 80072c0 <__ieee754_exp+0x2d0>)
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	4680      	mov	r8, r0
 80071d2:	4689      	mov	r9, r1
 80071d4:	4630      	mov	r0, r6
 80071d6:	4639      	mov	r1, r7
 80071d8:	f7f9 fa16 	bl	8000608 <__aeabi_dmul>
 80071dc:	ec41 0b18 	vmov	d8, r0, r1
 80071e0:	e76f      	b.n	80070c2 <__ieee754_exp+0xd2>
 80071e2:	4b43      	ldr	r3, [pc, #268]	; (80072f0 <__ieee754_exp+0x300>)
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d811      	bhi.n	800720c <__ieee754_exp+0x21c>
 80071e8:	a337      	add	r3, pc, #220	; (adr r3, 80072c8 <__ieee754_exp+0x2d8>)
 80071ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ee:	ee10 0a10 	vmov	r0, s0
 80071f2:	4629      	mov	r1, r5
 80071f4:	f7f9 f852 	bl	800029c <__adddf3>
 80071f8:	4b3b      	ldr	r3, [pc, #236]	; (80072e8 <__ieee754_exp+0x2f8>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	f7f9 fc94 	bl	8000b28 <__aeabi_dcmpgt>
 8007200:	b138      	cbz	r0, 8007212 <__ieee754_exp+0x222>
 8007202:	4b39      	ldr	r3, [pc, #228]	; (80072e8 <__ieee754_exp+0x2f8>)
 8007204:	2200      	movs	r2, #0
 8007206:	4620      	mov	r0, r4
 8007208:	4629      	mov	r1, r5
 800720a:	e70a      	b.n	8007022 <__ieee754_exp+0x32>
 800720c:	f04f 0a00 	mov.w	sl, #0
 8007210:	e75f      	b.n	80070d2 <__ieee754_exp+0xe2>
 8007212:	4682      	mov	sl, r0
 8007214:	e75d      	b.n	80070d2 <__ieee754_exp+0xe2>
 8007216:	4632      	mov	r2, r6
 8007218:	463b      	mov	r3, r7
 800721a:	2000      	movs	r0, #0
 800721c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007220:	f7f9 f83a 	bl	8000298 <__aeabi_dsub>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	ec51 0b19 	vmov	r0, r1, d9
 800722c:	f7f9 fb16 	bl	800085c <__aeabi_ddiv>
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	ec51 0b18 	vmov	r0, r1, d8
 8007238:	f7f9 f82e 	bl	8000298 <__aeabi_dsub>
 800723c:	4642      	mov	r2, r8
 800723e:	464b      	mov	r3, r9
 8007240:	f7f9 f82a 	bl	8000298 <__aeabi_dsub>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	2000      	movs	r0, #0
 800724a:	4927      	ldr	r1, [pc, #156]	; (80072e8 <__ieee754_exp+0x2f8>)
 800724c:	f7f9 f824 	bl	8000298 <__aeabi_dsub>
 8007250:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8007254:	4592      	cmp	sl, r2
 8007256:	db02      	blt.n	800725e <__ieee754_exp+0x26e>
 8007258:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800725c:	e6e3      	b.n	8007026 <__ieee754_exp+0x36>
 800725e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8007262:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007266:	2200      	movs	r2, #0
 8007268:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800726c:	f7f9 f9cc 	bl	8000608 <__aeabi_dmul>
 8007270:	e6d9      	b.n	8007026 <__ieee754_exp+0x36>
 8007272:	bf00      	nop
 8007274:	f3af 8000 	nop.w
 8007278:	fefa39ef 	.word	0xfefa39ef
 800727c:	40862e42 	.word	0x40862e42
 8007280:	d52d3051 	.word	0xd52d3051
 8007284:	c0874910 	.word	0xc0874910
 8007288:	72bea4d0 	.word	0x72bea4d0
 800728c:	3e663769 	.word	0x3e663769
 8007290:	c5d26bf1 	.word	0xc5d26bf1
 8007294:	3ebbbd41 	.word	0x3ebbbd41
 8007298:	af25de2c 	.word	0xaf25de2c
 800729c:	3f11566a 	.word	0x3f11566a
 80072a0:	16bebd93 	.word	0x16bebd93
 80072a4:	3f66c16c 	.word	0x3f66c16c
 80072a8:	5555553e 	.word	0x5555553e
 80072ac:	3fc55555 	.word	0x3fc55555
 80072b0:	652b82fe 	.word	0x652b82fe
 80072b4:	3ff71547 	.word	0x3ff71547
 80072b8:	fee00000 	.word	0xfee00000
 80072bc:	3fe62e42 	.word	0x3fe62e42
 80072c0:	35793c76 	.word	0x35793c76
 80072c4:	3dea39ef 	.word	0x3dea39ef
 80072c8:	8800759c 	.word	0x8800759c
 80072cc:	7e37e43c 	.word	0x7e37e43c
 80072d0:	40862e41 	.word	0x40862e41
 80072d4:	7fefffff 	.word	0x7fefffff
 80072d8:	3fd62e42 	.word	0x3fd62e42
 80072dc:	3ff0a2b1 	.word	0x3ff0a2b1
 80072e0:	08007a48 	.word	0x08007a48
 80072e4:	08007a58 	.word	0x08007a58
 80072e8:	3ff00000 	.word	0x3ff00000
 80072ec:	08007a38 	.word	0x08007a38
 80072f0:	3defffff 	.word	0x3defffff

080072f4 <__ieee754_logf>:
 80072f4:	ee10 3a10 	vmov	r3, s0
 80072f8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80072fc:	d106      	bne.n	800730c <__ieee754_logf+0x18>
 80072fe:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8007498 <__ieee754_logf+0x1a4>
 8007302:	eddf 7a66 	vldr	s15, [pc, #408]	; 800749c <__ieee754_logf+0x1a8>
 8007306:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800730a:	4770      	bx	lr
 800730c:	2b00      	cmp	r3, #0
 800730e:	da02      	bge.n	8007316 <__ieee754_logf+0x22>
 8007310:	ee30 7a40 	vsub.f32	s14, s0, s0
 8007314:	e7f5      	b.n	8007302 <__ieee754_logf+0xe>
 8007316:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800731a:	db02      	blt.n	8007322 <__ieee754_logf+0x2e>
 800731c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007320:	4770      	bx	lr
 8007322:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007326:	bfb8      	it	lt
 8007328:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 80074a0 <__ieee754_logf+0x1ac>
 800732c:	485d      	ldr	r0, [pc, #372]	; (80074a4 <__ieee754_logf+0x1b0>)
 800732e:	bfbe      	ittt	lt
 8007330:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8007334:	f06f 0118 	mvnlt.w	r1, #24
 8007338:	ee17 3a90 	vmovlt	r3, s15
 800733c:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8007340:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007344:	4418      	add	r0, r3
 8007346:	bfa8      	it	ge
 8007348:	2100      	movge	r1, #0
 800734a:	3a7f      	subs	r2, #127	; 0x7f
 800734c:	440a      	add	r2, r1
 800734e:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8007352:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8007356:	4319      	orrs	r1, r3
 8007358:	ee00 1a10 	vmov	s0, r1
 800735c:	4952      	ldr	r1, [pc, #328]	; (80074a8 <__ieee754_logf+0x1b4>)
 800735e:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8007362:	f103 000f 	add.w	r0, r3, #15
 8007366:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800736a:	4001      	ands	r1, r0
 800736c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007370:	bb89      	cbnz	r1, 80073d6 <__ieee754_logf+0xe2>
 8007372:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737a:	d10f      	bne.n	800739c <__ieee754_logf+0xa8>
 800737c:	2a00      	cmp	r2, #0
 800737e:	f000 8087 	beq.w	8007490 <__ieee754_logf+0x19c>
 8007382:	ee07 2a90 	vmov	s15, r2
 8007386:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80074ac <__ieee754_logf+0x1b8>
 800738a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80074b0 <__ieee754_logf+0x1bc>
 800738e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007392:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007396:	eea7 0a87 	vfma.f32	s0, s15, s14
 800739a:	4770      	bx	lr
 800739c:	eddf 6a45 	vldr	s13, [pc, #276]	; 80074b4 <__ieee754_logf+0x1c0>
 80073a0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80073a4:	eee0 7a66 	vfms.f32	s15, s0, s13
 80073a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80073ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80073b0:	b912      	cbnz	r2, 80073b8 <__ieee754_logf+0xc4>
 80073b2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80073b6:	4770      	bx	lr
 80073b8:	ee07 2a90 	vmov	s15, r2
 80073bc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80074ac <__ieee754_logf+0x1b8>
 80073c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073c4:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80073c8:	ee37 0a40 	vsub.f32	s0, s14, s0
 80073cc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80074b0 <__ieee754_logf+0x1bc>
 80073d0:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80073d4:	4770      	bx	lr
 80073d6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80073da:	ee70 7a27 	vadd.f32	s15, s0, s15
 80073de:	eddf 5a36 	vldr	s11, [pc, #216]	; 80074b8 <__ieee754_logf+0x1c4>
 80073e2:	eddf 4a36 	vldr	s9, [pc, #216]	; 80074bc <__ieee754_logf+0x1c8>
 80073e6:	4936      	ldr	r1, [pc, #216]	; (80074c0 <__ieee754_logf+0x1cc>)
 80073e8:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80073ec:	4419      	add	r1, r3
 80073ee:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 80073f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80073f6:	430b      	orrs	r3, r1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	ee07 2a90 	vmov	s15, r2
 80073fe:	ee26 5a06 	vmul.f32	s10, s12, s12
 8007402:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007406:	ee25 7a05 	vmul.f32	s14, s10, s10
 800740a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80074c4 <__ieee754_logf+0x1d0>
 800740e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007412:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80074c8 <__ieee754_logf+0x1d4>
 8007416:	eee7 5a87 	vfma.f32	s11, s15, s14
 800741a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80074cc <__ieee754_logf+0x1d8>
 800741e:	eee7 7a24 	vfma.f32	s15, s14, s9
 8007422:	eddf 4a2b 	vldr	s9, [pc, #172]	; 80074d0 <__ieee754_logf+0x1dc>
 8007426:	eee7 4a87 	vfma.f32	s9, s15, s14
 800742a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80074d4 <__ieee754_logf+0x1e0>
 800742e:	eee4 7a87 	vfma.f32	s15, s9, s14
 8007432:	ee67 7a85 	vmul.f32	s15, s15, s10
 8007436:	eee5 7a87 	vfma.f32	s15, s11, s14
 800743a:	dd1a      	ble.n	8007472 <__ieee754_logf+0x17e>
 800743c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007440:	ee20 7a07 	vmul.f32	s14, s0, s14
 8007444:	ee27 7a00 	vmul.f32	s14, s14, s0
 8007448:	ee77 7a87 	vadd.f32	s15, s15, s14
 800744c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007450:	b912      	cbnz	r2, 8007458 <__ieee754_logf+0x164>
 8007452:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007456:	e7ac      	b.n	80073b2 <__ieee754_logf+0xbe>
 8007458:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80074ac <__ieee754_logf+0x1b8>
 800745c:	eee6 7a86 	vfma.f32	s15, s13, s12
 8007460:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007464:	ee37 0a40 	vsub.f32	s0, s14, s0
 8007468:	eddf 7a11 	vldr	s15, [pc, #68]	; 80074b0 <__ieee754_logf+0x1bc>
 800746c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8007470:	4770      	bx	lr
 8007472:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007476:	ee67 7a86 	vmul.f32	s15, s15, s12
 800747a:	b912      	cbnz	r2, 8007482 <__ieee754_logf+0x18e>
 800747c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007480:	4770      	bx	lr
 8007482:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80074ac <__ieee754_logf+0x1b8>
 8007486:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800748a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800748e:	e7eb      	b.n	8007468 <__ieee754_logf+0x174>
 8007490:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800749c <__ieee754_logf+0x1a8>
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	cc000000 	.word	0xcc000000
 800749c:	00000000 	.word	0x00000000
 80074a0:	4c000000 	.word	0x4c000000
 80074a4:	004afb20 	.word	0x004afb20
 80074a8:	007ffff0 	.word	0x007ffff0
 80074ac:	3717f7d1 	.word	0x3717f7d1
 80074b0:	3f317180 	.word	0x3f317180
 80074b4:	3eaaaaab 	.word	0x3eaaaaab
 80074b8:	3e1cd04f 	.word	0x3e1cd04f
 80074bc:	3e178897 	.word	0x3e178897
 80074c0:	ffcf5c30 	.word	0xffcf5c30
 80074c4:	3e638e29 	.word	0x3e638e29
 80074c8:	3ecccccd 	.word	0x3ecccccd
 80074cc:	3e3a3325 	.word	0x3e3a3325
 80074d0:	3e924925 	.word	0x3e924925
 80074d4:	3f2aaaab 	.word	0x3f2aaaab

080074d8 <with_errno>:
 80074d8:	b570      	push	{r4, r5, r6, lr}
 80074da:	4604      	mov	r4, r0
 80074dc:	460d      	mov	r5, r1
 80074de:	4616      	mov	r6, r2
 80074e0:	f7fd fe3a 	bl	8005158 <__errno>
 80074e4:	4629      	mov	r1, r5
 80074e6:	6006      	str	r6, [r0, #0]
 80074e8:	4620      	mov	r0, r4
 80074ea:	bd70      	pop	{r4, r5, r6, pc}

080074ec <xflow>:
 80074ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074ee:	4614      	mov	r4, r2
 80074f0:	461d      	mov	r5, r3
 80074f2:	b108      	cbz	r0, 80074f8 <xflow+0xc>
 80074f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80074f8:	e9cd 2300 	strd	r2, r3, [sp]
 80074fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007500:	4620      	mov	r0, r4
 8007502:	4629      	mov	r1, r5
 8007504:	f7f9 f880 	bl	8000608 <__aeabi_dmul>
 8007508:	2222      	movs	r2, #34	; 0x22
 800750a:	b003      	add	sp, #12
 800750c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007510:	f7ff bfe2 	b.w	80074d8 <with_errno>

08007514 <__math_uflow>:
 8007514:	b508      	push	{r3, lr}
 8007516:	2200      	movs	r2, #0
 8007518:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800751c:	f7ff ffe6 	bl	80074ec <xflow>
 8007520:	ec41 0b10 	vmov	d0, r0, r1
 8007524:	bd08      	pop	{r3, pc}

08007526 <__math_oflow>:
 8007526:	b508      	push	{r3, lr}
 8007528:	2200      	movs	r2, #0
 800752a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800752e:	f7ff ffdd 	bl	80074ec <xflow>
 8007532:	ec41 0b10 	vmov	d0, r0, r1
 8007536:	bd08      	pop	{r3, pc}

08007538 <_init>:
 8007538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753a:	bf00      	nop
 800753c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800753e:	bc08      	pop	{r3}
 8007540:	469e      	mov	lr, r3
 8007542:	4770      	bx	lr

08007544 <_fini>:
 8007544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007546:	bf00      	nop
 8007548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800754a:	bc08      	pop	{r3}
 800754c:	469e      	mov	lr, r3
 800754e:	4770      	bx	lr
